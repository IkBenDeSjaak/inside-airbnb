/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 377.0, "minX": 0.0, "maxY": 17598.0, "series": [{"data": [[0.0, 377.0], [0.1, 377.0], [0.2, 377.0], [0.3, 381.0], [0.4, 381.0], [0.5, 382.0], [0.6, 382.0], [0.7, 384.0], [0.8, 384.0], [0.9, 384.0], [1.0, 393.0], [1.1, 393.0], [1.2, 401.0], [1.3, 401.0], [1.4, 413.0], [1.5, 413.0], [1.6, 413.0], [1.7, 434.0], [1.8, 434.0], [1.9, 434.0], [2.0, 434.0], [2.1, 435.0], [2.2, 435.0], [2.3, 435.0], [2.4, 438.0], [2.5, 438.0], [2.6, 453.0], [2.7, 453.0], [2.8, 457.0], [2.9, 457.0], [3.0, 457.0], [3.1, 462.0], [3.2, 462.0], [3.3, 467.0], [3.4, 467.0], [3.5, 468.0], [3.6, 468.0], [3.7, 468.0], [3.8, 471.0], [3.9, 471.0], [4.0, 471.0], [4.1, 471.0], [4.2, 476.0], [4.3, 476.0], [4.4, 476.0], [4.5, 476.0], [4.6, 476.0], [4.7, 478.0], [4.8, 478.0], [4.9, 480.0], [5.0, 480.0], [5.1, 480.0], [5.2, 481.0], [5.3, 481.0], [5.4, 481.0], [5.5, 481.0], [5.6, 482.0], [5.7, 482.0], [5.8, 482.0], [5.9, 485.0], [6.0, 485.0], [6.1, 487.0], [6.2, 487.0], [6.3, 489.0], [6.4, 489.0], [6.5, 489.0], [6.6, 494.0], [6.7, 494.0], [6.8, 494.0], [6.9, 494.0], [7.0, 496.0], [7.1, 496.0], [7.2, 496.0], [7.3, 496.0], [7.4, 496.0], [7.5, 496.0], [7.6, 496.0], [7.7, 500.0], [7.8, 500.0], [7.9, 500.0], [8.0, 501.0], [8.1, 501.0], [8.2, 503.0], [8.3, 503.0], [8.4, 503.0], [8.5, 503.0], [8.6, 503.0], [8.7, 507.0], [8.8, 507.0], [8.9, 511.0], [9.0, 511.0], [9.1, 513.0], [9.2, 513.0], [9.3, 513.0], [9.4, 516.0], [9.5, 516.0], [9.6, 517.0], [9.7, 517.0], [9.8, 518.0], [9.9, 518.0], [10.0, 518.0], [10.1, 518.0], [10.2, 518.0], [10.3, 518.0], [10.4, 518.0], [10.5, 519.0], [10.6, 519.0], [10.7, 519.0], [10.8, 519.0], [10.9, 519.0], [11.0, 523.0], [11.1, 523.0], [11.2, 524.0], [11.3, 524.0], [11.4, 525.0], [11.5, 525.0], [11.6, 525.0], [11.7, 526.0], [11.8, 526.0], [11.9, 526.0], [12.0, 526.0], [12.1, 526.0], [12.2, 526.0], [12.3, 526.0], [12.4, 528.0], [12.5, 528.0], [12.6, 529.0], [12.7, 529.0], [12.8, 530.0], [12.9, 530.0], [13.0, 530.0], [13.1, 531.0], [13.2, 531.0], [13.3, 531.0], [13.4, 531.0], [13.5, 531.0], [13.6, 531.0], [13.7, 531.0], [13.8, 532.0], [13.9, 532.0], [14.0, 534.0], [14.1, 534.0], [14.2, 534.0], [14.3, 534.0], [14.4, 534.0], [14.5, 537.0], [14.6, 537.0], [14.7, 538.0], [14.8, 538.0], [14.9, 539.0], [15.0, 539.0], [15.1, 539.0], [15.2, 539.0], [15.3, 539.0], [15.4, 540.0], [15.5, 540.0], [15.6, 542.0], [15.7, 542.0], [15.8, 542.0], [15.9, 544.0], [16.0, 544.0], [16.1, 546.0], [16.2, 546.0], [16.3, 546.0], [16.4, 546.0], [16.5, 546.0], [16.6, 546.0], [16.7, 546.0], [16.8, 547.0], [16.9, 547.0], [17.0, 548.0], [17.1, 548.0], [17.2, 548.0], [17.3, 549.0], [17.4, 549.0], [17.5, 549.0], [17.6, 549.0], [17.7, 553.0], [17.8, 553.0], [17.9, 553.0], [18.0, 553.0], [18.1, 553.0], [18.2, 553.0], [18.3, 553.0], [18.4, 556.0], [18.5, 556.0], [18.6, 556.0], [18.7, 558.0], [18.8, 558.0], [18.9, 562.0], [19.0, 562.0], [19.1, 562.0], [19.2, 562.0], [19.3, 562.0], [19.4, 565.0], [19.5, 565.0], [19.6, 568.0], [19.7, 568.0], [19.8, 568.0], [19.9, 568.0], [20.0, 568.0], [20.1, 569.0], [20.2, 569.0], [20.3, 570.0], [20.4, 570.0], [20.5, 571.0], [20.6, 571.0], [20.7, 571.0], [20.8, 571.0], [20.9, 571.0], [21.0, 573.0], [21.1, 573.0], [21.2, 574.0], [21.3, 574.0], [21.4, 578.0], [21.5, 578.0], [21.6, 578.0], [21.7, 579.0], [21.8, 579.0], [21.9, 580.0], [22.0, 580.0], [22.1, 588.0], [22.2, 588.0], [22.3, 588.0], [22.4, 590.0], [22.5, 590.0], [22.6, 590.0], [22.7, 590.0], [22.8, 591.0], [22.9, 591.0], [23.0, 591.0], [23.1, 599.0], [23.2, 599.0], [23.3, 619.0], [23.4, 619.0], [23.5, 629.0], [23.6, 629.0], [23.7, 629.0], [23.8, 631.0], [23.9, 631.0], [24.0, 633.0], [24.1, 633.0], [24.2, 635.0], [24.3, 635.0], [24.4, 635.0], [24.5, 636.0], [24.6, 636.0], [24.7, 637.0], [24.8, 637.0], [24.9, 642.0], [25.0, 642.0], [25.1, 642.0], [25.2, 653.0], [25.3, 653.0], [25.4, 660.0], [25.5, 660.0], [25.6, 666.0], [25.7, 666.0], [25.8, 666.0], [25.9, 666.0], [26.0, 666.0], [26.1, 686.0], [26.2, 686.0], [26.3, 693.0], [26.4, 693.0], [26.5, 693.0], [26.6, 729.0], [26.7, 729.0], [26.8, 740.0], [26.9, 740.0], [27.0, 748.0], [27.1, 748.0], [27.2, 748.0], [27.3, 749.0], [27.4, 749.0], [27.5, 758.0], [27.6, 758.0], [27.7, 762.0], [27.8, 762.0], [27.9, 762.0], [28.0, 778.0], [28.1, 778.0], [28.2, 789.0], [28.3, 789.0], [28.4, 815.0], [28.5, 815.0], [28.6, 815.0], [28.7, 835.0], [28.8, 835.0], [28.9, 879.0], [29.0, 879.0], [29.1, 888.0], [29.2, 888.0], [29.3, 888.0], [29.4, 934.0], [29.5, 934.0], [29.6, 947.0], [29.7, 947.0], [29.8, 958.0], [29.9, 958.0], [30.0, 958.0], [30.1, 967.0], [30.2, 967.0], [30.3, 980.0], [30.4, 980.0], [30.5, 992.0], [30.6, 992.0], [30.7, 992.0], [30.8, 992.0], [30.9, 992.0], [31.0, 1021.0], [31.1, 1021.0], [31.2, 1027.0], [31.3, 1027.0], [31.4, 1108.0], [31.5, 1108.0], [31.6, 1108.0], [31.7, 1121.0], [31.8, 1121.0], [31.9, 1224.0], [32.0, 1224.0], [32.1, 1233.0], [32.2, 1233.0], [32.3, 1233.0], [32.4, 1254.0], [32.5, 1254.0], [32.6, 1290.0], [32.7, 1290.0], [32.8, 1303.0], [32.9, 1303.0], [33.0, 1303.0], [33.1, 1308.0], [33.2, 1308.0], [33.3, 1328.0], [33.4, 1328.0], [33.5, 1460.0], [33.6, 1460.0], [33.7, 1460.0], [33.8, 1611.0], [33.9, 1611.0], [34.0, 1629.0], [34.1, 1629.0], [34.2, 1834.0], [34.3, 1834.0], [34.4, 1834.0], [34.5, 1854.0], [34.6, 1854.0], [34.7, 2071.0], [34.8, 2071.0], [34.9, 2236.0], [35.0, 2236.0], [35.1, 2236.0], [35.2, 2423.0], [35.3, 2423.0], [35.4, 2503.0], [35.5, 2503.0], [35.6, 2529.0], [35.7, 2529.0], [35.8, 2529.0], [35.9, 2795.0], [36.0, 2795.0], [36.1, 2813.0], [36.2, 2813.0], [36.3, 2956.0], [36.4, 2956.0], [36.5, 2956.0], [36.6, 3361.0], [36.7, 3361.0], [36.8, 3366.0], [36.9, 3366.0], [37.0, 3477.0], [37.1, 3477.0], [37.2, 3477.0], [37.3, 3481.0], [37.4, 3481.0], [37.5, 3489.0], [37.6, 3489.0], [37.7, 3511.0], [37.8, 3511.0], [37.9, 3511.0], [38.0, 3577.0], [38.1, 3577.0], [38.2, 3754.0], [38.3, 3754.0], [38.4, 3820.0], [38.5, 3820.0], [38.6, 3820.0], [38.7, 3876.0], [38.8, 3876.0], [38.9, 3956.0], [39.0, 3956.0], [39.1, 4075.0], [39.2, 4075.0], [39.3, 4075.0], [39.4, 4091.0], [39.5, 4091.0], [39.6, 4138.0], [39.7, 4138.0], [39.8, 4304.0], [39.9, 4304.0], [40.0, 4542.0], [40.1, 4542.0], [40.2, 4542.0], [40.3, 4576.0], [40.4, 4576.0], [40.5, 4729.0], [40.6, 4729.0], [40.7, 4815.0], [40.8, 4815.0], [40.9, 4815.0], [41.0, 4877.0], [41.1, 4877.0], [41.2, 5089.0], [41.3, 5089.0], [41.4, 5158.0], [41.5, 5158.0], [41.6, 5158.0], [41.7, 5170.0], [41.8, 5170.0], [41.9, 5279.0], [42.0, 5279.0], [42.1, 5493.0], [42.2, 5493.0], [42.3, 5493.0], [42.4, 5816.0], [42.5, 5816.0], [42.6, 6162.0], [42.7, 6162.0], [42.8, 6169.0], [42.9, 6169.0], [43.0, 6169.0], [43.1, 6277.0], [43.2, 6277.0], [43.3, 6404.0], [43.4, 6404.0], [43.5, 6469.0], [43.6, 6469.0], [43.7, 6469.0], [43.8, 6527.0], [43.9, 6527.0], [44.0, 6571.0], [44.1, 6571.0], [44.2, 6626.0], [44.3, 6626.0], [44.4, 6626.0], [44.5, 6683.0], [44.6, 6683.0], [44.7, 6721.0], [44.8, 6721.0], [44.9, 6768.0], [45.0, 6768.0], [45.1, 6768.0], [45.2, 6855.0], [45.3, 6855.0], [45.4, 6951.0], [45.5, 6951.0], [45.6, 7020.0], [45.7, 7020.0], [45.8, 7020.0], [45.9, 7306.0], [46.0, 7306.0], [46.1, 7367.0], [46.2, 7367.0], [46.3, 7402.0], [46.4, 7402.0], [46.5, 7402.0], [46.6, 7448.0], [46.7, 7448.0], [46.8, 7703.0], [46.9, 7703.0], [47.0, 7828.0], [47.1, 7828.0], [47.2, 7828.0], [47.3, 7905.0], [47.4, 7905.0], [47.5, 7949.0], [47.6, 7949.0], [47.7, 8028.0], [47.8, 8028.0], [47.9, 8028.0], [48.0, 8039.0], [48.1, 8039.0], [48.2, 8059.0], [48.3, 8059.0], [48.4, 8126.0], [48.5, 8126.0], [48.6, 8126.0], [48.7, 8127.0], [48.8, 8127.0], [48.9, 8166.0], [49.0, 8166.0], [49.1, 8169.0], [49.2, 8169.0], [49.3, 8169.0], [49.4, 8224.0], [49.5, 8224.0], [49.6, 8227.0], [49.7, 8227.0], [49.8, 8265.0], [49.9, 8265.0], [50.0, 8339.0], [50.1, 8339.0], [50.2, 8339.0], [50.3, 8390.0], [50.4, 8390.0], [50.5, 8408.0], [50.6, 8408.0], [50.7, 8469.0], [50.8, 8469.0], [50.9, 8469.0], [51.0, 8486.0], [51.1, 8486.0], [51.2, 8562.0], [51.3, 8562.0], [51.4, 8583.0], [51.5, 8583.0], [51.6, 8583.0], [51.7, 8769.0], [51.8, 8769.0], [51.9, 8879.0], [52.0, 8879.0], [52.1, 8892.0], [52.2, 8892.0], [52.3, 8892.0], [52.4, 8897.0], [52.5, 8897.0], [52.6, 9056.0], [52.7, 9056.0], [52.8, 9184.0], [52.9, 9184.0], [53.0, 9184.0], [53.1, 9210.0], [53.2, 9210.0], [53.3, 9284.0], [53.4, 9284.0], [53.5, 9301.0], [53.6, 9301.0], [53.7, 9301.0], [53.8, 9344.0], [53.9, 9344.0], [54.0, 9397.0], [54.1, 9397.0], [54.2, 9418.0], [54.3, 9418.0], [54.4, 9418.0], [54.5, 9438.0], [54.6, 9438.0], [54.7, 9481.0], [54.8, 9481.0], [54.9, 9517.0], [55.0, 9517.0], [55.1, 9517.0], [55.2, 9612.0], [55.3, 9612.0], [55.4, 9738.0], [55.5, 9738.0], [55.6, 9986.0], [55.7, 9986.0], [55.8, 9986.0], [55.9, 10037.0], [56.0, 10037.0], [56.1, 10260.0], [56.2, 10260.0], [56.3, 10270.0], [56.4, 10270.0], [56.5, 10270.0], [56.6, 10275.0], [56.7, 10275.0], [56.8, 10395.0], [56.9, 10395.0], [57.0, 10476.0], [57.1, 10476.0], [57.2, 10476.0], [57.3, 10506.0], [57.4, 10506.0], [57.5, 10557.0], [57.6, 10557.0], [57.7, 10629.0], [57.8, 10629.0], [57.9, 10629.0], [58.0, 10771.0], [58.1, 10771.0], [58.2, 10785.0], [58.3, 10785.0], [58.4, 10856.0], [58.5, 10856.0], [58.6, 10856.0], [58.7, 11070.0], [58.8, 11070.0], [58.9, 11145.0], [59.0, 11145.0], [59.1, 11292.0], [59.2, 11292.0], [59.3, 11292.0], [59.4, 11348.0], [59.5, 11348.0], [59.6, 11418.0], [59.7, 11418.0], [59.8, 11445.0], [59.9, 11445.0], [60.0, 11468.0], [60.1, 11468.0], [60.2, 11468.0], [60.3, 11513.0], [60.4, 11513.0], [60.5, 11586.0], [60.6, 11586.0], [60.7, 11836.0], [60.8, 11836.0], [60.9, 11836.0], [61.0, 11877.0], [61.1, 11877.0], [61.2, 11890.0], [61.3, 11890.0], [61.4, 11925.0], [61.5, 11925.0], [61.6, 11925.0], [61.7, 11929.0], [61.8, 11929.0], [61.9, 12121.0], [62.0, 12121.0], [62.1, 12204.0], [62.2, 12204.0], [62.3, 12204.0], [62.4, 12223.0], [62.5, 12223.0], [62.6, 12297.0], [62.7, 12297.0], [62.8, 12376.0], [62.9, 12376.0], [63.0, 12376.0], [63.1, 12416.0], [63.2, 12416.0], [63.3, 12493.0], [63.4, 12493.0], [63.5, 12564.0], [63.6, 12564.0], [63.7, 12564.0], [63.8, 12573.0], [63.9, 12573.0], [64.0, 12577.0], [64.1, 12577.0], [64.2, 12627.0], [64.3, 12627.0], [64.4, 12627.0], [64.5, 12741.0], [64.6, 12741.0], [64.7, 12885.0], [64.8, 12885.0], [64.9, 12925.0], [65.0, 12925.0], [65.1, 12925.0], [65.2, 12980.0], [65.3, 12980.0], [65.4, 12984.0], [65.5, 12984.0], [65.6, 13016.0], [65.7, 13016.0], [65.8, 13016.0], [65.9, 13032.0], [66.0, 13032.0], [66.1, 13076.0], [66.2, 13076.0], [66.3, 13297.0], [66.4, 13297.0], [66.5, 13297.0], [66.6, 13396.0], [66.7, 13396.0], [66.8, 13426.0], [66.9, 13426.0], [67.0, 13432.0], [67.1, 13432.0], [67.2, 13432.0], [67.3, 13472.0], [67.4, 13472.0], [67.5, 13517.0], [67.6, 13517.0], [67.7, 13534.0], [67.8, 13534.0], [67.9, 13534.0], [68.0, 13541.0], [68.1, 13541.0], [68.2, 13606.0], [68.3, 13606.0], [68.4, 13640.0], [68.5, 13640.0], [68.6, 13640.0], [68.7, 13690.0], [68.8, 13690.0], [68.9, 13726.0], [69.0, 13726.0], [69.1, 13784.0], [69.2, 13784.0], [69.3, 13784.0], [69.4, 13785.0], [69.5, 13785.0], [69.6, 13820.0], [69.7, 13820.0], [69.8, 13826.0], [69.9, 13826.0], [70.0, 13837.0], [70.1, 13837.0], [70.2, 13837.0], [70.3, 13854.0], [70.4, 13854.0], [70.5, 13925.0], [70.6, 13925.0], [70.7, 13938.0], [70.8, 13938.0], [70.9, 13938.0], [71.0, 13962.0], [71.1, 13962.0], [71.2, 13969.0], [71.3, 13969.0], [71.4, 13973.0], [71.5, 13973.0], [71.6, 13973.0], [71.7, 13978.0], [71.8, 13978.0], [71.9, 14017.0], [72.0, 14017.0], [72.1, 14030.0], [72.2, 14030.0], [72.3, 14030.0], [72.4, 14084.0], [72.5, 14084.0], [72.6, 14085.0], [72.7, 14085.0], [72.8, 14099.0], [72.9, 14099.0], [73.0, 14099.0], [73.1, 14103.0], [73.2, 14103.0], [73.3, 14118.0], [73.4, 14118.0], [73.5, 14120.0], [73.6, 14120.0], [73.7, 14120.0], [73.8, 14140.0], [73.9, 14140.0], [74.0, 14144.0], [74.1, 14144.0], [74.2, 14145.0], [74.3, 14145.0], [74.4, 14145.0], [74.5, 14188.0], [74.6, 14188.0], [74.7, 14218.0], [74.8, 14218.0], [74.9, 14226.0], [75.0, 14226.0], [75.1, 14226.0], [75.2, 14234.0], [75.3, 14234.0], [75.4, 14236.0], [75.5, 14236.0], [75.6, 14242.0], [75.7, 14242.0], [75.8, 14242.0], [75.9, 14244.0], [76.0, 14244.0], [76.1, 14320.0], [76.2, 14320.0], [76.3, 14385.0], [76.4, 14385.0], [76.5, 14385.0], [76.6, 14420.0], [76.7, 14420.0], [76.8, 14424.0], [76.9, 14424.0], [77.0, 14444.0], [77.1, 14444.0], [77.2, 14444.0], [77.3, 14475.0], [77.4, 14475.0], [77.5, 14490.0], [77.6, 14490.0], [77.7, 14493.0], [77.8, 14493.0], [77.9, 14493.0], [78.0, 14521.0], [78.1, 14521.0], [78.2, 14545.0], [78.3, 14545.0], [78.4, 14573.0], [78.5, 14573.0], [78.6, 14573.0], [78.7, 14573.0], [78.8, 14573.0], [78.9, 14575.0], [79.0, 14575.0], [79.1, 14602.0], [79.2, 14602.0], [79.3, 14602.0], [79.4, 14617.0], [79.5, 14617.0], [79.6, 14620.0], [79.7, 14620.0], [79.8, 14632.0], [79.9, 14632.0], [80.0, 14650.0], [80.1, 14650.0], [80.2, 14650.0], [80.3, 14658.0], [80.4, 14658.0], [80.5, 14685.0], [80.6, 14685.0], [80.7, 14703.0], [80.8, 14703.0], [80.9, 14703.0], [81.0, 14709.0], [81.1, 14709.0], [81.2, 14716.0], [81.3, 14716.0], [81.4, 14784.0], [81.5, 14784.0], [81.6, 14784.0], [81.7, 14789.0], [81.8, 14789.0], [81.9, 14802.0], [82.0, 14802.0], [82.1, 14808.0], [82.2, 14808.0], [82.3, 14808.0], [82.4, 14820.0], [82.5, 14820.0], [82.6, 14837.0], [82.7, 14837.0], [82.8, 14847.0], [82.9, 14847.0], [83.0, 14847.0], [83.1, 14874.0], [83.2, 14874.0], [83.3, 14877.0], [83.4, 14877.0], [83.5, 14903.0], [83.6, 14903.0], [83.7, 14903.0], [83.8, 14928.0], [83.9, 14928.0], [84.0, 14967.0], [84.1, 14967.0], [84.2, 14976.0], [84.3, 14976.0], [84.4, 14976.0], [84.5, 14981.0], [84.6, 14981.0], [84.7, 15050.0], [84.8, 15050.0], [84.9, 15124.0], [85.0, 15124.0], [85.1, 15124.0], [85.2, 15158.0], [85.3, 15158.0], [85.4, 15171.0], [85.5, 15171.0], [85.6, 15185.0], [85.7, 15185.0], [85.8, 15185.0], [85.9, 15234.0], [86.0, 15234.0], [86.1, 15243.0], [86.2, 15243.0], [86.3, 15263.0], [86.4, 15263.0], [86.5, 15263.0], [86.6, 15276.0], [86.7, 15276.0], [86.8, 15289.0], [86.9, 15289.0], [87.0, 15312.0], [87.1, 15312.0], [87.2, 15312.0], [87.3, 15324.0], [87.4, 15324.0], [87.5, 15329.0], [87.6, 15329.0], [87.7, 15370.0], [87.8, 15370.0], [87.9, 15370.0], [88.0, 15410.0], [88.1, 15410.0], [88.2, 15411.0], [88.3, 15411.0], [88.4, 15429.0], [88.5, 15429.0], [88.6, 15429.0], [88.7, 15438.0], [88.8, 15438.0], [88.9, 15455.0], [89.0, 15455.0], [89.1, 15457.0], [89.2, 15457.0], [89.3, 15457.0], [89.4, 15460.0], [89.5, 15460.0], [89.6, 15500.0], [89.7, 15500.0], [89.8, 15508.0], [89.9, 15508.0], [90.0, 15508.0], [90.1, 15530.0], [90.2, 15530.0], [90.3, 15542.0], [90.4, 15542.0], [90.5, 15552.0], [90.6, 15552.0], [90.7, 15576.0], [90.8, 15576.0], [90.9, 15576.0], [91.0, 15627.0], [91.1, 15627.0], [91.2, 15651.0], [91.3, 15651.0], [91.4, 15652.0], [91.5, 15652.0], [91.6, 15652.0], [91.7, 15670.0], [91.8, 15670.0], [91.9, 15684.0], [92.0, 15684.0], [92.1, 15712.0], [92.2, 15712.0], [92.3, 15712.0], [92.4, 15752.0], [92.5, 15752.0], [92.6, 15809.0], [92.7, 15809.0], [92.8, 15841.0], [92.9, 15841.0], [93.0, 15841.0], [93.1, 15853.0], [93.2, 15853.0], [93.3, 15880.0], [93.4, 15880.0], [93.5, 15894.0], [93.6, 15894.0], [93.7, 15894.0], [93.8, 15958.0], [93.9, 15958.0], [94.0, 16016.0], [94.1, 16016.0], [94.2, 16026.0], [94.3, 16026.0], [94.4, 16026.0], [94.5, 16027.0], [94.6, 16027.0], [94.7, 16045.0], [94.8, 16045.0], [94.9, 16079.0], [95.0, 16079.0], [95.1, 16079.0], [95.2, 16102.0], [95.3, 16102.0], [95.4, 16105.0], [95.5, 16105.0], [95.6, 16202.0], [95.7, 16202.0], [95.8, 16202.0], [95.9, 16215.0], [96.0, 16215.0], [96.1, 16241.0], [96.2, 16241.0], [96.3, 16269.0], [96.4, 16269.0], [96.5, 16269.0], [96.6, 16319.0], [96.7, 16319.0], [96.8, 16348.0], [96.9, 16348.0], [97.0, 16394.0], [97.1, 16394.0], [97.2, 16394.0], [97.3, 16498.0], [97.4, 16498.0], [97.5, 16579.0], [97.6, 16579.0], [97.7, 16618.0], [97.8, 16618.0], [97.9, 16618.0], [98.0, 16623.0], [98.1, 16623.0], [98.2, 16637.0], [98.3, 16637.0], [98.4, 16653.0], [98.5, 16653.0], [98.6, 16653.0], [98.7, 16731.0], [98.8, 16731.0], [98.9, 16811.0], [99.0, 16811.0], [99.1, 16912.0], [99.2, 16912.0], [99.3, 16912.0], [99.4, 17040.0], [99.5, 17040.0], [99.6, 17115.0], [99.7, 17115.0], [99.8, 17598.0], [99.9, 17598.0], [100.0, 17598.0]], "isOverall": false, "label": "https://localhost:44313/Home/Statistics", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 300.0, "maxY": 67.0, "series": [{"data": [[300.0, 5.0], [400.0, 28.0], [500.0, 67.0], [600.0, 14.0], [700.0, 8.0], [800.0, 4.0], [900.0, 7.0], [1000.0, 2.0], [1100.0, 2.0], [1200.0, 4.0], [1300.0, 3.0], [1400.0, 1.0], [1600.0, 2.0], [1800.0, 2.0], [2000.0, 1.0], [2200.0, 1.0], [2400.0, 1.0], [2500.0, 2.0], [2800.0, 1.0], [2700.0, 1.0], [2900.0, 1.0], [3300.0, 2.0], [3400.0, 3.0], [3500.0, 2.0], [3700.0, 1.0], [3800.0, 2.0], [3900.0, 1.0], [4000.0, 2.0], [4100.0, 1.0], [4300.0, 1.0], [4500.0, 2.0], [4800.0, 2.0], [4700.0, 1.0], [5000.0, 1.0], [5100.0, 2.0], [5200.0, 1.0], [5400.0, 1.0], [5800.0, 1.0], [6100.0, 2.0], [6200.0, 1.0], [6400.0, 2.0], [6600.0, 2.0], [6500.0, 2.0], [6700.0, 2.0], [6800.0, 1.0], [6900.0, 1.0], [7000.0, 1.0], [7300.0, 2.0], [7400.0, 2.0], [7900.0, 2.0], [7800.0, 1.0], [7700.0, 1.0], [8100.0, 4.0], [8000.0, 3.0], [8200.0, 3.0], [8300.0, 2.0], [8500.0, 2.0], [8400.0, 3.0], [8700.0, 1.0], [8800.0, 3.0], [9000.0, 1.0], [9200.0, 2.0], [9100.0, 1.0], [9400.0, 3.0], [9500.0, 1.0], [9300.0, 3.0], [9700.0, 1.0], [9600.0, 1.0], [9900.0, 1.0], [10000.0, 1.0], [10200.0, 3.0], [10500.0, 2.0], [10300.0, 1.0], [10600.0, 1.0], [10700.0, 2.0], [10400.0, 1.0], [11100.0, 1.0], [10800.0, 1.0], [11000.0, 1.0], [11200.0, 1.0], [11300.0, 1.0], [11500.0, 2.0], [11400.0, 3.0], [11900.0, 2.0], [12100.0, 1.0], [11800.0, 3.0], [12200.0, 3.0], [12600.0, 1.0], [12500.0, 3.0], [12400.0, 2.0], [12300.0, 1.0], [12700.0, 1.0], [13000.0, 3.0], [13200.0, 1.0], [12900.0, 3.0], [12800.0, 1.0], [13300.0, 1.0], [13400.0, 3.0], [13800.0, 4.0], [13500.0, 3.0], [13700.0, 3.0], [13600.0, 3.0], [14100.0, 7.0], [13900.0, 6.0], [14300.0, 2.0], [14200.0, 6.0], [14000.0, 5.0], [14800.0, 7.0], [14500.0, 5.0], [14600.0, 7.0], [14400.0, 6.0], [14700.0, 5.0], [15200.0, 5.0], [15300.0, 4.0], [15100.0, 4.0], [14900.0, 5.0], [15000.0, 1.0], [15500.0, 6.0], [15400.0, 7.0], [15600.0, 5.0], [15800.0, 5.0], [15700.0, 2.0], [16200.0, 4.0], [15900.0, 1.0], [16100.0, 2.0], [16000.0, 5.0], [16300.0, 3.0], [16500.0, 1.0], [16700.0, 1.0], [16600.0, 4.0], [16400.0, 1.0], [16800.0, 1.0], [17000.0, 1.0], [17100.0, 1.0], [16900.0, 1.0], [17500.0, 1.0]], "isOverall": false, "label": "https://localhost:44313/Home/Statistics", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 17500.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 34.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1.500ms"], [2, "Requests having \nresponse time > 1.500ms"], [3, "Requests in error"]], "maxY": 285.0, "series": [{"data": [[0.0, 34.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 111.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1.500ms", "isController": false}, {"data": [[2.0, 285.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1.500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.6532880495E12, "maxY": 1.0, "series": [{"data": [[1.653288063E12, 1.0], [1.65328806E12, 1.0], [1.6532880825E12, 1.0], [1.653288057E12, 1.0], [1.653288099E12, 1.0], [1.6532880795E12, 1.0], [1.653288054E12, 1.0], [1.6532880765E12, 1.0], [1.653288051E12, 1.0], [1.653288096E12, 1.0], [1.6532880735E12, 1.0], [1.6532880705E12, 1.0], [1.653288093E12, 1.0], [1.6532880675E12, 1.0], [1.65328809E12, 1.0], [1.6532880645E12, 1.0], [1.653288087E12, 1.0], [1.653288084E12, 1.0], [1.6532880615E12, 1.0], [1.653288081E12, 1.0], [1.653288078E12, 1.0], [1.6532880585E12, 1.0], [1.653288075E12, 1.0], [1.6532880555E12, 1.0], [1.6532880975E12, 1.0], [1.6532880945E12, 1.0], [1.6532880525E12, 1.0], [1.6532880915E12, 1.0], [1.653288072E12, 1.0], [1.6532880495E12, 1.0], [1.6532880885E12, 1.0], [1.653288069E12, 1.0], [1.6532880855E12, 1.0], [1.653288066E12, 1.0]], "isOverall": false, "label": "parallel bzm - Parallel", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1500, "maxX": 1.653288099E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 631.3333333333334, "minX": 1.0, "maxY": 17598.0, "series": [{"data": [[2.0, 1810.8000000000002], [3.0, 1699.6666666666665], [4.0, 1549.7333333333336], [5.0, 1188.1], [6.0, 631.3333333333334], [7.0, 2571.714285714286], [8.0, 1216.0370370370374], [9.0, 1371.4], [10.0, 4327.25], [11.0, 15552.0], [12.0, 4260.0], [13.0, 2405.5555555555557], [14.0, 2935.0], [15.0, 7166.0], [16.0, 15243.0], [18.0, 14687.0], [19.0, 14236.0], [20.0, 16912.0], [21.0, 14218.0], [23.0, 10350.666666666666], [24.0, 13837.0], [25.0, 5576.666666666666], [26.0, 14521.0], [27.0, 16319.0], [28.0, 6177.666666666667], [29.0, 5053.0], [30.0, 8894.5], [31.0, 15841.0], [33.0, 8821.0], [32.0, 8616.0], [35.0, 16215.0], [34.0, 15276.0], [37.0, 15627.0], [36.0, 15508.0], [39.0, 8803.0], [38.0, 14120.0], [41.0, 14903.0], [40.0, 16653.0], [43.0, 13076.0], [42.0, 16394.0], [45.0, 13432.0], [44.0, 16637.0], [47.0, 7694.0], [46.0, 15752.0], [49.0, 13517.0], [48.0, 14981.0], [51.0, 13785.0], [50.0, 15460.0], [52.0, 6899.0], [53.0, 9715.0], [55.0, 16045.0], [54.0, 14444.0], [56.0, 5988.0], [57.0, 10298.0], [59.0, 9242.5], [58.0, 9095.0], [61.0, 10051.0], [60.0, 17598.0], [62.0, 10458.0], [63.0, 16079.0], [65.0, 6367.25], [67.0, 14874.0], [66.0, 14617.0], [64.0, 12416.0], [70.0, 10380.5], [71.0, 15050.0], [69.0, 15565.5], [75.0, 15312.0], [74.0, 13541.0], [73.0, 16026.0], [72.0, 16498.0], [77.0, 7068.75], [78.0, 9857.0], [79.0, 15652.0], [76.0, 12925.0], [82.0, 7375.75], [83.0, 15542.0], [81.0, 14420.0], [80.0, 16618.0], [86.0, 9712.0], [87.0, 10686.0], [85.0, 16105.0], [84.0, 16731.0], [91.0, 14709.0], [90.0, 14573.0], [89.0, 15438.0], [88.0, 15894.0], [93.0, 9868.5], [94.0, 10421.0], [95.0, 16579.0], [92.0, 14103.0], [99.0, 15712.0], [98.0, 14632.0], [97.0, 15185.0], [96.0, 14967.0], [103.0, 14573.0], [102.0, 15576.0], [101.0, 15234.0], [100.0, 15500.0], [107.0, 10921.5], [106.0, 15809.0], [105.0, 15670.0], [104.0, 14802.0], [110.0, 11135.5], [111.0, 14490.0], [109.0, 15651.0], [108.0, 14084.0], [115.0, 16269.0], [114.0, 15171.0], [113.0, 16241.0], [112.0, 15958.0], [116.0, 10867.0], [119.0, 11025.0], [118.0, 8752.75], [117.0, 9492.333333333334], [120.0, 8959.0], [122.0, 10778.5], [123.0, 14820.0], [121.0, 14575.0], [124.0, 10430.0], [126.0, 9600.666666666666], [127.0, 15429.0], [125.0, 13973.0], [133.0, 10642.0], [135.0, 14385.0], [134.0, 14475.0], [132.0, 14226.0], [131.0, 15263.0], [130.0, 14424.0], [129.0, 15530.0], [128.0, 14685.0], [136.0, 10668.0], [138.0, 10593.0], [142.0, 10996.5], [143.0, 13854.0], [141.0, 13534.0], [140.0, 13925.0], [139.0, 14118.0], [137.0, 14650.0], [146.0, 10466.5], [150.0, 10404.0], [151.0, 13472.0], [149.0, 13826.0], [148.0, 14188.0], [147.0, 13426.0], [145.0, 14837.0], [144.0, 13938.0], [153.0, 9590.666666666666], [155.0, 9224.25], [158.0, 9648.0], [157.0, 9500.666666666666], [159.0, 12564.0], [156.0, 12376.0], [154.0, 13016.0], [152.0, 13297.0], [163.0, 9019.571428571428], [164.0, 10234.5], [166.0, 10093.5], [165.0, 9319.75], [167.0, 11513.0], [162.0, 12223.0], [161.0, 11468.0], [160.0, 12577.0], [173.0, 10239.0], [175.0, 12121.0], [174.0, 11836.0], [172.0, 10476.0], [171.0, 11890.0], [170.0, 11292.0], [169.0, 11929.0], [168.0, 11877.0], [177.0, 10490.5], [176.0, 9299.25], [179.0, 10177.0], [182.0, 9838.25], [183.0, 10104.5], [181.0, 10270.0], [180.0, 10856.0], [178.0, 10785.0], [184.0, 10013.0], [189.0, 10067.333333333334], [191.0, 10011.5], [190.0, 9184.0], [187.0, 10260.0], [186.0, 9344.0], [185.0, 10275.0], [192.0, 9969.0], [1.0, 3193.2]], "isOverall": false, "label": "https://localhost:44313/Home/Statistics", "isController": false}, {"data": [[70.39767441860462, 7892.48604651163]], "isOverall": false, "label": "https://localhost:44313/Home/Statistics-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 192.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 90.0, "minX": 1.6532880495E12, "maxY": 466708.6666666667, "series": [{"data": [[1.653288063E12, 81477.33333333333], [1.65328806E12, 81477.33333333333], [1.6532880825E12, 108146.66666666667], [1.653288057E12, 61146.0], [1.653288099E12, 20331.333333333332], [1.6532880795E12, 53946.666666666664], [1.653288054E12, 54301.333333333336], [1.6532880765E12, 47406.0], [1.653288051E12, 20382.0], [1.653288096E12, 169039.33333333334], [1.6532880735E12, 74430.0], [1.6532880705E12, 54250.666666666664], [1.653288093E12, 114940.66666666667], [1.6532880675E12, 115498.0], [1.65328809E12, 60690.0], [1.6532880645E12, 115346.0], [1.653288087E12, 87815.33333333333], [1.653288084E12, 67788.0], [1.6532880615E12, 88372.66666666667], [1.653288081E12, 74328.66666666667], [1.653288078E12, 74379.33333333333], [1.6532880585E12, 61095.333333333336], [1.653288075E12, 54048.0], [1.6532880555E12, 33919.333333333336], [1.6532880975E12, 466708.6666666667], [1.6532880945E12, 142015.33333333334], [1.6532880525E12, 13588.0], [1.6532880915E12, 87916.66666666667], [1.653288072E12, 33868.666666666664], [1.6532880495E12, 27623.333333333332], [1.6532880885E12, 74328.66666666667], [1.653288069E12, 115295.33333333333], [1.6532880855E12, 74379.33333333333], [1.653288066E12, 122292.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.653288063E12, 1080.0], [1.65328806E12, 1080.0], [1.6532880825E12, 1440.0], [1.653288057E12, 810.0], [1.653288099E12, 270.0], [1.6532880795E12, 720.0], [1.653288054E12, 720.0], [1.6532880765E12, 630.0], [1.653288051E12, 270.0], [1.653288096E12, 2250.0], [1.6532880735E12, 990.0], [1.6532880705E12, 720.0], [1.653288093E12, 1530.0], [1.6532880675E12, 1530.0], [1.65328809E12, 810.0], [1.6532880645E12, 1530.0], [1.653288087E12, 1170.0], [1.653288084E12, 900.0], [1.6532880615E12, 1170.0], [1.653288081E12, 990.0], [1.653288078E12, 990.0], [1.6532880585E12, 810.0], [1.653288075E12, 720.0], [1.6532880555E12, 450.0], [1.6532880975E12, 6210.0], [1.6532880945E12, 1890.0], [1.6532880525E12, 180.0], [1.6532880915E12, 1170.0], [1.653288072E12, 450.0], [1.6532880495E12, 90.0], [1.6532880885E12, 990.0], [1.653288069E12, 1530.0], [1.6532880855E12, 990.0], [1.653288066E12, 1620.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1500, "maxX": 1.653288099E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 463.6666666666667, "minX": 1.6532880495E12, "maxY": 15381.666666666668, "series": [{"data": [[1.653288063E12, 562.9166666666667], [1.65328806E12, 612.3333333333334], [1.6532880825E12, 8573.4375], [1.653288057E12, 484.44444444444446], [1.653288099E12, 14366.0], [1.6532880795E12, 7049.375], [1.653288054E12, 472.875], [1.6532880765E12, 5113.571428571428], [1.653288051E12, 463.6666666666667], [1.653288096E12, 15189.639999999998], [1.6532880735E12, 3539.909090909091], [1.6532880705E12, 1669.3750000000002], [1.653288093E12, 14681.352941176468], [1.6532880675E12, 660.5882352941177], [1.65328809E12, 12953.111111111111], [1.6532880645E12, 759.1764705882352], [1.653288087E12, 11337.23076923077], [1.653288084E12, 9590.9], [1.6532880615E12, 503.92307692307685], [1.653288081E12, 8071.636363636362], [1.653288078E12, 6467.909090909091], [1.6532880585E12, 514.1111111111111], [1.653288075E12, 4278.25], [1.6532880555E12, 519.2], [1.6532880975E12, 14984.637681159416], [1.6532880945E12, 15381.666666666668], [1.6532880525E12, 471.0], [1.6532880915E12, 13980.923076923076], [1.653288072E12, 2575.2], [1.6532880495E12, 519.0], [1.6532880885E12, 12037.181818181816], [1.653288069E12, 887.7058823529412], [1.6532880855E12, 10196.181818181818], [1.653288066E12, 633.7222222222222]], "isOverall": false, "label": "https://localhost:44313/Home/Statistics", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1500, "maxX": 1.653288099E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 463.6666666666667, "minX": 1.6532880495E12, "maxY": 15381.142857142859, "series": [{"data": [[1.653288063E12, 562.6666666666666], [1.65328806E12, 612.3333333333334], [1.6532880825E12, 8573.0625], [1.653288057E12, 484.33333333333337], [1.653288099E12, 14366.0], [1.6532880795E12, 7049.25], [1.653288054E12, 472.75], [1.6532880765E12, 5113.428571428572], [1.653288051E12, 463.6666666666667], [1.653288096E12, 15189.48], [1.6532880735E12, 3539.454545454545], [1.6532880705E12, 1669.0], [1.653288093E12, 14681.29411764706], [1.6532880675E12, 660.4117647058823], [1.65328809E12, 12952.777777777777], [1.6532880645E12, 759.0000000000001], [1.653288087E12, 11337.076923076922], [1.653288084E12, 9590.300000000001], [1.6532880615E12, 503.6923076923076], [1.653288081E12, 8071.363636363636], [1.653288078E12, 6467.818181818182], [1.6532880585E12, 513.8888888888889], [1.653288075E12, 4278.0], [1.6532880555E12, 519.2], [1.6532880975E12, 14984.420289855072], [1.6532880945E12, 15381.142857142859], [1.6532880525E12, 470.5], [1.6532880915E12, 13980.923076923076], [1.653288072E12, 2575.0], [1.6532880495E12, 519.0], [1.6532880885E12, 12036.818181818182], [1.653288069E12, 887.6470588235294], [1.6532880855E12, 10195.90909090909], [1.653288066E12, 633.2777777777778]], "isOverall": false, "label": "https://localhost:44313/Home/Statistics", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1500, "maxX": 1.653288099E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 21.22222222222222, "minX": 1.6532880495E12, "maxY": 50.45454545454545, "series": [{"data": [[1.653288063E12, 25.25], [1.65328806E12, 24.0], [1.6532880825E12, 40.9375], [1.653288057E12, 21.22222222222222], [1.653288099E12, 45.333333333333336], [1.6532880795E12, 41.5], [1.653288054E12, 23.125], [1.6532880765E12, 36.57142857142858], [1.653288051E12, 23.666666666666668], [1.653288096E12, 43.48], [1.6532880735E12, 50.45454545454545], [1.6532880705E12, 41.25], [1.653288093E12, 44.11764705882353], [1.6532880675E12, 29.764705882352946], [1.65328809E12, 43.77777777777778], [1.6532880645E12, 26.352941176470583], [1.653288087E12, 42.30769230769231], [1.653288084E12, 36.4], [1.6532880615E12, 24.153846153846157], [1.653288081E12, 37.90909090909091], [1.653288078E12, 42.90909090909091], [1.6532880585E12, 23.11111111111111], [1.653288075E12, 35.25000000000001], [1.6532880555E12, 23.6], [1.6532880975E12, 44.43478260869566], [1.6532880945E12, 44.61904761904761], [1.6532880525E12, 24.5], [1.6532880915E12, 42.53846153846154], [1.653288072E12, 44.8], [1.6532880495E12, 22.0], [1.6532880885E12, 44.45454545454545], [1.653288069E12, 41.05882352941176], [1.6532880855E12, 34.81818181818181], [1.653288066E12, 31.388888888888886]], "isOverall": false, "label": "https://localhost:44313/Home/Statistics", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1500, "maxX": 1.653288099E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 377.0, "minX": 1.6532880495E12, "maxY": 17598.0, "series": [{"data": [[1.653288063E12, 749.0], [1.65328806E12, 958.0], [1.6532880825E12, 9418.0], [1.653288057E12, 547.0], [1.653288099E12, 14716.0], [1.6532880795E12, 7448.0], [1.653288054E12, 748.0], [1.6532880765E12, 5493.0], [1.653288051E12, 481.0], [1.653288096E12, 16731.0], [1.6532880735E12, 4091.0], [1.6532880705E12, 2423.0], [1.653288093E12, 15530.0], [1.6532880675E12, 980.0], [1.65328809E12, 13826.0], [1.6532880645E12, 1308.0], [1.653288087E12, 12121.0], [1.653288084E12, 10557.0], [1.6532880615E12, 532.0], [1.653288081E12, 8227.0], [1.653288078E12, 7020.0], [1.6532880585E12, 558.0], [1.653288075E12, 4815.0], [1.6532880555E12, 568.0], [1.6532880975E12, 17598.0], [1.6532880945E12, 16269.0], [1.6532880525E12, 507.0], [1.6532880915E12, 14837.0], [1.653288072E12, 2813.0], [1.6532880495E12, 519.0], [1.6532880885E12, 12627.0], [1.653288069E12, 1611.0], [1.6532880855E12, 11145.0], [1.653288066E12, 1027.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.653288063E12, 697.7000000000002], [1.65328806E12, 934.3000000000001], [1.6532880825E12, 9164.6], [1.653288057E12, 547.0], [1.653288099E12, 14716.0], [1.6532880795E12, 7448.0], [1.653288054E12, 748.0], [1.6532880765E12, 5493.0], [1.653288051E12, 481.0], [1.653288096E12, 16594.6], [1.6532880735E12, 4048.0], [1.6532880705E12, 2423.0], [1.653288093E12, 15449.2], [1.6532880675E12, 969.6], [1.65328809E12, 13826.0], [1.6532880645E12, 1304.0], [1.653288087E12, 12044.2], [1.653288084E12, 10499.9], [1.6532880615E12, 531.6], [1.653288081E12, 8226.4], [1.653288078E12, 6987.0], [1.6532880585E12, 558.0], [1.653288075E12, 4815.0], [1.6532880555E12, 568.0], [1.6532880975E12, 16637.0], [1.6532880945E12, 16213.2], [1.6532880525E12, 507.0], [1.6532880915E12, 14762.2], [1.653288072E12, 2813.0], [1.6532880495E12, 519.0], [1.6532880885E12, 12617.0], [1.653288069E12, 1490.1999999999998], [1.6532880855E12, 11070.2], [1.653288066E12, 995.5]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.653288063E12, 749.0], [1.65328806E12, 958.0], [1.6532880825E12, 9418.0], [1.653288057E12, 547.0], [1.653288099E12, 14716.0], [1.6532880795E12, 7448.0], [1.653288054E12, 748.0], [1.6532880765E12, 5493.0], [1.653288051E12, 481.0], [1.653288096E12, 16731.0], [1.6532880735E12, 4091.0], [1.6532880705E12, 2423.0], [1.653288093E12, 15530.0], [1.6532880675E12, 980.0], [1.65328809E12, 13826.0], [1.6532880645E12, 1308.0], [1.653288087E12, 12121.0], [1.653288084E12, 10557.0], [1.6532880615E12, 532.0], [1.653288081E12, 8227.0], [1.653288078E12, 7020.0], [1.6532880585E12, 558.0], [1.653288075E12, 4815.0], [1.6532880555E12, 568.0], [1.6532880975E12, 17598.0], [1.6532880945E12, 16269.0], [1.6532880525E12, 507.0], [1.6532880915E12, 14837.0], [1.653288072E12, 2813.0], [1.6532880495E12, 519.0], [1.6532880885E12, 12627.0], [1.653288069E12, 1611.0], [1.6532880855E12, 11145.0], [1.653288066E12, 1027.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.653288063E12, 749.0], [1.65328806E12, 958.0], [1.6532880825E12, 9418.0], [1.653288057E12, 547.0], [1.653288099E12, 14716.0], [1.6532880795E12, 7448.0], [1.653288054E12, 748.0], [1.6532880765E12, 5493.0], [1.653288051E12, 481.0], [1.653288096E12, 16697.1], [1.6532880735E12, 4091.0], [1.6532880705E12, 2423.0], [1.653288093E12, 15530.0], [1.6532880675E12, 980.0], [1.65328809E12, 13826.0], [1.6532880645E12, 1308.0], [1.653288087E12, 12121.0], [1.653288084E12, 10557.0], [1.6532880615E12, 532.0], [1.653288081E12, 8227.0], [1.653288078E12, 7020.0], [1.6532880585E12, 558.0], [1.653288075E12, 4815.0], [1.6532880555E12, 568.0], [1.6532880975E12, 16976.0], [1.6532880945E12, 16266.2], [1.6532880525E12, 507.0], [1.6532880915E12, 14837.0], [1.653288072E12, 2813.0], [1.6532880495E12, 519.0], [1.6532880885E12, 12627.0], [1.653288069E12, 1611.0], [1.6532880855E12, 11145.0], [1.653288066E12, 1027.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.653288063E12, 518.0], [1.65328806E12, 471.0], [1.6532880825E12, 7703.0], [1.653288057E12, 377.0], [1.653288099E12, 14140.0], [1.6532880795E12, 6527.0], [1.653288054E12, 381.0], [1.6532880765E12, 4729.0], [1.653288051E12, 434.0], [1.653288096E12, 12925.0], [1.6532880735E12, 2956.0], [1.6532880705E12, 1021.0], [1.653288093E12, 13973.0], [1.6532880675E12, 438.0], [1.65328809E12, 12297.0], [1.6532880645E12, 494.0], [1.653288087E12, 10270.0], [1.653288084E12, 9210.0], [1.6532880615E12, 471.0], [1.653288081E12, 7828.0], [1.653288078E12, 5816.0], [1.6532880585E12, 476.0], [1.653288075E12, 3820.0], [1.6532880555E12, 384.0], [1.6532880975E12, 12416.0], [1.6532880945E12, 14084.0], [1.6532880525E12, 435.0], [1.6532880915E12, 12984.0], [1.653288072E12, 2236.0], [1.6532880495E12, 519.0], [1.6532880885E12, 11418.0], [1.653288069E12, 526.0], [1.6532880855E12, 9184.0], [1.653288066E12, 467.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.653288063E12, 547.0], [1.65328806E12, 550.5], [1.6532880825E12, 8524.0], [1.653288057E12, 503.0], [1.653288099E12, 14242.0], [1.6532880795E12, 7128.5], [1.653288054E12, 423.5], [1.6532880765E12, 5158.0], [1.653288051E12, 476.0], [1.653288096E12, 15312.0], [1.6532880735E12, 3489.0], [1.6532880705E12, 1731.5], [1.653288093E12, 14575.0], [1.6532880675E12, 631.0], [1.65328809E12, 12980.0], [1.6532880645E12, 574.0], [1.653288087E12, 11348.0], [1.653288084E12, 9459.5], [1.6532880615E12, 496.0], [1.653288081E12, 8126.0], [1.653288078E12, 6469.0], [1.6532880585E12, 518.0], [1.653288075E12, 4221.0], [1.6532880555E12, 540.0], [1.6532880975E12, 14903.0], [1.6532880945E12, 15500.0], [1.6532880525E12, 471.0], [1.6532880915E12, 13938.0], [1.653288072E12, 2529.0], [1.6532880495E12, 519.0], [1.6532880885E12, 12204.0], [1.653288069E12, 778.0], [1.6532880855E12, 10275.0], [1.653288066E12, 565.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1500, "maxX": 1.653288099E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 477.0, "minX": 1.0, "maxY": 15311.5, "series": [{"data": [[2.0, 478.5], [8.0, 4023.5], [9.0, 749.0], [10.0, 11711.0], [11.0, 686.0], [12.0, 727.5], [3.0, 6169.0], [48.0, 14862.0], [14.0, 15281.5], [1.0, 477.0], [4.0, 2804.0], [18.0, 15311.5], [5.0, 547.0], [6.0, 10272.5], [7.0, 4719.5], [28.0, 15218.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 48.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 477.0, "minX": 1.0, "maxY": 15311.5, "series": [{"data": [[2.0, 478.5], [8.0, 4023.5], [9.0, 749.0], [10.0, 11711.0], [11.0, 686.0], [12.0, 727.5], [3.0, 6169.0], [48.0, 14862.0], [14.0, 15281.5], [1.0, 477.0], [4.0, 2804.0], [18.0, 15311.5], [5.0, 547.0], [6.0, 10272.0], [7.0, 4719.5], [28.0, 15218.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 48.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 1.3333333333333333, "minX": 1.6532880495E12, "maxY": 20.666666666666668, "series": [{"data": [[1.653288084E12, 17.333333333333332], [1.6532880615E12, 8.666666666666666], [1.653288063E12, 10.0], [1.65328806E12, 8.0], [1.653288081E12, 20.0], [1.6532880825E12, 20.666666666666668], [1.653288057E12, 6.0], [1.653288078E12, 20.0], [1.6532880585E12, 7.333333333333333], [1.6532880795E12, 20.0], [1.653288054E12, 4.0], [1.653288075E12, 18.0], [1.6532880555E12, 4.666666666666667], [1.6532880765E12, 18.666666666666668], [1.653288051E12, 2.0], [1.6532880525E12, 2.6666666666666665], [1.6532880735E12, 16.666666666666668], [1.6532880705E12, 14.666666666666666], [1.653288072E12, 16.0], [1.6532880495E12, 1.3333333333333333], [1.6532880675E12, 13.333333333333334], [1.653288069E12, 14.0], [1.6532880645E12, 10.666666666666666], [1.653288066E12, 12.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1500, "maxX": 1.653288084E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.6666666666666666, "minX": 1.6532880495E12, "maxY": 46.0, "series": [{"data": [[1.653288063E12, 8.0], [1.65328806E12, 8.0], [1.6532880825E12, 10.666666666666666], [1.653288057E12, 6.0], [1.653288099E12, 2.0], [1.6532880795E12, 5.333333333333333], [1.653288054E12, 5.333333333333333], [1.6532880765E12, 4.666666666666667], [1.653288051E12, 2.0], [1.653288096E12, 16.666666666666668], [1.6532880735E12, 7.333333333333333], [1.6532880705E12, 5.333333333333333], [1.653288093E12, 11.333333333333334], [1.6532880675E12, 11.333333333333334], [1.65328809E12, 6.0], [1.6532880645E12, 11.333333333333334], [1.653288087E12, 8.666666666666666], [1.653288084E12, 6.666666666666667], [1.6532880615E12, 8.666666666666666], [1.653288081E12, 7.333333333333333], [1.653288078E12, 7.333333333333333], [1.6532880585E12, 6.0], [1.653288075E12, 5.333333333333333], [1.6532880555E12, 3.3333333333333335], [1.6532880975E12, 46.0], [1.6532880945E12, 14.0], [1.6532880525E12, 1.3333333333333333], [1.6532880915E12, 8.666666666666666], [1.653288072E12, 3.3333333333333335], [1.6532880495E12, 0.6666666666666666], [1.6532880885E12, 7.333333333333333], [1.653288069E12, 11.333333333333334], [1.6532880855E12, 7.333333333333333], [1.653288066E12, 12.0]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1500, "maxX": 1.653288099E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.6666666666666666, "minX": 1.6532880495E12, "maxY": 46.0, "series": [{"data": [[1.653288063E12, 8.0], [1.65328806E12, 8.0], [1.6532880825E12, 10.666666666666666], [1.653288057E12, 6.0], [1.653288099E12, 2.0], [1.6532880795E12, 5.333333333333333], [1.653288054E12, 5.333333333333333], [1.6532880765E12, 4.666666666666667], [1.653288051E12, 2.0], [1.653288096E12, 16.666666666666668], [1.6532880735E12, 7.333333333333333], [1.6532880705E12, 5.333333333333333], [1.653288093E12, 11.333333333333334], [1.6532880675E12, 11.333333333333334], [1.65328809E12, 6.0], [1.6532880645E12, 11.333333333333334], [1.653288087E12, 8.666666666666666], [1.653288084E12, 6.666666666666667], [1.6532880615E12, 8.666666666666666], [1.653288081E12, 7.333333333333333], [1.653288078E12, 7.333333333333333], [1.6532880585E12, 6.0], [1.653288075E12, 5.333333333333333], [1.6532880555E12, 3.3333333333333335], [1.6532880975E12, 46.0], [1.6532880945E12, 14.0], [1.6532880525E12, 1.3333333333333333], [1.6532880915E12, 8.666666666666666], [1.653288072E12, 3.3333333333333335], [1.6532880495E12, 0.6666666666666666], [1.6532880885E12, 7.333333333333333], [1.653288069E12, 11.333333333333334], [1.6532880855E12, 7.333333333333333], [1.653288066E12, 12.0]], "isOverall": false, "label": "https://localhost:44313/Home/Statistics-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1500, "maxX": 1.653288099E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.6666666666666666, "minX": 1.6532880495E12, "maxY": 46.0, "series": [{"data": [[1.653288063E12, 8.0], [1.65328806E12, 8.0], [1.6532880825E12, 10.666666666666666], [1.653288057E12, 6.0], [1.653288099E12, 2.0], [1.6532880795E12, 5.333333333333333], [1.653288054E12, 5.333333333333333], [1.6532880765E12, 4.666666666666667], [1.653288051E12, 2.0], [1.653288096E12, 16.666666666666668], [1.6532880735E12, 7.333333333333333], [1.6532880705E12, 5.333333333333333], [1.653288093E12, 11.333333333333334], [1.6532880675E12, 11.333333333333334], [1.65328809E12, 6.0], [1.6532880645E12, 11.333333333333334], [1.653288087E12, 8.666666666666666], [1.653288084E12, 6.666666666666667], [1.6532880615E12, 8.666666666666666], [1.653288081E12, 7.333333333333333], [1.653288078E12, 7.333333333333333], [1.6532880585E12, 6.0], [1.653288075E12, 5.333333333333333], [1.6532880555E12, 3.3333333333333335], [1.6532880975E12, 46.0], [1.6532880945E12, 14.0], [1.6532880525E12, 1.3333333333333333], [1.6532880915E12, 8.666666666666666], [1.653288072E12, 3.3333333333333335], [1.6532880495E12, 0.6666666666666666], [1.6532880885E12, 7.333333333333333], [1.653288069E12, 11.333333333333334], [1.6532880855E12, 7.333333333333333], [1.653288066E12, 12.0]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1500, "maxX": 1.653288099E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

