/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 103.0, "minX": 0.0, "maxY": 10239.0, "series": [{"data": [[0.0, 103.0], [0.1, 103.0], [0.2, 103.0], [0.3, 105.0], [0.4, 105.0], [0.5, 105.0], [0.6, 106.0], [0.7, 106.0], [0.8, 106.0], [0.9, 106.0], [1.0, 107.0], [1.1, 107.0], [1.2, 108.0], [1.3, 108.0], [1.4, 108.0], [1.5, 108.0], [1.6, 108.0], [1.7, 108.0], [1.8, 108.0], [1.9, 109.0], [2.0, 109.0], [2.1, 109.0], [2.2, 109.0], [2.3, 109.0], [2.4, 110.0], [2.5, 110.0], [2.6, 110.0], [2.7, 111.0], [2.8, 111.0], [2.9, 112.0], [3.0, 112.0], [3.1, 112.0], [3.2, 112.0], [3.3, 113.0], [3.4, 113.0], [3.5, 113.0], [3.6, 113.0], [3.7, 113.0], [3.8, 113.0], [3.9, 113.0], [4.0, 114.0], [4.1, 114.0], [4.2, 114.0], [4.3, 115.0], [4.4, 115.0], [4.5, 115.0], [4.6, 115.0], [4.7, 115.0], [4.8, 115.0], [4.9, 116.0], [5.0, 116.0], [5.1, 116.0], [5.2, 116.0], [5.3, 117.0], [5.4, 117.0], [5.5, 117.0], [5.6, 117.0], [5.7, 118.0], [5.8, 118.0], [5.9, 118.0], [6.0, 118.0], [6.1, 119.0], [6.2, 119.0], [6.3, 119.0], [6.4, 119.0], [6.5, 119.0], [6.6, 119.0], [6.7, 120.0], [6.8, 120.0], [6.9, 120.0], [7.0, 120.0], [7.1, 120.0], [7.2, 120.0], [7.3, 120.0], [7.4, 121.0], [7.5, 122.0], [7.6, 122.0], [7.7, 122.0], [7.8, 123.0], [7.9, 123.0], [8.0, 124.0], [8.1, 124.0], [8.2, 124.0], [8.3, 124.0], [8.4, 124.0], [8.5, 125.0], [8.6, 126.0], [8.7, 126.0], [8.8, 126.0], [8.9, 127.0], [9.0, 127.0], [9.1, 127.0], [9.2, 127.0], [9.3, 128.0], [9.4, 129.0], [9.5, 129.0], [9.6, 129.0], [9.7, 130.0], [9.8, 130.0], [9.9, 130.0], [10.0, 131.0], [10.1, 131.0], [10.2, 131.0], [10.3, 131.0], [10.4, 134.0], [10.5, 134.0], [10.6, 134.0], [10.7, 135.0], [10.8, 135.0], [10.9, 135.0], [11.0, 135.0], [11.1, 136.0], [11.2, 137.0], [11.3, 137.0], [11.4, 137.0], [11.5, 137.0], [11.6, 137.0], [11.7, 137.0], [11.8, 138.0], [11.9, 138.0], [12.0, 139.0], [12.1, 140.0], [12.2, 140.0], [12.3, 141.0], [12.4, 141.0], [12.5, 141.0], [12.6, 141.0], [12.7, 141.0], [12.8, 141.0], [12.9, 143.0], [13.0, 144.0], [13.1, 144.0], [13.2, 144.0], [13.3, 145.0], [13.4, 146.0], [13.5, 147.0], [13.6, 148.0], [13.7, 149.0], [13.8, 150.0], [13.9, 151.0], [14.0, 151.0], [14.1, 152.0], [14.2, 152.0], [14.3, 152.0], [14.4, 154.0], [14.5, 154.0], [14.6, 154.0], [14.7, 155.0], [14.8, 156.0], [14.9, 156.0], [15.0, 157.0], [15.1, 157.0], [15.2, 158.0], [15.3, 158.0], [15.4, 159.0], [15.5, 159.0], [15.6, 159.0], [15.7, 160.0], [15.8, 160.0], [15.9, 160.0], [16.0, 160.0], [16.1, 161.0], [16.2, 161.0], [16.3, 161.0], [16.4, 161.0], [16.5, 162.0], [16.6, 162.0], [16.7, 162.0], [16.8, 163.0], [16.9, 163.0], [17.0, 164.0], [17.1, 164.0], [17.2, 164.0], [17.3, 164.0], [17.4, 164.0], [17.5, 164.0], [17.6, 165.0], [17.7, 165.0], [17.8, 165.0], [17.9, 165.0], [18.0, 166.0], [18.1, 166.0], [18.2, 167.0], [18.3, 167.0], [18.4, 168.0], [18.5, 168.0], [18.6, 168.0], [18.7, 170.0], [18.8, 170.0], [18.9, 170.0], [19.0, 170.0], [19.1, 171.0], [19.2, 171.0], [19.3, 172.0], [19.4, 173.0], [19.5, 173.0], [19.6, 173.0], [19.7, 174.0], [19.8, 175.0], [19.9, 175.0], [20.0, 175.0], [20.1, 177.0], [20.2, 178.0], [20.3, 178.0], [20.4, 178.0], [20.5, 179.0], [20.6, 179.0], [20.7, 181.0], [20.8, 182.0], [20.9, 184.0], [21.0, 186.0], [21.1, 187.0], [21.2, 187.0], [21.3, 187.0], [21.4, 202.0], [21.5, 207.0], [21.6, 208.0], [21.7, 211.0], [21.8, 213.0], [21.9, 213.0], [22.0, 213.0], [22.1, 214.0], [22.2, 214.0], [22.3, 215.0], [22.4, 215.0], [22.5, 216.0], [22.6, 216.0], [22.7, 217.0], [22.8, 218.0], [22.9, 219.0], [23.0, 220.0], [23.1, 220.0], [23.2, 220.0], [23.3, 221.0], [23.4, 222.0], [23.5, 222.0], [23.6, 223.0], [23.7, 223.0], [23.8, 223.0], [23.9, 224.0], [24.0, 224.0], [24.1, 225.0], [24.2, 228.0], [24.3, 228.0], [24.4, 229.0], [24.5, 229.0], [24.6, 229.0], [24.7, 230.0], [24.8, 231.0], [24.9, 232.0], [25.0, 232.0], [25.1, 232.0], [25.2, 233.0], [25.3, 234.0], [25.4, 235.0], [25.5, 236.0], [25.6, 238.0], [25.7, 242.0], [25.8, 242.0], [25.9, 243.0], [26.0, 245.0], [26.1, 245.0], [26.2, 248.0], [26.3, 249.0], [26.4, 250.0], [26.5, 251.0], [26.6, 251.0], [26.7, 255.0], [26.8, 255.0], [26.9, 257.0], [27.0, 260.0], [27.1, 262.0], [27.2, 263.0], [27.3, 265.0], [27.4, 265.0], [27.5, 265.0], [27.6, 269.0], [27.7, 275.0], [27.8, 275.0], [27.9, 276.0], [28.0, 277.0], [28.1, 279.0], [28.2, 279.0], [28.3, 283.0], [28.4, 286.0], [28.5, 287.0], [28.6, 288.0], [28.7, 290.0], [28.8, 290.0], [28.9, 296.0], [29.0, 297.0], [29.1, 297.0], [29.2, 299.0], [29.3, 302.0], [29.4, 307.0], [29.5, 312.0], [29.6, 314.0], [29.7, 319.0], [29.8, 322.0], [29.9, 322.0], [30.0, 326.0], [30.1, 327.0], [30.2, 327.0], [30.3, 332.0], [30.4, 337.0], [30.5, 340.0], [30.6, 361.0], [30.7, 370.0], [30.8, 389.0], [30.9, 399.0], [31.0, 407.0], [31.1, 415.0], [31.2, 415.0], [31.3, 430.0], [31.4, 442.0], [31.5, 445.0], [31.6, 455.0], [31.7, 457.0], [31.8, 458.0], [31.9, 458.0], [32.0, 461.0], [32.1, 469.0], [32.2, 485.0], [32.3, 494.0], [32.4, 496.0], [32.5, 518.0], [32.6, 518.0], [32.7, 521.0], [32.8, 521.0], [32.9, 521.0], [33.0, 529.0], [33.1, 544.0], [33.2, 546.0], [33.3, 547.0], [33.4, 556.0], [33.5, 557.0], [33.6, 561.0], [33.7, 562.0], [33.8, 566.0], [33.9, 575.0], [34.0, 580.0], [34.1, 590.0], [34.2, 593.0], [34.3, 610.0], [34.4, 617.0], [34.5, 626.0], [34.6, 627.0], [34.7, 632.0], [34.8, 642.0], [34.9, 652.0], [35.0, 660.0], [35.1, 662.0], [35.2, 687.0], [35.3, 689.0], [35.4, 692.0], [35.5, 693.0], [35.6, 708.0], [35.7, 713.0], [35.8, 716.0], [35.9, 722.0], [36.0, 724.0], [36.1, 729.0], [36.2, 732.0], [36.3, 734.0], [36.4, 739.0], [36.5, 741.0], [36.6, 749.0], [36.7, 752.0], [36.8, 759.0], [36.9, 763.0], [37.0, 764.0], [37.1, 772.0], [37.2, 775.0], [37.3, 775.0], [37.4, 793.0], [37.5, 795.0], [37.6, 816.0], [37.7, 824.0], [37.8, 824.0], [37.9, 834.0], [38.0, 849.0], [38.1, 849.0], [38.2, 851.0], [38.3, 861.0], [38.4, 864.0], [38.5, 882.0], [38.6, 885.0], [38.7, 906.0], [38.8, 909.0], [38.9, 933.0], [39.0, 948.0], [39.1, 960.0], [39.2, 969.0], [39.3, 979.0], [39.4, 982.0], [39.5, 990.0], [39.6, 991.0], [39.7, 1000.0], [39.8, 1013.0], [39.9, 1032.0], [40.0, 1040.0], [40.1, 1053.0], [40.2, 1062.0], [40.3, 1068.0], [40.4, 1115.0], [40.5, 1116.0], [40.6, 1122.0], [40.7, 1123.0], [40.8, 1129.0], [40.9, 1147.0], [41.0, 1159.0], [41.1, 1176.0], [41.2, 1176.0], [41.3, 1178.0], [41.4, 1194.0], [41.5, 1194.0], [41.6, 1199.0], [41.7, 1201.0], [41.8, 1210.0], [41.9, 1238.0], [42.0, 1242.0], [42.1, 1269.0], [42.2, 1272.0], [42.3, 1273.0], [42.4, 1288.0], [42.5, 1288.0], [42.6, 1298.0], [42.7, 1309.0], [42.8, 1312.0], [42.9, 1317.0], [43.0, 1346.0], [43.1, 1379.0], [43.2, 1406.0], [43.3, 1406.0], [43.4, 1407.0], [43.5, 1408.0], [43.6, 1411.0], [43.7, 1413.0], [43.8, 1415.0], [43.9, 1417.0], [44.0, 1422.0], [44.1, 1445.0], [44.2, 1450.0], [44.3, 1452.0], [44.4, 1482.0], [44.5, 1491.0], [44.6, 1506.0], [44.7, 1523.0], [44.8, 1531.0], [44.9, 1532.0], [45.0, 1535.0], [45.1, 1557.0], [45.2, 1558.0], [45.3, 1559.0], [45.4, 1565.0], [45.5, 1571.0], [45.6, 1574.0], [45.7, 1593.0], [45.8, 1596.0], [45.9, 1599.0], [46.0, 1629.0], [46.1, 1634.0], [46.2, 1649.0], [46.3, 1653.0], [46.4, 1662.0], [46.5, 1671.0], [46.6, 1712.0], [46.7, 1741.0], [46.8, 1752.0], [46.9, 1755.0], [47.0, 1762.0], [47.1, 1768.0], [47.2, 1770.0], [47.3, 1770.0], [47.4, 1772.0], [47.5, 1783.0], [47.6, 1817.0], [47.7, 1822.0], [47.8, 1858.0], [47.9, 1860.0], [48.0, 1863.0], [48.1, 1884.0], [48.2, 1912.0], [48.3, 1916.0], [48.4, 1916.0], [48.5, 1918.0], [48.6, 1919.0], [48.7, 1965.0], [48.8, 1966.0], [48.9, 1968.0], [49.0, 2000.0], [49.1, 2007.0], [49.2, 2009.0], [49.3, 2010.0], [49.4, 2055.0], [49.5, 2058.0], [49.6, 2059.0], [49.7, 2068.0], [49.8, 2077.0], [49.9, 2078.0], [50.0, 2079.0], [50.1, 2082.0], [50.2, 2113.0], [50.3, 2147.0], [50.4, 2180.0], [50.5, 2187.0], [50.6, 2189.0], [50.7, 2210.0], [50.8, 2214.0], [50.9, 2216.0], [51.0, 2231.0], [51.1, 2234.0], [51.2, 2246.0], [51.3, 2247.0], [51.4, 2259.0], [51.5, 2262.0], [51.6, 2263.0], [51.7, 2269.0], [51.8, 2277.0], [51.9, 2277.0], [52.0, 2280.0], [52.1, 2318.0], [52.2, 2321.0], [52.3, 2328.0], [52.4, 2330.0], [52.5, 2344.0], [52.6, 2345.0], [52.7, 2348.0], [52.8, 2362.0], [52.9, 2382.0], [53.0, 2383.0], [53.1, 2413.0], [53.2, 2429.0], [53.3, 2458.0], [53.4, 2485.0], [53.5, 2513.0], [53.6, 2560.0], [53.7, 2563.0], [53.8, 2587.0], [53.9, 2592.0], [54.0, 2633.0], [54.1, 2638.0], [54.2, 2671.0], [54.3, 2681.0], [54.4, 2778.0], [54.5, 2805.0], [54.6, 2846.0], [54.7, 2902.0], [54.8, 2939.0], [54.9, 3029.0], [55.0, 3072.0], [55.1, 3091.0], [55.2, 3111.0], [55.3, 3139.0], [55.4, 3159.0], [55.5, 3228.0], [55.6, 3239.0], [55.7, 3267.0], [55.8, 3272.0], [55.9, 3313.0], [56.0, 3365.0], [56.1, 3492.0], [56.2, 3501.0], [56.3, 3553.0], [56.4, 3579.0], [56.5, 3630.0], [56.6, 3671.0], [56.7, 3683.0], [56.8, 3844.0], [56.9, 3887.0], [57.0, 3961.0], [57.1, 3987.0], [57.2, 4024.0], [57.3, 4073.0], [57.4, 4085.0], [57.5, 4090.0], [57.6, 4097.0], [57.7, 4112.0], [57.8, 4116.0], [57.9, 4143.0], [58.0, 4143.0], [58.1, 4156.0], [58.2, 4159.0], [58.3, 4159.0], [58.4, 4190.0], [58.5, 4192.0], [58.6, 4214.0], [58.7, 4226.0], [58.8, 4243.0], [58.9, 4256.0], [59.0, 4257.0], [59.1, 4257.0], [59.2, 4274.0], [59.3, 4280.0], [59.4, 4332.0], [59.5, 4333.0], [59.6, 4373.0], [59.7, 4384.0], [59.8, 4402.0], [59.9, 4406.0], [60.0, 4425.0], [60.1, 4488.0], [60.2, 4491.0], [60.3, 4537.0], [60.4, 4537.0], [60.5, 4544.0], [60.6, 4547.0], [60.7, 4549.0], [60.8, 4551.0], [60.9, 4551.0], [61.0, 4559.0], [61.1, 4561.0], [61.2, 4572.0], [61.3, 4595.0], [61.4, 4602.0], [61.5, 4621.0], [61.6, 4627.0], [61.7, 4636.0], [61.8, 4735.0], [61.9, 4759.0], [62.0, 4803.0], [62.1, 4815.0], [62.2, 4831.0], [62.3, 4839.0], [62.4, 4842.0], [62.5, 4875.0], [62.6, 4886.0], [62.7, 4909.0], [62.8, 4917.0], [62.9, 4925.0], [63.0, 4953.0], [63.1, 4975.0], [63.2, 4977.0], [63.3, 4979.0], [63.4, 4993.0], [63.5, 4995.0], [63.6, 5003.0], [63.7, 5026.0], [63.8, 5036.0], [63.9, 5037.0], [64.0, 5049.0], [64.1, 5103.0], [64.2, 5109.0], [64.3, 5112.0], [64.4, 5113.0], [64.5, 5114.0], [64.6, 5117.0], [64.7, 5128.0], [64.8, 5136.0], [64.9, 5157.0], [65.0, 5161.0], [65.1, 5165.0], [65.2, 5173.0], [65.3, 5182.0], [65.4, 5198.0], [65.5, 5215.0], [65.6, 5216.0], [65.7, 5221.0], [65.8, 5226.0], [65.9, 5246.0], [66.0, 5247.0], [66.1, 5255.0], [66.2, 5271.0], [66.3, 5304.0], [66.4, 5307.0], [66.5, 5314.0], [66.6, 5315.0], [66.7, 5323.0], [66.8, 5334.0], [66.9, 5345.0], [67.0, 5354.0], [67.1, 5361.0], [67.2, 5368.0], [67.3, 5369.0], [67.4, 5371.0], [67.5, 5384.0], [67.6, 5387.0], [67.7, 5392.0], [67.8, 5399.0], [67.9, 5405.0], [68.0, 5421.0], [68.1, 5432.0], [68.2, 5438.0], [68.3, 5440.0], [68.4, 5443.0], [68.5, 5446.0], [68.6, 5453.0], [68.7, 5485.0], [68.8, 5521.0], [68.9, 5571.0], [69.0, 5582.0], [69.1, 5597.0], [69.2, 5631.0], [69.3, 5636.0], [69.4, 5651.0], [69.5, 5657.0], [69.6, 5674.0], [69.7, 5712.0], [69.8, 5718.0], [69.9, 5723.0], [70.0, 5731.0], [70.1, 5746.0], [70.2, 5770.0], [70.3, 5804.0], [70.4, 5813.0], [70.5, 5817.0], [70.6, 5819.0], [70.7, 5887.0], [70.8, 5904.0], [70.9, 5938.0], [71.0, 5963.0], [71.1, 5974.0], [71.2, 6020.0], [71.3, 6067.0], [71.4, 6075.0], [71.5, 6077.0], [71.6, 6085.0], [71.7, 6092.0], [71.8, 6131.0], [71.9, 6166.0], [72.0, 6247.0], [72.1, 6247.0], [72.2, 6252.0], [72.3, 6274.0], [72.4, 6283.0], [72.5, 6298.0], [72.6, 6334.0], [72.7, 6343.0], [72.8, 6356.0], [72.9, 6376.0], [73.0, 6403.0], [73.1, 6439.0], [73.2, 6522.0], [73.3, 6531.0], [73.4, 6568.0], [73.5, 6574.0], [73.6, 6580.0], [73.7, 6595.0], [73.8, 6615.0], [73.9, 6625.0], [74.0, 6645.0], [74.1, 6665.0], [74.2, 6673.0], [74.3, 6719.0], [74.4, 6721.0], [74.5, 6723.0], [74.6, 6750.0], [74.7, 6769.0], [74.8, 6803.0], [74.9, 6819.0], [75.0, 6824.0], [75.1, 6830.0], [75.2, 6837.0], [75.3, 6881.0], [75.4, 6899.0], [75.5, 6906.0], [75.6, 6920.0], [75.7, 6932.0], [75.8, 6933.0], [75.9, 6950.0], [76.0, 6981.0], [76.1, 6983.0], [76.2, 7005.0], [76.3, 7020.0], [76.4, 7036.0], [76.5, 7053.0], [76.6, 7061.0], [76.7, 7067.0], [76.8, 7074.0], [76.9, 7138.0], [77.0, 7144.0], [77.1, 7177.0], [77.2, 7182.0], [77.3, 7182.0], [77.4, 7270.0], [77.5, 7277.0], [77.6, 7291.0], [77.7, 7292.0], [77.8, 7303.0], [77.9, 7321.0], [78.0, 7341.0], [78.1, 7371.0], [78.2, 7373.0], [78.3, 7391.0], [78.4, 7400.0], [78.5, 7425.0], [78.6, 7442.0], [78.7, 7443.0], [78.8, 7448.0], [78.9, 7455.0], [79.0, 7480.0], [79.1, 7486.0], [79.2, 7490.0], [79.3, 7491.0], [79.4, 7493.0], [79.5, 7494.0], [79.6, 7503.0], [79.7, 7507.0], [79.8, 7511.0], [79.9, 7519.0], [80.0, 7530.0], [80.1, 7547.0], [80.2, 7550.0], [80.3, 7552.0], [80.4, 7556.0], [80.5, 7561.0], [80.6, 7564.0], [80.7, 7578.0], [80.8, 7578.0], [80.9, 7600.0], [81.0, 7601.0], [81.1, 7609.0], [81.2, 7610.0], [81.3, 7627.0], [81.4, 7636.0], [81.5, 7644.0], [81.6, 7647.0], [81.7, 7660.0], [81.8, 7680.0], [81.9, 7680.0], [82.0, 7681.0], [82.1, 7690.0], [82.2, 7730.0], [82.3, 7747.0], [82.4, 7757.0], [82.5, 7763.0], [82.6, 7774.0], [82.7, 7793.0], [82.8, 7804.0], [82.9, 7811.0], [83.0, 7817.0], [83.1, 7821.0], [83.2, 7824.0], [83.3, 7827.0], [83.4, 7828.0], [83.5, 7832.0], [83.6, 7856.0], [83.7, 7875.0], [83.8, 7876.0], [83.9, 7887.0], [84.0, 7893.0], [84.1, 7909.0], [84.2, 7930.0], [84.3, 7944.0], [84.4, 7945.0], [84.5, 7950.0], [84.6, 7961.0], [84.7, 7987.0], [84.8, 8010.0], [84.9, 8015.0], [85.0, 8031.0], [85.1, 8047.0], [85.2, 8047.0], [85.3, 8049.0], [85.4, 8060.0], [85.5, 8063.0], [85.6, 8079.0], [85.7, 8091.0], [85.8, 8096.0], [85.9, 8100.0], [86.0, 8123.0], [86.1, 8128.0], [86.2, 8130.0], [86.3, 8150.0], [86.4, 8178.0], [86.5, 8183.0], [86.6, 8192.0], [86.7, 8197.0], [86.8, 8197.0], [86.9, 8201.0], [87.0, 8202.0], [87.1, 8203.0], [87.2, 8209.0], [87.3, 8210.0], [87.4, 8210.0], [87.5, 8213.0], [87.6, 8213.0], [87.7, 8218.0], [87.8, 8223.0], [87.9, 8228.0], [88.0, 8250.0], [88.1, 8271.0], [88.2, 8283.0], [88.3, 8289.0], [88.4, 8298.0], [88.5, 8325.0], [88.6, 8340.0], [88.7, 8347.0], [88.8, 8347.0], [88.9, 8351.0], [89.0, 8362.0], [89.1, 8365.0], [89.2, 8369.0], [89.3, 8386.0], [89.4, 8398.0], [89.5, 8403.0], [89.6, 8409.0], [89.7, 8415.0], [89.8, 8417.0], [89.9, 8421.0], [90.0, 8425.0], [90.1, 8425.0], [90.2, 8431.0], [90.3, 8456.0], [90.4, 8459.0], [90.5, 8460.0], [90.6, 8467.0], [90.7, 8491.0], [90.8, 8496.0], [90.9, 8497.0], [91.0, 8500.0], [91.1, 8501.0], [91.2, 8508.0], [91.3, 8511.0], [91.4, 8513.0], [91.5, 8518.0], [91.6, 8526.0], [91.7, 8529.0], [91.8, 8540.0], [91.9, 8545.0], [92.0, 8553.0], [92.1, 8556.0], [92.2, 8566.0], [92.3, 8568.0], [92.4, 8578.0], [92.5, 8589.0], [92.6, 8628.0], [92.7, 8634.0], [92.8, 8635.0], [92.9, 8636.0], [93.0, 8647.0], [93.1, 8668.0], [93.2, 8708.0], [93.3, 8715.0], [93.4, 8728.0], [93.5, 8741.0], [93.6, 8753.0], [93.7, 8763.0], [93.8, 8765.0], [93.9, 8769.0], [94.0, 8776.0], [94.1, 8798.0], [94.2, 8798.0], [94.3, 8817.0], [94.4, 8831.0], [94.5, 8844.0], [94.6, 8851.0], [94.7, 8861.0], [94.8, 8862.0], [94.9, 8864.0], [95.0, 8867.0], [95.1, 8877.0], [95.2, 8878.0], [95.3, 8882.0], [95.4, 8890.0], [95.5, 8891.0], [95.6, 8892.0], [95.7, 8898.0], [95.8, 8906.0], [95.9, 8911.0], [96.0, 8917.0], [96.1, 8919.0], [96.2, 8939.0], [96.3, 8943.0], [96.4, 8960.0], [96.5, 8968.0], [96.6, 8972.0], [96.7, 8995.0], [96.8, 8995.0], [96.9, 9012.0], [97.0, 9015.0], [97.1, 9019.0], [97.2, 9019.0], [97.3, 9029.0], [97.4, 9035.0], [97.5, 9054.0], [97.6, 9064.0], [97.7, 9083.0], [97.8, 9114.0], [97.9, 9151.0], [98.0, 9158.0], [98.1, 9167.0], [98.2, 9173.0], [98.3, 9177.0], [98.4, 9182.0], [98.5, 9184.0], [98.6, 9229.0], [98.7, 9255.0], [98.8, 9264.0], [98.9, 9283.0], [99.0, 9330.0], [99.1, 9335.0], [99.2, 9355.0], [99.3, 9356.0], [99.4, 9424.0], [99.5, 9459.0], [99.6, 9568.0], [99.7, 9782.0], [99.8, 9784.0], [99.9, 9846.0]], "isOverall": false, "label": "https://localhost:44313/Listings/", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 230.0, "series": [{"data": [[100.0, 230.0], [200.0, 84.0], [300.0, 19.0], [400.0, 16.0], [500.0, 19.0], [600.0, 14.0], [700.0, 22.0], [800.0, 12.0], [900.0, 10.0], [1000.0, 8.0], [1100.0, 14.0], [1200.0, 10.0], [1300.0, 6.0], [1400.0, 15.0], [1500.0, 15.0], [1600.0, 6.0], [1700.0, 11.0], [1800.0, 7.0], [1900.0, 8.0], [2000.0, 13.0], [2100.0, 5.0], [2200.0, 15.0], [2300.0, 11.0], [2400.0, 5.0], [2500.0, 5.0], [2600.0, 4.0], [2800.0, 3.0], [2700.0, 1.0], [2900.0, 2.0], [3000.0, 3.0], [3100.0, 3.0], [3200.0, 4.0], [3300.0, 2.0], [3400.0, 2.0], [3500.0, 3.0], [3600.0, 3.0], [3800.0, 2.0], [3900.0, 2.0], [4000.0, 6.0], [4100.0, 9.0], [4200.0, 9.0], [4300.0, 4.0], [4500.0, 12.0], [4400.0, 6.0], [4600.0, 4.0], [4800.0, 8.0], [4700.0, 2.0], [4900.0, 9.0], [5000.0, 6.0], [5100.0, 15.0], [5300.0, 17.0], [5200.0, 8.0], [5400.0, 10.0], [5600.0, 6.0], [5500.0, 4.0], [5700.0, 6.0], [5800.0, 6.0], [6000.0, 6.0], [5900.0, 4.0], [6100.0, 2.0], [6200.0, 7.0], [6300.0, 4.0], [6500.0, 7.0], [6600.0, 5.0], [6400.0, 2.0], [6700.0, 6.0], [6800.0, 7.0], [6900.0, 8.0], [7100.0, 5.0], [7000.0, 7.0], [7200.0, 5.0], [7300.0, 6.0], [7400.0, 13.0], [7600.0, 14.0], [7500.0, 14.0], [7800.0, 14.0], [7900.0, 7.0], [7700.0, 7.0], [8100.0, 11.0], [8000.0, 12.0], [8200.0, 17.0], [8600.0, 6.0], [8400.0, 16.0], [8300.0, 11.0], [8500.0, 17.0], [8700.0, 12.0], [8800.0, 16.0], [8900.0, 12.0], [9000.0, 10.0], [9100.0, 8.0], [9200.0, 5.0], [9300.0, 4.0], [9500.0, 1.0], [9700.0, 2.0], [9400.0, 2.0], [10200.0, 1.0], [9800.0, 1.0]], "isOverall": false, "label": "https://localhost:44313/Listings/", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 10200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 130.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1.500ms"], [2, "Requests having \nresponse time > 1.500ms"], [3, "Requests in error"]], "maxY": 596.0, "series": [{"data": [[0.0, 349.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 130.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1.500ms", "isController": false}, {"data": [[2.0, 596.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1.500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.6532394645E12, "maxY": 1.0, "series": [{"data": [[1.6532394945E12, 1.0], [1.6532394975E12, 1.0], [1.653239475E12, 1.0], [1.653239469E12, 1.0], [1.6532394885E12, 1.0], [1.653239472E12, 1.0], [1.6532394915E12, 1.0], [1.6532395065E12, 1.0], [1.653239484E12, 1.0], [1.653239487E12, 1.0], [1.6532394645E12, 1.0], [1.6532395005E12, 1.0], [1.653239478E12, 1.0], [1.6532395035E12, 1.0], [1.653239481E12, 1.0], [1.653239496E12, 1.0], [1.6532394735E12, 1.0], [1.6532394765E12, 1.0], [1.65323949E12, 1.0], [1.6532394675E12, 1.0], [1.653239493E12, 1.0], [1.6532394705E12, 1.0], [1.653239505E12, 1.0], [1.653239466E12, 1.0], [1.653239508E12, 1.0], [1.6532394855E12, 1.0], [1.6532394795E12, 1.0], [1.653239499E12, 1.0], [1.6532394825E12, 1.0], [1.653239502E12, 1.0]], "isOverall": false, "label": "parallel bzm - Parallel", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1500, "maxX": 1.653239508E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 244.60869565217388, "minX": 1.0, "maxY": 9568.0, "series": [{"data": [[2.0, 244.60869565217388], [3.0, 288.561403508772], [4.0, 520.25], [5.0, 320.9298245614035], [6.0, 1440.4285714285716], [7.0, 443.475], [8.0, 633.2083333333333], [9.0, 799.4705882352941], [10.0, 2013.2], [11.0, 1420.25], [12.0, 1566.0], [13.0, 2503.0], [14.0, 3244.6666666666665], [15.0, 2143.8], [16.0, 458.0], [17.0, 3416.5], [18.0, 1973.6666666666665], [19.0, 1903.3333333333333], [20.0, 1613.75], [21.0, 1465.888888888889], [22.0, 1805.0], [23.0, 635.4285714285714], [24.0, 4977.0], [25.0, 4759.0], [26.0, 4922.0], [27.0, 2416.4], [28.0, 2551.8], [29.0, 3936.3333333333335], [30.0, 2566.6], [31.0, 2050.285714285714], [32.0, 1440.6923076923076], [33.0, 2890.25], [34.0, 2887.75], [35.0, 4826.0], [37.0, 4889.5], [36.0, 9114.0], [38.0, 2802.0], [39.0, 3650.6666666666665], [41.0, 8473.0], [40.0, 8890.0], [43.0, 4925.5], [42.0, 3513.3333333333335], [45.0, 4915.0], [44.0, 8728.0], [46.0, 2830.5], [47.0, 2958.0], [48.0, 3153.5], [49.0, 3731.0], [50.0, 3666.0], [51.0, 8150.0], [53.0, 2697.2], [52.0, 4852.0], [54.0, 2260.75], [55.0, 2246.5555555555557], [56.0, 1984.3846153846152], [57.0, 5084.0], [58.0, 2902.6], [59.0, 9229.0], [61.0, 8566.0], [60.0, 8647.0], [63.0, 5009.5], [62.0, 8403.0], [67.0, 8529.0], [66.0, 8634.0], [65.0, 9568.0], [64.0, 8459.0], [69.0, 3434.75], [70.0, 3051.0], [71.0, 4304.666666666666], [68.0, 8415.0], [73.0, 3328.75], [72.0, 4066.0], [74.0, 3445.0], [75.0, 4953.5], [77.0, 2767.0], [76.0, 3842.6666666666665], [79.0, 8351.0], [78.0, 9031.0], [80.0, 2538.0], [81.0, 3102.1666666666665], [83.0, 3612.75], [82.0, 5433.5], [84.0, 5175.0], [85.0, 5314.5], [86.0, 5251.0], [87.0, 8968.0], [91.0, 5173.5], [90.0, 8201.0], [89.0, 7827.0], [88.0, 9054.0], [92.0, 3534.5], [95.0, 5214.5], [94.0, 5525.5], [93.0, 8589.0], [96.0, 4252.0], [99.0, 4166.333333333333], [98.0, 8209.0], [97.0, 8540.0], [100.0, 3622.0], [101.0, 3246.6], [102.0, 3014.2857142857138], [103.0, 3697.25], [104.0, 3046.2857142857138], [107.0, 3742.75], [106.0, 4407.0], [105.0, 7776.0], [108.0, 4331.333333333333], [109.0, 5836.0], [111.0, 8047.0], [110.0, 8283.0], [115.0, 8776.0], [114.0, 7493.0], [113.0, 8063.0], [112.0, 7690.0], [119.0, 8096.0], [118.0, 8456.0], [117.0, 8545.0], [116.0, 9019.0], [122.0, 3796.4], [123.0, 4576.666666666666], [121.0, 8236.0], [120.0, 8060.0], [124.0, 6039.5], [125.0, 4359.333333333333], [126.0, 3960.0], [127.0, 8202.0], [135.0, 8250.0], [134.0, 8668.0], [133.0, 8100.0], [132.0, 8636.0], [131.0, 8753.0], [130.0, 7680.0], [129.0, 7817.0], [128.0, 8298.0], [136.0, 4077.5], [143.0, 4691.333333333333], [142.0, 7950.0], [141.0, 8047.0], [140.0, 8218.0], [139.0, 8508.0], [138.0, 7961.0], [137.0, 8568.0], [144.0, 3984.1666666666665], [147.0, 4795.666666666667], [149.0, 5662.0], [150.0, 4936.0], [151.0, 8178.0], [148.0, 5974.0], [146.0, 8123.0], [145.0, 8817.0], [152.0, 5627.0], [153.0, 4777.0], [159.0, 8409.0], [158.0, 7757.0], [157.0, 8210.0], [156.0, 9019.0], [155.0, 8340.0], [154.0, 8425.0], [167.0, 8192.0], [166.0, 8943.0], [165.0, 7876.0], [164.0, 8500.0], [163.0, 8425.0], [162.0, 8031.0], [161.0, 5746.0], [160.0, 8091.0], [175.0, 7561.0], [174.0, 8325.0], [173.0, 7793.0], [172.0, 8431.0], [171.0, 5413.0], [170.0, 7804.0], [169.0, 7856.0], [168.0, 8192.0], [183.0, 7552.0], [182.0, 7547.0], [181.0, 7371.0], [180.0, 7455.0], [179.0, 7578.0], [178.0, 8049.0], [177.0, 8010.0], [176.0, 8128.0], [191.0, 5783.5], [190.0, 5316.0], [189.0, 7564.0], [188.0, 7177.0], [187.0, 7944.0], [186.0, 7610.0], [185.0, 7491.0], [184.0, 7875.0], [192.0, 4963.5], [193.0, 4573.8], [194.0, 5852.0], [198.0, 5521.666666666667], [197.0, 5925.5], [196.0, 5768.5], [199.0, 7601.0], [195.0, 7636.0], [202.0, 4080.0], [203.0, 4116.0], [204.0, 6234.2], [205.0, 5242.0], [207.0, 6238.5], [206.0, 5541.666666666667], [201.0, 7730.0], [200.0, 7821.0], [214.0, 5153.75], [215.0, 6632.0], [213.0, 8213.0], [212.0, 8578.0], [211.0, 7400.0], [210.0, 7578.0], [209.0, 7660.0], [208.0, 8972.0], [216.0, 5759.0], [217.0, 5567.25], [218.0, 5001.333333333333], [222.0, 5300.75], [223.0, 6311.0], [221.0, 6156.0], [220.0, 7443.0], [219.0, 6247.0], [225.0, 4838.5], [224.0, 5380.75], [226.0, 4615.5], [227.0, 4725.5], [229.0, 5959.5], [228.0, 6271.5], [231.0, 5692.0], [230.0, 7020.0], [232.0, 5971.5], [233.0, 5219.75], [234.0, 5588.0], [235.0, 6623.5], [239.0, 7503.0], [238.0, 6983.0], [237.0, 6906.0], [236.0, 6932.0], [244.0, 4812.571428571428], [243.0, 6034.5], [245.0, 5688.666666666667], [247.0, 5449.75], [246.0, 6371.5], [242.0, 7074.0], [241.0, 7061.0], [240.0, 7067.0], [248.0, 6183.0], [252.0, 5713.666666666667], [253.0, 5225.857142857143], [255.0, 5869.5], [254.0, 6981.0], [251.0, 7182.0], [250.0, 6522.0], [249.0, 7556.0], [270.0, 7530.0], [259.0, 6040.5], [263.0, 5774.833333333334], [256.0, 6131.0], [258.0, 7391.0], [257.0, 7321.0], [262.0, 2778.0], [261.0, 5817.0], [260.0, 6439.0], [265.0, 5869.0], [264.0, 5860.0], [271.0, 5499.5], [269.0, 7519.0], [268.0, 6247.0], [267.0, 7043.5], [275.0, 5833.0], [272.0, 5770.5], [273.0, 6235.5], [274.0, 5405.0], [277.0, 5093.2], [276.0, 5342.333333333333], [280.0, 5429.0], [279.0, 6064.666666666667], [278.0, 7442.0], [281.0, 6397.5], [283.0, 7341.0], [282.0, 7053.0], [286.0, 6590.5], [287.0, 6933.0], [285.0, 5507.75], [284.0, 7036.0], [291.0, 6589.5], [288.0, 6309.0], [294.0, 6899.0], [293.0, 6719.0], [292.0, 5723.0], [290.0, 6444.0], [289.0, 5024.333333333333], [298.0, 6432.666666666667], [299.0, 5216.0], [297.0, 6367.666666666667], [296.0, 6190.666666666667], [303.0, 6568.0], [302.0, 6955.0], [301.0, 6819.0], [300.0, 6723.0], [316.0, 5623.4], [308.0, 5761.333333333333], [309.0, 6564.0], [310.0, 5846.25], [311.0, 5814.333333333333], [305.0, 6881.0], [304.0, 6721.0], [307.0, 6625.0], [306.0, 6574.0], [312.0, 5914.5], [313.0, 5053.5], [315.0, 5674.0], [314.0, 5432.0], [317.0, 5917.333333333333], [318.0, 5999.5], [319.0, 5571.0], [320.0, 5819.0], [1.0, 506.00000000000006]], "isOverall": false, "label": "https://localhost:44313/Listings/", "isController": false}, {"data": [[100.97209302325582, 3464.7144186046535]], "isOverall": false, "label": "https://localhost:44313/Listings/-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 320.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 344.0, "minX": 1.6532394645E12, "maxY": 3359408.6666666665, "series": [{"data": [[1.6532394945E12, 2241953.3333333335], [1.6532394975E12, 2186212.6666666665], [1.653239475E12, 1600780.0], [1.653239469E12, 800440.6666666666], [1.6532394885E12, 2187834.0], [1.653239472E12, 1227264.6666666667], [1.6532394915E12, 2081166.0], [1.6532395065E12, 2506723.3333333335], [1.653239484E12, 2347861.3333333335], [1.653239487E12, 2133866.6666666665], [1.6532394645E12, 231475.33333333334], [1.6532395005E12, 2452604.0], [1.653239478E12, 2027654.6666666667], [1.6532395035E12, 2506267.3333333335], [1.653239481E12, 2347709.3333333335], [1.653239496E12, 2345834.6666666665], [1.6532394735E12, 1333932.6666666667], [1.6532394765E12, 1760807.3333333333], [1.65323949E12, 2293032.6666666665], [1.6532394675E12, 586902.0], [1.653239493E12, 1012966.0], [1.6532394705E12, 1013776.6666666666], [1.653239505E12, 3359408.6666666665], [1.653239466E12, 426874.6666666667], [1.653239508E12, 2507534.0], [1.6532394855E12, 2347506.6666666665], [1.6532394795E12, 2080912.6666666667], [1.653239499E12, 2452958.6666666665], [1.6532394825E12, 2347608.0], [1.653239502E12, 2615316.6666666665]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.6532394945E12, 3612.0], [1.6532394975E12, 3526.0], [1.653239475E12, 2580.0], [1.653239469E12, 1290.0], [1.6532394885E12, 3526.0], [1.653239472E12, 1978.0], [1.6532394915E12, 3354.0], [1.6532395065E12, 4042.0], [1.653239484E12, 3784.0], [1.653239487E12, 3440.0], [1.6532394645E12, 344.0], [1.6532395005E12, 3956.0], [1.653239478E12, 3268.0], [1.6532395035E12, 4042.0], [1.653239481E12, 3784.0], [1.653239496E12, 3784.0], [1.6532394735E12, 2150.0], [1.6532394765E12, 2838.0], [1.65323949E12, 3698.0], [1.6532394675E12, 946.0], [1.653239493E12, 1634.0], [1.6532394705E12, 1634.0], [1.653239505E12, 5418.0], [1.653239466E12, 688.0], [1.653239508E12, 4042.0], [1.6532394855E12, 3784.0], [1.6532394795E12, 3354.0], [1.653239499E12, 3956.0], [1.6532394825E12, 3784.0], [1.653239502E12, 4214.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1500, "maxX": 1.653239508E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 112.0, "minX": 1.6532394645E12, "maxY": 9040.489361702128, "series": [{"data": [[1.6532394945E12, 4262.047619047619], [1.6532394975E12, 5486.756097560975], [1.653239475E12, 133.7], [1.653239469E12, 112.0], [1.6532394885E12, 1514.7317073170727], [1.653239472E12, 115.65217391304348], [1.6532394915E12, 2341.48717948718], [1.6532395065E12, 8651.106382978725], [1.653239484E12, 543.4545454545454], [1.653239487E12, 1184.4249999999997], [1.6532394645E12, 116.0], [1.6532395005E12, 6511.021739130435], [1.653239478E12, 169.4210526315789], [1.6532395035E12, 7678.510638297872], [1.653239481E12, 235.61363636363637], [1.653239496E12, 4760.75], [1.6532394735E12, 126.84], [1.6532394765E12, 149.2121212121212], [1.65323949E12, 1963.8837209302328], [1.6532394675E12, 112.63636363636364], [1.653239493E12, 3132.6315789473683], [1.6532394705E12, 115.6842105263158], [1.653239505E12, 8236.825396825396], [1.653239466E12, 115.99999999999999], [1.653239508E12, 9040.489361702128], [1.6532394855E12, 796.2045454545456], [1.6532394795E12, 188.33333333333334], [1.653239499E12, 6012.108695652175], [1.6532394825E12, 301.36363636363643], [1.653239502E12, 7374.632653061224]], "isOverall": false, "label": "https://localhost:44313/Listings/", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1500, "maxX": 1.653239508E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 111.53333333333333, "minX": 1.6532394645E12, "maxY": 9038.87234042553, "series": [{"data": [[1.6532394945E12, 4259.690476190476], [1.6532394975E12, 5485.4390243902435], [1.653239475E12, 133.13333333333335], [1.653239469E12, 111.53333333333333], [1.6532394885E12, 1513.6097560975609], [1.653239472E12, 115.17391304347825], [1.6532394915E12, 2339.794871794872], [1.6532395065E12, 8649.000000000002], [1.653239484E12, 542.4090909090908], [1.653239487E12, 1182.225], [1.6532394645E12, 115.75], [1.6532395005E12, 6508.717391304348], [1.653239478E12, 168.73684210526318], [1.6532395035E12, 7671.723404255321], [1.653239481E12, 234.70454545454544], [1.653239496E12, 4759.84090909091], [1.6532394735E12, 126.24000000000001], [1.6532394765E12, 148.4848484848485], [1.65323949E12, 1962.4418604651164], [1.6532394675E12, 112.0], [1.653239493E12, 3123.7368421052633], [1.6532394705E12, 115.15789473684212], [1.653239505E12, 8234.428571428572], [1.653239466E12, 115.625], [1.653239508E12, 9038.87234042553], [1.6532394855E12, 795.2954545454547], [1.6532394795E12, 187.5897435897436], [1.653239499E12, 6008.826086956523], [1.6532394825E12, 300.56818181818176], [1.653239502E12, 7371.428571428571]], "isOverall": false, "label": "https://localhost:44313/Listings/", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1500, "maxX": 1.653239508E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 8.826086956521738, "minX": 1.6532394645E12, "maxY": 152.91489361702128, "series": [{"data": [[1.6532394945E12, 91.6190476190476], [1.6532394975E12, 58.46341463414634], [1.653239475E12, 10.433333333333335], [1.653239469E12, 8.933333333333334], [1.6532394885E12, 55.3170731707317], [1.653239472E12, 8.826086956521738], [1.6532394915E12, 58.23076923076922], [1.6532395065E12, 123.06382978723406], [1.653239484E12, 53.04545454545453], [1.653239487E12, 65.95000000000002], [1.6532394645E12, 12.75], [1.6532395005E12, 58.478260869565226], [1.653239478E12, 13.157894736842106], [1.6532395035E12, 84.61702127659574], [1.653239481E12, 19.545454545454547], [1.653239496E12, 56.11363636363636], [1.6532394735E12, 9.639999999999997], [1.6532394765E12, 11.424242424242426], [1.65323949E12, 53.37209302325579], [1.6532394675E12, 10.454545454545453], [1.653239493E12, 52.05263157894737], [1.6532394705E12, 9.210526315789474], [1.653239505E12, 89.55555555555559], [1.653239466E12, 13.0], [1.653239508E12, 152.91489361702128], [1.6532394855E12, 71.09090909090907], [1.6532394795E12, 14.615384615384617], [1.653239499E12, 41.21739130434782], [1.6532394825E12, 30.113636363636367], [1.653239502E12, 83.63265306122452]], "isOverall": false, "label": "https://localhost:44313/Listings/", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1500, "maxX": 1.653239508E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 103.0, "minX": 1.6532394645E12, "maxY": 10239.0, "series": [{"data": [[1.6532394945E12, 4909.0], [1.6532394975E12, 6750.0], [1.653239475E12, 148.0], [1.653239469E12, 123.0], [1.6532394885E12, 1919.0], [1.653239472E12, 124.0], [1.6532394915E12, 3029.0], [1.6532395065E12, 9568.0], [1.653239484E12, 732.0], [1.653239487E12, 1596.0], [1.6532394645E12, 124.0], [1.6532395005E12, 7681.0], [1.653239478E12, 187.0], [1.6532395035E12, 8943.0], [1.653239481E12, 312.0], [1.653239496E12, 5440.0], [1.6532394735E12, 150.0], [1.6532394765E12, 165.0], [1.65323949E12, 2382.0], [1.6532394675E12, 135.0], [1.653239493E12, 3630.0], [1.6532394705E12, 131.0], [1.653239505E12, 9177.0], [1.653239466E12, 130.0], [1.653239508E12, 10239.0], [1.6532394855E12, 1062.0], [1.6532394795E12, 231.0], [1.653239499E12, 6955.0], [1.6532394825E12, 442.0], [1.653239502E12, 8972.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.6532394945E12, 4584.8], [1.6532394975E12, 6008.6], [1.653239475E12, 145.8], [1.653239469E12, 121.2], [1.6532394885E12, 1850.8000000000002], [1.653239472E12, 122.4], [1.6532394915E12, 2681.0], [1.6532395065E12, 9256.8], [1.653239484E12, 688.0], [1.653239487E12, 1523.3], [1.6532394645E12, 124.0], [1.6532395005E12, 7513.4], [1.653239478E12, 181.1], [1.6532395035E12, 8412.2], [1.653239481E12, 265.0], [1.653239496E12, 5176.5], [1.6532394735E12, 139.8], [1.6532394765E12, 163.6], [1.65323949E12, 2269.8], [1.6532394675E12, 133.8], [1.653239493E12, 3579.0], [1.6532394705E12, 126.0], [1.653239505E12, 8766.8], [1.653239466E12, 130.0], [1.653239508E12, 9523.6], [1.6532394855E12, 980.5], [1.6532394795E12, 225.0], [1.653239499E12, 6747.0], [1.6532394825E12, 362.5], [1.653239502E12, 8417.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.6532394945E12, 4909.0], [1.6532394975E12, 6750.0], [1.653239475E12, 148.0], [1.653239469E12, 123.0], [1.6532394885E12, 1919.0], [1.653239472E12, 124.0], [1.6532394915E12, 3029.0], [1.6532395065E12, 9568.0], [1.653239484E12, 732.0], [1.653239487E12, 1596.0], [1.6532394645E12, 124.0], [1.6532395005E12, 7681.0], [1.653239478E12, 187.0], [1.6532395035E12, 8943.0], [1.653239481E12, 312.0], [1.653239496E12, 5440.0], [1.6532394735E12, 150.0], [1.6532394765E12, 165.0], [1.65323949E12, 2382.0], [1.6532394675E12, 135.0], [1.653239493E12, 3630.0], [1.6532394705E12, 131.0], [1.653239505E12, 9177.0], [1.653239466E12, 130.0], [1.653239508E12, 10239.0], [1.6532394855E12, 1062.0], [1.6532394795E12, 231.0], [1.653239499E12, 6955.0], [1.6532394825E12, 442.0], [1.653239502E12, 8972.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.6532394945E12, 4777.95], [1.6532394975E12, 6225.4], [1.653239475E12, 147.45], [1.653239469E12, 123.0], [1.6532394885E12, 1916.0], [1.653239472E12, 124.0], [1.6532394915E12, 2902.0], [1.6532395065E12, 9333.0], [1.653239484E12, 718.25], [1.653239487E12, 1570.3999999999999], [1.6532394645E12, 124.0], [1.6532395005E12, 7575.5], [1.653239478E12, 187.0], [1.6532395035E12, 8472.4], [1.653239481E12, 282.5], [1.653239496E12, 5349.5], [1.6532394735E12, 147.29999999999998], [1.6532394765E12, 165.0], [1.65323949E12, 2337.4], [1.6532394675E12, 135.0], [1.653239493E12, 3630.0], [1.6532394705E12, 131.0], [1.653239505E12, 8988.6], [1.653239466E12, 130.0], [1.653239508E12, 9821.199999999999], [1.6532394855E12, 1007.5], [1.6532394795E12, 229.0], [1.653239499E12, 6859.3], [1.6532394825E12, 424.25], [1.653239502E12, 8763.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.6532394945E12, 3671.0], [1.6532394975E12, 4627.0], [1.653239475E12, 118.0], [1.653239469E12, 105.0], [1.6532394885E12, 1040.0], [1.653239472E12, 106.0], [1.6532394915E12, 1662.0], [1.6532395065E12, 7827.0], [1.653239484E12, 370.0], [1.653239487E12, 739.0], [1.6532394645E12, 108.0], [1.6532395005E12, 2778.0], [1.653239478E12, 156.0], [1.6532395035E12, 5316.0], [1.653239481E12, 208.0], [1.653239496E12, 3415.0], [1.6532394735E12, 108.0], [1.6532394765E12, 122.0], [1.65323949E12, 1408.0], [1.6532394675E12, 103.0], [1.653239493E12, 2483.0], [1.6532394705E12, 107.0], [1.653239505E12, 5974.0], [1.653239466E12, 105.0], [1.653239508E12, 8460.0], [1.6532394855E12, 546.0], [1.6532394795E12, 154.0], [1.653239499E12, 4925.0], [1.6532394825E12, 219.0], [1.653239502E12, 4735.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.6532394945E12, 4222.5], [1.6532394975E12, 5421.0], [1.653239475E12, 135.0], [1.653239469E12, 111.0], [1.6532394885E12, 1523.0], [1.653239472E12, 116.0], [1.6532394915E12, 2328.0], [1.6532395065E12, 8553.0], [1.653239484E12, 536.5], [1.653239487E12, 1188.5], [1.6532394645E12, 116.0], [1.6532395005E12, 6926.5], [1.653239478E12, 168.0], [1.6532395035E12, 7747.0], [1.653239481E12, 232.0], [1.653239496E12, 4864.0], [1.6532394735E12, 127.0], [1.6532394765E12, 152.0], [1.65323949E12, 1968.0], [1.6532394675E12, 108.0], [1.653239493E12, 3159.0], [1.6532394705E12, 114.0], [1.653239505E12, 8213.0], [1.653239466E12, 113.0], [1.653239508E12, 8960.0], [1.6532394855E12, 779.5], [1.6532394795E12, 179.0], [1.653239499E12, 6088.5], [1.6532394825E12, 293.0], [1.653239502E12, 7448.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1500, "maxX": 1.653239508E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 107.0, "minX": 2.0, "maxY": 9093.5, "series": [{"data": [[32.0, 7008.5], [33.0, 8213.0], [2.0, 9093.5], [34.0, 1307.0], [37.0, 6625.0], [36.0, 7653.5], [45.0, 8939.0], [46.0, 8315.0], [4.0, 116.0], [5.0, 113.0], [9.0, 107.0], [10.0, 110.0], [13.0, 4090.0], [14.0, 119.0], [15.0, 115.5], [18.0, 132.0], [19.0, 3159.0], [20.0, 141.0], [23.0, 1593.0], [24.0, 1095.0], [25.0, 167.5], [27.0, 263.0], [29.0, 4226.0], [30.0, 2898.5], [31.0, 2058.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 46.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 107.0, "minX": 2.0, "maxY": 9091.5, "series": [{"data": [[32.0, 7007.5], [33.0, 8212.0], [2.0, 9091.5], [34.0, 1306.0], [37.0, 6624.0], [36.0, 7645.0], [45.0, 8938.0], [46.0, 8314.5], [4.0, 115.5], [5.0, 112.5], [9.0, 107.0], [10.0, 109.5], [13.0, 4089.0], [14.0, 118.5], [15.0, 115.5], [18.0, 132.0], [19.0, 3158.0], [20.0, 141.0], [23.0, 1593.0], [24.0, 1094.0], [25.0, 167.0], [27.0, 262.0], [29.0, 4192.0], [30.0, 2898.0], [31.0, 2057.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 46.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 3.3333333333333335, "minX": 1.6532394645E12, "maxY": 51.333333333333336, "series": [{"data": [[1.653239496E12, 51.333333333333336], [1.6532394735E12, 18.0], [1.6532394945E12, 47.333333333333336], [1.6532394765E12, 22.666666666666668], [1.6532394975E12, 51.333333333333336], [1.653239475E12, 20.0], [1.653239469E12, 10.0], [1.65323949E12, 45.333333333333336], [1.6532394675E12, 8.0], [1.6532394885E12, 42.666666666666664], [1.653239472E12, 14.666666666666666], [1.653239493E12, 50.0], [1.6532394705E12, 13.333333333333334], [1.6532394915E12, 48.0], [1.653239484E12, 35.333333333333336], [1.653239466E12, 4.666666666666667], [1.653239487E12, 39.333333333333336], [1.6532394645E12, 3.3333333333333335], [1.6532394855E12, 38.0], [1.6532394795E12, 28.0], [1.653239478E12, 25.333333333333332], [1.653239499E12, 37.333333333333336], [1.6532394825E12, 32.666666666666664], [1.653239481E12, 30.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1500, "maxX": 1.653239499E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 2.6666666666666665, "minX": 1.6532394645E12, "maxY": 42.0, "series": [{"data": [[1.6532394945E12, 28.0], [1.6532394975E12, 27.333333333333332], [1.653239475E12, 20.0], [1.653239469E12, 10.0], [1.6532394885E12, 27.333333333333332], [1.653239472E12, 15.333333333333334], [1.6532394915E12, 26.0], [1.6532395065E12, 31.333333333333332], [1.653239484E12, 29.333333333333332], [1.653239487E12, 26.666666666666668], [1.6532394645E12, 2.6666666666666665], [1.6532395005E12, 30.666666666666668], [1.653239478E12, 25.333333333333332], [1.6532395035E12, 31.333333333333332], [1.653239481E12, 29.333333333333332], [1.653239496E12, 29.333333333333332], [1.6532394735E12, 16.666666666666668], [1.6532394765E12, 22.0], [1.65323949E12, 28.666666666666668], [1.6532394675E12, 7.333333333333333], [1.653239493E12, 12.666666666666666], [1.6532394705E12, 12.666666666666666], [1.653239505E12, 42.0], [1.653239466E12, 5.333333333333333], [1.653239508E12, 31.333333333333332], [1.6532394855E12, 29.333333333333332], [1.6532394795E12, 26.0], [1.653239499E12, 30.666666666666668], [1.6532394825E12, 29.333333333333332], [1.653239502E12, 32.666666666666664]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1500, "maxX": 1.653239508E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 2.6666666666666665, "minX": 1.6532394645E12, "maxY": 42.0, "series": [{"data": [[1.6532394945E12, 28.0], [1.6532394975E12, 27.333333333333332], [1.653239475E12, 20.0], [1.653239469E12, 10.0], [1.6532394885E12, 27.333333333333332], [1.653239472E12, 15.333333333333334], [1.6532394915E12, 26.0], [1.6532395065E12, 31.333333333333332], [1.653239484E12, 29.333333333333332], [1.653239487E12, 26.666666666666668], [1.6532394645E12, 2.6666666666666665], [1.6532395005E12, 30.666666666666668], [1.653239478E12, 25.333333333333332], [1.6532395035E12, 31.333333333333332], [1.653239481E12, 29.333333333333332], [1.653239496E12, 29.333333333333332], [1.6532394735E12, 16.666666666666668], [1.6532394765E12, 22.0], [1.65323949E12, 28.666666666666668], [1.6532394675E12, 7.333333333333333], [1.653239493E12, 12.666666666666666], [1.6532394705E12, 12.666666666666666], [1.653239505E12, 42.0], [1.653239466E12, 5.333333333333333], [1.653239508E12, 31.333333333333332], [1.6532394855E12, 29.333333333333332], [1.6532394795E12, 26.0], [1.653239499E12, 30.666666666666668], [1.6532394825E12, 29.333333333333332], [1.653239502E12, 32.666666666666664]], "isOverall": false, "label": "https://localhost:44313/Listings/-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1500, "maxX": 1.653239508E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 2.6666666666666665, "minX": 1.6532394645E12, "maxY": 42.0, "series": [{"data": [[1.6532394945E12, 28.0], [1.6532394975E12, 27.333333333333332], [1.653239475E12, 20.0], [1.653239469E12, 10.0], [1.6532394885E12, 27.333333333333332], [1.653239472E12, 15.333333333333334], [1.6532394915E12, 26.0], [1.6532395065E12, 31.333333333333332], [1.653239484E12, 29.333333333333332], [1.653239487E12, 26.666666666666668], [1.6532394645E12, 2.6666666666666665], [1.6532395005E12, 30.666666666666668], [1.653239478E12, 25.333333333333332], [1.6532395035E12, 31.333333333333332], [1.653239481E12, 29.333333333333332], [1.653239496E12, 29.333333333333332], [1.6532394735E12, 16.666666666666668], [1.6532394765E12, 22.0], [1.65323949E12, 28.666666666666668], [1.6532394675E12, 7.333333333333333], [1.653239493E12, 12.666666666666666], [1.6532394705E12, 12.666666666666666], [1.653239505E12, 42.0], [1.653239466E12, 5.333333333333333], [1.653239508E12, 31.333333333333332], [1.6532394855E12, 29.333333333333332], [1.6532394795E12, 26.0], [1.653239499E12, 30.666666666666668], [1.6532394825E12, 29.333333333333332], [1.653239502E12, 32.666666666666664]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1500, "maxX": 1.653239508E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

