/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 103.0, "minX": 0.0, "maxY": 15746.0, "series": [{"data": [[0.0, 103.0], [0.1, 103.0], [0.2, 103.0], [0.3, 104.0], [0.4, 104.0], [0.5, 104.0], [0.6, 105.0], [0.7, 105.0], [0.8, 105.0], [0.9, 105.0], [1.0, 106.0], [1.1, 106.0], [1.2, 106.0], [1.3, 106.0], [1.4, 106.0], [1.5, 106.0], [1.6, 106.0], [1.7, 107.0], [1.8, 107.0], [1.9, 107.0], [2.0, 107.0], [2.1, 107.0], [2.2, 108.0], [2.3, 108.0], [2.4, 108.0], [2.5, 108.0], [2.6, 108.0], [2.7, 108.0], [2.8, 108.0], [2.9, 108.0], [3.0, 109.0], [3.1, 109.0], [3.2, 109.0], [3.3, 109.0], [3.4, 109.0], [3.5, 109.0], [3.6, 109.0], [3.7, 109.0], [3.8, 110.0], [3.9, 110.0], [4.0, 110.0], [4.1, 110.0], [4.2, 110.0], [4.3, 110.0], [4.4, 111.0], [4.5, 111.0], [4.6, 111.0], [4.7, 111.0], [4.8, 111.0], [4.9, 111.0], [5.0, 112.0], [5.1, 112.0], [5.2, 112.0], [5.3, 112.0], [5.4, 112.0], [5.5, 113.0], [5.6, 113.0], [5.7, 113.0], [5.8, 113.0], [5.9, 113.0], [6.0, 113.0], [6.1, 113.0], [6.2, 113.0], [6.3, 113.0], [6.4, 114.0], [6.5, 114.0], [6.6, 114.0], [6.7, 114.0], [6.8, 115.0], [6.9, 115.0], [7.0, 115.0], [7.1, 115.0], [7.2, 115.0], [7.3, 115.0], [7.4, 115.0], [7.5, 115.0], [7.6, 115.0], [7.7, 116.0], [7.8, 116.0], [7.9, 116.0], [8.0, 116.0], [8.1, 116.0], [8.2, 117.0], [8.3, 117.0], [8.4, 117.0], [8.5, 117.0], [8.6, 117.0], [8.7, 117.0], [8.8, 117.0], [8.9, 117.0], [9.0, 118.0], [9.1, 118.0], [9.2, 118.0], [9.3, 118.0], [9.4, 118.0], [9.5, 118.0], [9.6, 118.0], [9.7, 119.0], [9.8, 119.0], [9.9, 119.0], [10.0, 119.0], [10.1, 120.0], [10.2, 120.0], [10.3, 120.0], [10.4, 121.0], [10.5, 121.0], [10.6, 121.0], [10.7, 121.0], [10.8, 121.0], [10.9, 122.0], [11.0, 122.0], [11.1, 123.0], [11.2, 123.0], [11.3, 124.0], [11.4, 124.0], [11.5, 126.0], [11.6, 126.0], [11.7, 126.0], [11.8, 127.0], [11.9, 127.0], [12.0, 128.0], [12.1, 128.0], [12.2, 128.0], [12.3, 129.0], [12.4, 129.0], [12.5, 129.0], [12.6, 129.0], [12.7, 129.0], [12.8, 129.0], [12.9, 130.0], [13.0, 130.0], [13.1, 130.0], [13.2, 130.0], [13.3, 130.0], [13.4, 131.0], [13.5, 131.0], [13.6, 131.0], [13.7, 131.0], [13.8, 132.0], [13.9, 132.0], [14.0, 132.0], [14.1, 133.0], [14.2, 133.0], [14.3, 133.0], [14.4, 134.0], [14.5, 136.0], [14.6, 137.0], [14.7, 138.0], [14.8, 139.0], [14.9, 139.0], [15.0, 139.0], [15.1, 140.0], [15.2, 140.0], [15.3, 140.0], [15.4, 140.0], [15.5, 140.0], [15.6, 141.0], [15.7, 141.0], [15.8, 141.0], [15.9, 142.0], [16.0, 142.0], [16.1, 143.0], [16.2, 143.0], [16.3, 143.0], [16.4, 144.0], [16.5, 144.0], [16.6, 145.0], [16.7, 145.0], [16.8, 146.0], [16.9, 146.0], [17.0, 146.0], [17.1, 146.0], [17.2, 148.0], [17.3, 148.0], [17.4, 150.0], [17.5, 150.0], [17.6, 150.0], [17.7, 150.0], [17.8, 151.0], [17.9, 151.0], [18.0, 152.0], [18.1, 152.0], [18.2, 153.0], [18.3, 153.0], [18.4, 154.0], [18.5, 154.0], [18.6, 154.0], [18.7, 159.0], [18.8, 160.0], [18.9, 161.0], [19.0, 161.0], [19.1, 162.0], [19.2, 162.0], [19.3, 162.0], [19.4, 163.0], [19.5, 164.0], [19.6, 165.0], [19.7, 165.0], [19.8, 165.0], [19.9, 165.0], [20.0, 167.0], [20.1, 169.0], [20.2, 170.0], [20.3, 171.0], [20.4, 172.0], [20.5, 173.0], [20.6, 177.0], [20.7, 178.0], [20.8, 180.0], [20.9, 182.0], [21.0, 214.0], [21.1, 226.0], [21.2, 227.0], [21.3, 230.0], [21.4, 240.0], [21.5, 241.0], [21.6, 244.0], [21.7, 245.0], [21.8, 245.0], [21.9, 249.0], [22.0, 251.0], [22.1, 251.0], [22.2, 251.0], [22.3, 253.0], [22.4, 255.0], [22.5, 257.0], [22.6, 258.0], [22.7, 263.0], [22.8, 265.0], [22.9, 267.0], [23.0, 267.0], [23.1, 271.0], [23.2, 273.0], [23.3, 273.0], [23.4, 274.0], [23.5, 276.0], [23.6, 277.0], [23.7, 285.0], [23.8, 285.0], [23.9, 285.0], [24.0, 286.0], [24.1, 286.0], [24.2, 287.0], [24.3, 290.0], [24.4, 290.0], [24.5, 290.0], [24.6, 292.0], [24.7, 293.0], [24.8, 293.0], [24.9, 293.0], [25.0, 296.0], [25.1, 296.0], [25.2, 301.0], [25.3, 302.0], [25.4, 304.0], [25.5, 306.0], [25.6, 306.0], [25.7, 309.0], [25.8, 311.0], [25.9, 311.0], [26.0, 315.0], [26.1, 319.0], [26.2, 322.0], [26.3, 325.0], [26.4, 325.0], [26.5, 325.0], [26.6, 328.0], [26.7, 336.0], [26.8, 344.0], [26.9, 346.0], [27.0, 346.0], [27.1, 347.0], [27.2, 349.0], [27.3, 349.0], [27.4, 350.0], [27.5, 353.0], [27.6, 354.0], [27.7, 354.0], [27.8, 355.0], [27.9, 355.0], [28.0, 355.0], [28.1, 357.0], [28.2, 362.0], [28.3, 365.0], [28.4, 365.0], [28.5, 367.0], [28.6, 371.0], [28.7, 377.0], [28.8, 378.0], [28.9, 379.0], [29.0, 382.0], [29.1, 385.0], [29.2, 388.0], [29.3, 388.0], [29.4, 407.0], [29.5, 411.0], [29.6, 413.0], [29.7, 430.0], [29.8, 447.0], [29.9, 477.0], [30.0, 496.0], [30.1, 500.0], [30.2, 526.0], [30.3, 557.0], [30.4, 564.0], [30.5, 566.0], [30.6, 570.0], [30.7, 575.0], [30.8, 578.0], [30.9, 580.0], [31.0, 586.0], [31.1, 599.0], [31.2, 600.0], [31.3, 602.0], [31.4, 607.0], [31.5, 608.0], [31.6, 610.0], [31.7, 621.0], [31.8, 621.0], [31.9, 631.0], [32.0, 639.0], [32.1, 647.0], [32.2, 652.0], [32.3, 661.0], [32.4, 667.0], [32.5, 672.0], [32.6, 675.0], [32.7, 685.0], [32.8, 687.0], [32.9, 692.0], [33.0, 696.0], [33.1, 706.0], [33.2, 722.0], [33.3, 729.0], [33.4, 750.0], [33.5, 773.0], [33.6, 777.0], [33.7, 799.0], [33.8, 802.0], [33.9, 812.0], [34.0, 824.0], [34.1, 834.0], [34.2, 837.0], [34.3, 845.0], [34.4, 867.0], [34.5, 887.0], [34.6, 908.0], [34.7, 919.0], [34.8, 939.0], [34.9, 955.0], [35.0, 968.0], [35.1, 970.0], [35.2, 985.0], [35.3, 989.0], [35.4, 990.0], [35.5, 1001.0], [35.6, 1024.0], [35.7, 1028.0], [35.8, 1039.0], [35.9, 1058.0], [36.0, 1066.0], [36.1, 1082.0], [36.2, 1105.0], [36.3, 1111.0], [36.4, 1112.0], [36.5, 1114.0], [36.6, 1120.0], [36.7, 1120.0], [36.8, 1121.0], [36.9, 1127.0], [37.0, 1130.0], [37.1, 1136.0], [37.2, 1136.0], [37.3, 1138.0], [37.4, 1152.0], [37.5, 1157.0], [37.6, 1176.0], [37.7, 1181.0], [37.8, 1183.0], [37.9, 1188.0], [38.0, 1190.0], [38.1, 1205.0], [38.2, 1220.0], [38.3, 1229.0], [38.4, 1230.0], [38.5, 1232.0], [38.6, 1240.0], [38.7, 1247.0], [38.8, 1252.0], [38.9, 1261.0], [39.0, 1265.0], [39.1, 1287.0], [39.2, 1294.0], [39.3, 1296.0], [39.4, 1308.0], [39.5, 1309.0], [39.6, 1321.0], [39.7, 1325.0], [39.8, 1329.0], [39.9, 1334.0], [40.0, 1337.0], [40.1, 1345.0], [40.2, 1345.0], [40.3, 1345.0], [40.4, 1348.0], [40.5, 1352.0], [40.6, 1353.0], [40.7, 1363.0], [40.8, 1365.0], [40.9, 1366.0], [41.0, 1370.0], [41.1, 1379.0], [41.2, 1382.0], [41.3, 1384.0], [41.4, 1400.0], [41.5, 1410.0], [41.6, 1410.0], [41.7, 1410.0], [41.8, 1417.0], [41.9, 1424.0], [42.0, 1455.0], [42.1, 1460.0], [42.2, 1476.0], [42.3, 1478.0], [42.4, 1509.0], [42.5, 1512.0], [42.6, 1524.0], [42.7, 1528.0], [42.8, 1530.0], [42.9, 1534.0], [43.0, 1539.0], [43.1, 1540.0], [43.2, 1541.0], [43.3, 1543.0], [43.4, 1550.0], [43.5, 1554.0], [43.6, 1557.0], [43.7, 1560.0], [43.8, 1570.0], [43.9, 1576.0], [44.0, 1598.0], [44.1, 1612.0], [44.2, 1629.0], [44.3, 1639.0], [44.4, 1640.0], [44.5, 1643.0], [44.6, 1646.0], [44.7, 1648.0], [44.8, 1649.0], [44.9, 1662.0], [45.0, 1662.0], [45.1, 1689.0], [45.2, 1697.0], [45.3, 1704.0], [45.4, 1752.0], [45.5, 1756.0], [45.6, 1772.0], [45.7, 1773.0], [45.8, 1775.0], [45.9, 1777.0], [46.0, 1784.0], [46.1, 1791.0], [46.2, 1804.0], [46.3, 1811.0], [46.4, 1815.0], [46.5, 1828.0], [46.6, 1830.0], [46.7, 1850.0], [46.8, 1854.0], [46.9, 1861.0], [47.0, 1874.0], [47.1, 1882.0], [47.2, 1894.0], [47.3, 1896.0], [47.4, 1899.0], [47.5, 1900.0], [47.6, 1900.0], [47.7, 1921.0], [47.8, 1927.0], [47.9, 1929.0], [48.0, 1929.0], [48.1, 1936.0], [48.2, 1936.0], [48.3, 1943.0], [48.4, 1960.0], [48.5, 1962.0], [48.6, 1963.0], [48.7, 1975.0], [48.8, 1981.0], [48.9, 1986.0], [49.0, 1990.0], [49.1, 2000.0], [49.2, 2003.0], [49.3, 2011.0], [49.4, 2021.0], [49.5, 2026.0], [49.6, 2029.0], [49.7, 2044.0], [49.8, 2044.0], [49.9, 2050.0], [50.0, 2059.0], [50.1, 2061.0], [50.2, 2064.0], [50.3, 2072.0], [50.4, 2075.0], [50.5, 2076.0], [50.6, 2084.0], [50.7, 2095.0], [50.8, 2095.0], [50.9, 2096.0], [51.0, 2099.0], [51.1, 2100.0], [51.2, 2123.0], [51.3, 2124.0], [51.4, 2127.0], [51.5, 2129.0], [51.6, 2130.0], [51.7, 2142.0], [51.8, 2144.0], [51.9, 2150.0], [52.0, 2150.0], [52.1, 2155.0], [52.2, 2161.0], [52.3, 2163.0], [52.4, 2174.0], [52.5, 2186.0], [52.6, 2192.0], [52.7, 2197.0], [52.8, 2200.0], [52.9, 2228.0], [53.0, 2229.0], [53.1, 2241.0], [53.2, 2247.0], [53.3, 2267.0], [53.4, 2293.0], [53.5, 2297.0], [53.6, 2305.0], [53.7, 2322.0], [53.8, 2325.0], [53.9, 2329.0], [54.0, 2329.0], [54.1, 2332.0], [54.2, 2346.0], [54.3, 2356.0], [54.4, 2371.0], [54.5, 2373.0], [54.6, 2395.0], [54.7, 2405.0], [54.8, 2443.0], [54.9, 2447.0], [55.0, 2467.0], [55.1, 2477.0], [55.2, 2478.0], [55.3, 2486.0], [55.4, 2497.0], [55.5, 2511.0], [55.6, 2538.0], [55.7, 2549.0], [55.8, 2581.0], [55.9, 2582.0], [56.0, 2593.0], [56.1, 2616.0], [56.2, 2683.0], [56.3, 2685.0], [56.4, 2705.0], [56.5, 2725.0], [56.6, 2735.0], [56.7, 2753.0], [56.8, 2810.0], [56.9, 2816.0], [57.0, 2838.0], [57.1, 2920.0], [57.2, 2951.0], [57.3, 3028.0], [57.4, 3071.0], [57.5, 3116.0], [57.6, 3148.0], [57.7, 3175.0], [57.8, 3182.0], [57.9, 3202.0], [58.0, 3226.0], [58.1, 3227.0], [58.2, 3233.0], [58.3, 3241.0], [58.4, 3245.0], [58.5, 3266.0], [58.6, 3291.0], [58.7, 3308.0], [58.8, 3320.0], [58.9, 3385.0], [59.0, 3425.0], [59.1, 3482.0], [59.2, 3520.0], [59.3, 3526.0], [59.4, 3542.0], [59.5, 3577.0], [59.6, 3588.0], [59.7, 3653.0], [59.8, 3771.0], [59.9, 3772.0], [60.0, 3845.0], [60.1, 3892.0], [60.2, 3937.0], [60.3, 3967.0], [60.4, 4006.0], [60.5, 4043.0], [60.6, 4080.0], [60.7, 4120.0], [60.8, 4153.0], [60.9, 4176.0], [61.0, 4214.0], [61.1, 4214.0], [61.2, 4218.0], [61.3, 4230.0], [61.4, 4239.0], [61.5, 4258.0], [61.6, 4271.0], [61.7, 4311.0], [61.8, 4327.0], [61.9, 4351.0], [62.0, 4393.0], [62.1, 4400.0], [62.2, 4406.0], [62.3, 4459.0], [62.4, 4476.0], [62.5, 4484.0], [62.6, 4488.0], [62.7, 4508.0], [62.8, 4510.0], [62.9, 4512.0], [63.0, 4545.0], [63.1, 4552.0], [63.2, 4554.0], [63.3, 4557.0], [63.4, 4567.0], [63.5, 4567.0], [63.6, 4588.0], [63.7, 4616.0], [63.8, 4626.0], [63.9, 4628.0], [64.0, 4635.0], [64.1, 4663.0], [64.2, 4677.0], [64.3, 4679.0], [64.4, 4689.0], [64.5, 4695.0], [64.6, 4744.0], [64.7, 4747.0], [64.8, 4757.0], [64.9, 4808.0], [65.0, 4815.0], [65.1, 4826.0], [65.2, 4839.0], [65.3, 4846.0], [65.4, 4860.0], [65.5, 4876.0], [65.6, 4898.0], [65.7, 4904.0], [65.8, 4904.0], [65.9, 4928.0], [66.0, 5008.0], [66.1, 5011.0], [66.2, 5090.0], [66.3, 5102.0], [66.4, 5106.0], [66.5, 5131.0], [66.6, 5136.0], [66.7, 5174.0], [66.8, 5201.0], [66.9, 5202.0], [67.0, 5202.0], [67.1, 5204.0], [67.2, 5242.0], [67.3, 5243.0], [67.4, 5271.0], [67.5, 5281.0], [67.6, 5290.0], [67.7, 5331.0], [67.8, 5342.0], [67.9, 5381.0], [68.0, 5405.0], [68.1, 5482.0], [68.2, 5557.0], [68.3, 5600.0], [68.4, 5604.0], [68.5, 5617.0], [68.6, 5647.0], [68.7, 5664.0], [68.8, 5668.0], [68.9, 5671.0], [69.0, 5723.0], [69.1, 5753.0], [69.2, 5809.0], [69.3, 5824.0], [69.4, 5937.0], [69.5, 5976.0], [69.6, 5984.0], [69.7, 5987.0], [69.8, 6050.0], [69.9, 6068.0], [70.0, 6147.0], [70.1, 6155.0], [70.2, 6179.0], [70.3, 6197.0], [70.4, 6312.0], [70.5, 6319.0], [70.6, 6334.0], [70.7, 6410.0], [70.8, 6537.0], [70.9, 6548.0], [71.0, 6685.0], [71.1, 6700.0], [71.2, 6707.0], [71.3, 6722.0], [71.4, 6747.0], [71.5, 6798.0], [71.6, 6829.0], [71.7, 6834.0], [71.8, 6842.0], [71.9, 6847.0], [72.0, 6954.0], [72.1, 6985.0], [72.2, 6996.0], [72.3, 7006.0], [72.4, 7009.0], [72.5, 7041.0], [72.6, 7101.0], [72.7, 7106.0], [72.8, 7208.0], [72.9, 7211.0], [73.0, 7215.0], [73.1, 7241.0], [73.2, 7244.0], [73.3, 7286.0], [73.4, 7361.0], [73.5, 7365.0], [73.6, 7365.0], [73.7, 7384.0], [73.8, 7425.0], [73.9, 7551.0], [74.0, 7596.0], [74.1, 7742.0], [74.2, 7745.0], [74.3, 7746.0], [74.4, 7805.0], [74.5, 7807.0], [74.6, 7816.0], [74.7, 7872.0], [74.8, 7877.0], [74.9, 7909.0], [75.0, 7920.0], [75.1, 7975.0], [75.2, 8033.0], [75.3, 8053.0], [75.4, 8065.0], [75.5, 8092.0], [75.6, 8094.0], [75.7, 8103.0], [75.8, 8109.0], [75.9, 8152.0], [76.0, 8198.0], [76.1, 8217.0], [76.2, 8251.0], [76.3, 8278.0], [76.4, 8294.0], [76.5, 8309.0], [76.6, 8338.0], [76.7, 8338.0], [76.8, 8360.0], [76.9, 8379.0], [77.0, 8395.0], [77.1, 8422.0], [77.2, 8426.0], [77.3, 8432.0], [77.4, 8454.0], [77.5, 8457.0], [77.6, 8467.0], [77.7, 8486.0], [77.8, 8497.0], [77.9, 8498.0], [78.0, 8505.0], [78.1, 8521.0], [78.2, 8534.0], [78.3, 8549.0], [78.4, 8561.0], [78.5, 8561.0], [78.6, 8586.0], [78.7, 8616.0], [78.8, 8635.0], [78.9, 8640.0], [79.0, 8707.0], [79.1, 8719.0], [79.2, 8727.0], [79.3, 8727.0], [79.4, 8728.0], [79.5, 8729.0], [79.6, 8731.0], [79.7, 8732.0], [79.8, 8733.0], [79.9, 8734.0], [80.0, 8742.0], [80.1, 8747.0], [80.2, 8754.0], [80.3, 8755.0], [80.4, 8766.0], [80.5, 8766.0], [80.6, 8768.0], [80.7, 8775.0], [80.8, 8780.0], [80.9, 8785.0], [81.0, 8792.0], [81.1, 8798.0], [81.2, 8814.0], [81.3, 8860.0], [81.4, 8866.0], [81.5, 8872.0], [81.6, 8872.0], [81.7, 8879.0], [81.8, 8899.0], [81.9, 8902.0], [82.0, 8927.0], [82.1, 8936.0], [82.2, 8940.0], [82.3, 8965.0], [82.4, 8970.0], [82.5, 8978.0], [82.6, 8984.0], [82.7, 8990.0], [82.8, 9005.0], [82.9, 9028.0], [83.0, 9031.0], [83.1, 9034.0], [83.2, 9045.0], [83.3, 9050.0], [83.4, 9066.0], [83.5, 9066.0], [83.6, 9074.0], [83.7, 9079.0], [83.8, 9117.0], [83.9, 9119.0], [84.0, 9120.0], [84.1, 9122.0], [84.2, 9130.0], [84.3, 9131.0], [84.4, 9133.0], [84.5, 9144.0], [84.6, 9147.0], [84.7, 9149.0], [84.8, 9152.0], [84.9, 9153.0], [85.0, 9171.0], [85.1, 9187.0], [85.2, 9196.0], [85.3, 9205.0], [85.4, 9220.0], [85.5, 9222.0], [85.6, 9235.0], [85.7, 9236.0], [85.8, 9238.0], [85.9, 9244.0], [86.0, 9258.0], [86.1, 9271.0], [86.2, 9295.0], [86.3, 9301.0], [86.4, 9306.0], [86.5, 9307.0], [86.6, 9315.0], [86.7, 9335.0], [86.8, 9344.0], [86.9, 9345.0], [87.0, 9356.0], [87.1, 9366.0], [87.2, 9376.0], [87.3, 9378.0], [87.4, 9385.0], [87.5, 9386.0], [87.6, 9403.0], [87.7, 9406.0], [87.8, 9436.0], [87.9, 9436.0], [88.0, 9453.0], [88.1, 9453.0], [88.2, 9475.0], [88.3, 9492.0], [88.4, 9496.0], [88.5, 9500.0], [88.6, 9513.0], [88.7, 9515.0], [88.8, 9528.0], [88.9, 9537.0], [89.0, 9547.0], [89.1, 9549.0], [89.2, 9570.0], [89.3, 9590.0], [89.4, 9600.0], [89.5, 9600.0], [89.6, 9606.0], [89.7, 9607.0], [89.8, 9607.0], [89.9, 9620.0], [90.0, 9624.0], [90.1, 9626.0], [90.2, 9636.0], [90.3, 9636.0], [90.4, 9638.0], [90.5, 9640.0], [90.6, 9641.0], [90.7, 9654.0], [90.8, 9654.0], [90.9, 9667.0], [91.0, 9679.0], [91.1, 9689.0], [91.2, 9730.0], [91.3, 9738.0], [91.4, 9743.0], [91.5, 9748.0], [91.6, 9754.0], [91.7, 9759.0], [91.8, 9763.0], [91.9, 9789.0], [92.0, 9812.0], [92.1, 9812.0], [92.2, 9826.0], [92.3, 9834.0], [92.4, 9844.0], [92.5, 9847.0], [92.6, 9854.0], [92.7, 9872.0], [92.8, 9873.0], [92.9, 9874.0], [93.0, 9875.0], [93.1, 9875.0], [93.2, 9882.0], [93.3, 9886.0], [93.4, 9916.0], [93.5, 9919.0], [93.6, 9924.0], [93.7, 9930.0], [93.8, 9937.0], [93.9, 9940.0], [94.0, 9950.0], [94.1, 9957.0], [94.2, 9960.0], [94.3, 9968.0], [94.4, 9987.0], [94.5, 9988.0], [94.6, 10002.0], [94.7, 10034.0], [94.8, 10039.0], [94.9, 10051.0], [95.0, 10052.0], [95.1, 10059.0], [95.2, 10068.0], [95.3, 10078.0], [95.4, 10082.0], [95.5, 10092.0], [95.6, 10092.0], [95.7, 10105.0], [95.8, 10132.0], [95.9, 10137.0], [96.0, 10176.0], [96.1, 10177.0], [96.2, 10192.0], [96.3, 10195.0], [96.4, 10221.0], [96.5, 10226.0], [96.6, 10231.0], [96.7, 10243.0], [96.8, 10289.0], [96.9, 10379.0], [97.0, 10421.0], [97.1, 10436.0], [97.2, 10456.0], [97.3, 10485.0], [97.4, 10541.0], [97.5, 10551.0], [97.6, 10622.0], [97.7, 10626.0], [97.8, 10656.0], [97.9, 10663.0], [98.0, 10665.0], [98.1, 10725.0], [98.2, 10752.0], [98.3, 10841.0], [98.4, 10904.0], [98.5, 10926.0], [98.6, 11013.0], [98.7, 11063.0], [98.8, 11131.0], [98.9, 11210.0], [99.0, 11394.0], [99.1, 11397.0], [99.2, 11793.0], [99.3, 11858.0], [99.4, 12486.0], [99.5, 12618.0], [99.6, 12889.0], [99.7, 12919.0], [99.8, 13566.0], [99.9, 15511.0]], "isOverall": false, "label": "https://localhost:44313/Listings", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 225.0, "series": [{"data": [[100.0, 225.0], [200.0, 45.0], [300.0, 46.0], [400.0, 7.0], [500.0, 12.0], [600.0, 20.0], [700.0, 8.0], [800.0, 8.0], [900.0, 10.0], [1000.0, 8.0], [1100.0, 20.0], [1200.0, 14.0], [1300.0, 22.0], [1400.0, 10.0], [1500.0, 18.0], [1600.0, 13.0], [1700.0, 10.0], [1800.0, 14.0], [1900.0, 17.0], [2000.0, 22.0], [2100.0, 18.0], [2200.0, 9.0], [2300.0, 11.0], [2400.0, 9.0], [2500.0, 6.0], [2600.0, 4.0], [2700.0, 4.0], [2800.0, 3.0], [2900.0, 2.0], [3000.0, 3.0], [3100.0, 4.0], [3300.0, 4.0], [3200.0, 8.0], [3400.0, 2.0], [3500.0, 5.0], [3600.0, 1.0], [3700.0, 2.0], [3800.0, 3.0], [3900.0, 2.0], [4000.0, 3.0], [4200.0, 8.0], [4100.0, 3.0], [4300.0, 4.0], [4500.0, 10.0], [4600.0, 10.0], [4400.0, 7.0], [4800.0, 9.0], [4700.0, 3.0], [5000.0, 3.0], [5100.0, 6.0], [4900.0, 3.0], [5300.0, 4.0], [5200.0, 9.0], [5600.0, 7.0], [5400.0, 2.0], [5500.0, 1.0], [5800.0, 2.0], [5700.0, 2.0], [6100.0, 4.0], [6000.0, 2.0], [5900.0, 5.0], [6300.0, 4.0], [6400.0, 1.0], [6500.0, 2.0], [6600.0, 1.0], [6700.0, 5.0], [6800.0, 5.0], [6900.0, 3.0], [7000.0, 3.0], [7100.0, 2.0], [7200.0, 6.0], [7300.0, 5.0], [7400.0, 1.0], [7500.0, 2.0], [7700.0, 3.0], [7800.0, 6.0], [7900.0, 3.0], [8000.0, 5.0], [8100.0, 5.0], [8700.0, 23.0], [8400.0, 10.0], [8500.0, 7.0], [8200.0, 4.0], [8300.0, 6.0], [8600.0, 4.0], [8800.0, 8.0], [9100.0, 16.0], [8900.0, 10.0], [9000.0, 10.0], [9200.0, 11.0], [9300.0, 14.0], [9500.0, 10.0], [9400.0, 10.0], [9600.0, 19.0], [9700.0, 9.0], [9800.0, 14.0], [9900.0, 13.0], [10100.0, 8.0], [10200.0, 5.0], [10000.0, 12.0], [10500.0, 3.0], [10600.0, 5.0], [10400.0, 4.0], [10700.0, 2.0], [10300.0, 1.0], [11000.0, 3.0], [10900.0, 2.0], [11100.0, 1.0], [10800.0, 1.0], [11200.0, 1.0], [11700.0, 1.0], [11300.0, 2.0], [11800.0, 1.0], [12400.0, 1.0], [12600.0, 1.0], [12800.0, 1.0], [12900.0, 1.0], [13500.0, 1.0], [15500.0, 1.0], [15700.0, 1.0]], "isOverall": false, "label": "https://localhost:44313/Listings", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 15700.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 131.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1.500ms"], [2, "Requests having \nresponse time > 1.500ms"], [3, "Requests in error"]], "maxY": 620.0, "series": [{"data": [[0.0, 324.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 131.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1.500ms", "isController": false}, {"data": [[2.0, 620.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1.500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.653324891E12, "maxY": 1.0, "series": [{"data": [[1.653324903E12, 1.0], [1.653324906E12, 1.0], [1.6533249255E12, 1.0], [1.6533249195E12, 1.0], [1.653324897E12, 1.0], [1.6533249225E12, 1.0], [1.6533249E12, 1.0], [1.6533249135E12, 1.0], [1.653324891E12, 1.0], [1.6533249165E12, 1.0], [1.653324894E12, 1.0], [1.65332493E12, 1.0], [1.6533249075E12, 1.0], [1.653324933E12, 1.0], [1.6533249105E12, 1.0], [1.6533249015E12, 1.0], [1.653324924E12, 1.0], [1.653324927E12, 1.0], [1.6533249045E12, 1.0], [1.6533248985E12, 1.0], [1.653324918E12, 1.0], [1.653324921E12, 1.0], [1.6533248925E12, 1.0], [1.6533249345E12, 1.0], [1.6533248955E12, 1.0], [1.653324915E12, 1.0], [1.653324909E12, 1.0], [1.6533249285E12, 1.0], [1.653324912E12, 1.0], [1.6533249315E12, 1.0]], "isOverall": false, "label": "parallel bzm - Parallel", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1500, "maxX": 1.6533249345E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 280.82258064516134, "minX": 1.0, "maxY": 15746.0, "series": [{"data": [[2.0, 283.0], [3.0, 280.82258064516134], [4.0, 308.65517241379314], [5.0, 606.5], [6.0, 9847.0], [7.0, 2188.2], [8.0, 1357.4], [9.0, 760.7826086956522], [10.0, 629.5172413793105], [11.0, 818.55], [12.0, 347.5], [13.0, 4073.8], [14.0, 5074.0], [15.0, 10541.0], [16.0, 11038.0], [17.0, 9968.0], [18.0, 11394.0], [19.0, 10841.0], [20.0, 5503.0], [21.0, 3678.0], [22.0, 1894.7142857142858], [23.0, 1629.875], [24.0, 9874.0], [25.0, 5482.5], [26.0, 3755.0], [27.0, 2509.8], [28.0, 739.8000000000001], [29.0, 3229.714285714286], [30.0, 868.5], [31.0, 7039.666666666667], [33.0, 5383.5], [32.0, 3033.5], [35.0, 1854.8000000000002], [34.0, 3070.0], [36.0, 3821.6666666666665], [37.0, 5538.5], [39.0, 6435.333333333333], [41.0, 9960.0], [40.0, 10137.0], [43.0, 4096.666666666666], [42.0, 9679.0], [44.0, 3265.75], [45.0, 9654.0], [47.0, 10626.0], [46.0, 9950.0], [49.0, 10082.0], [48.0, 9875.0], [51.0, 9789.0], [50.0, 9626.0], [53.0, 15746.0], [52.0, 9738.0], [55.0, 2841.6], [54.0, 15511.0], [57.0, 9120.0], [56.0, 9344.0], [59.0, 10231.0], [58.0, 9513.0], [61.0, 2296.4545454545455], [60.0, 2844.142857142857], [63.0, 4620.666666666666], [62.0, 2397.8888888888887], [65.0, 3707.0], [64.0, 4491.0], [67.0, 5784.0], [66.0, 10725.0], [71.0, 9515.0], [70.0, 10665.0], [69.0, 11131.0], [68.0, 10176.0], [75.0, 2481.0], [74.0, 6017.0], [73.0, 10379.0], [72.0, 10551.0], [76.0, 2649.714285714286], [77.0, 4181.666666666666], [78.0, 4033.4], [79.0, 4408.0], [83.0, 2781.0], [82.0, 3070.4], [81.0, 3646.4], [80.0, 4526.333333333334], [84.0, 4901.666666666666], [85.0, 5573.5], [86.0, 5285.5], [87.0, 4184.75], [88.0, 5780.0], [89.0, 5001.666666666666], [90.0, 4894.666666666666], [91.0, 10034.0], [92.0, 3900.25], [94.0, 6474.0], [95.0, 10656.0], [93.0, 8742.0], [96.0, 5001.0], [97.0, 3839.6666666666665], [99.0, 9730.0], [98.0, 8640.0], [100.0, 4071.0], [103.0, 10221.0], [102.0, 8727.0], [101.0, 9496.0], [107.0, 9528.0], [106.0, 10051.0], [105.0, 8561.0], [104.0, 8732.0], [109.0, 4086.0], [111.0, 4269.0], [110.0, 3979.0], [108.0, 8446.0], [113.0, 4550.5], [112.0, 2845.0], [114.0, 3199.0], [115.0, 5040.666666666666], [116.0, 2857.3333333333335], [117.0, 4130.25], [118.0, 5568.5], [119.0, 9872.0], [123.0, 2894.666666666667], [122.0, 4850.5], [121.0, 9812.0], [120.0, 9882.0], [124.0, 4788.5], [125.0, 6151.5], [127.0, 9307.0], [126.0, 8766.0], [128.0, 3968.0], [129.0, 4386.0], [135.0, 5923.333333333334], [134.0, 9904.0], [133.0, 9988.0], [132.0, 8927.0], [131.0, 7551.0], [130.0, 7909.0], [136.0, 5686.333333333334], [141.0, 5362.6], [140.0, 5846.333333333333], [142.0, 5908.5], [143.0, 10226.0], [139.0, 9315.0], [138.0, 9547.0], [137.0, 9636.0], [146.0, 5865.0], [145.0, 6295.0], [148.0, 5792.0], [147.0, 5492.5], [151.0, 3688.1249999999995], [150.0, 6029.0], [149.0, 9436.0], [144.0, 10177.0], [153.0, 4781.4], [152.0, 5696.25], [154.0, 6722.0], [155.0, 5524.333333333334], [157.0, 6733.0], [159.0, 8879.0], [158.0, 8902.0], [156.0, 9050.0], [162.0, 5287.75], [164.0, 6912.0], [163.0, 6174.0], [161.0, 5372.5], [167.0, 6802.0], [166.0, 9220.0], [165.0, 9130.0], [160.0, 8785.0], [171.0, 6934.0], [172.0, 7021.5], [174.0, 7086.0], [175.0, 6254.333333333333], [173.0, 9028.0], [170.0, 8792.0], [169.0, 8989.0], [168.0, 8727.0], [181.0, 6275.333333333333], [180.0, 7056.666666666666], [179.0, 7010.0], [183.0, 5884.0], [182.0, 9844.0], [178.0, 12919.0], [177.0, 12618.0], [176.0, 9222.0], [184.0, 7345.0], [187.0, 5452.0], [186.0, 7121.0], [185.0, 7138.5], [188.0, 6168.666666666667], [190.0, 4527.8], [191.0, 6577.5], [189.0, 3108.8], [193.0, 5453.0], [195.0, 5871.333333333333], [198.0, 5040.666666666667], [199.0, 4806.833333333333], [197.0, 8798.0], [196.0, 9133.0], [194.0, 9005.0], [192.0, 9475.0], [203.0, 4890.75], [204.0, 5725.0], [205.0, 6684.0], [207.0, 9144.0], [206.0, 9570.0], [202.0, 9378.0], [201.0, 8731.0], [200.0, 9031.0], [208.0, 6479.5], [210.0, 6896.0], [213.0, 6932.0], [215.0, 8600.0], [214.0, 9236.0], [212.0, 9271.0], [211.0, 9386.0], [209.0, 9306.0], [223.0, 8457.0], [222.0, 8278.0], [221.0, 8498.0], [220.0, 7920.0], [219.0, 8862.0], [218.0, 8990.0], [217.0, 8728.0], [216.0, 9066.0], [224.0, 5098.0], [225.0, 5508.0], [229.0, 5991.0], [228.0, 7356.666666666666], [231.0, 8620.0], [227.0, 8251.0], [226.0, 8360.0], [232.0, 5275.5], [239.0, 8719.0], [238.0, 8872.0], [237.0, 8872.0], [236.0, 8780.0], [235.0, 8616.0], [234.0, 8754.0], [233.0, 8729.0], [245.0, 4205.4], [244.0, 5303.0], [243.0, 5970.0], [242.0, 5567.666666666667], [241.0, 6251.333333333333], [240.0, 5321.25], [247.0, 6554.333333333333], [246.0, 3932.0], [248.0, 3981.0], [250.0, 5459.0], [252.0, 5613.666666666667], [253.0, 8445.5], [254.0, 4137.5], [255.0, 5608.5], [251.0, 8814.0], [249.0, 8775.0], [269.0, 8309.0], [258.0, 6969.0], [259.0, 4827.666666666667], [260.0, 6880.0], [261.0, 8497.0], [263.0, 8422.0], [257.0, 8768.0], [256.0, 8426.0], [262.0, 8454.0], [267.0, 2136.5], [271.0, 8294.0], [270.0, 8103.0], [268.0, 2325.0], [266.0, 2497.0], [265.0, 2478.0], [264.0, 7872.0], [275.0, 4043.5], [273.0, 3975.285714285714], [272.0, 3990.2], [279.0, 2197.0], [278.0, 7596.0], [274.0, 5353.666666666667], [276.0, 5148.5], [277.0, 3340.6666666666665], [281.0, 3978.0], [282.0, 5009.75], [283.0, 2029.0], [287.0, 3024.2], [280.0, 7975.0], [286.0, 4062.0], [285.0, 8549.0], [284.0, 2100.0], [302.0, 7807.0], [289.0, 4285.5], [288.0, 7877.0], [290.0, 7332.5], [291.0, 7213.0], [292.0, 4002.0], [294.0, 3182.0], [293.0, 2084.0], [295.0, 3291.0], [298.0, 6886.333333333333], [299.0, 3425.0], [297.0, 4819.5], [303.0, 2453.0], [296.0, 8033.0], [301.0, 3227.0], [300.0, 10507.0], [305.0, 4051.6666666666665], [304.0, 4704.5], [306.0, 5005.0], [309.0, 3975.6], [308.0, 5768.75], [307.0, 5316.333333333333], [310.0, 5629.75], [311.0, 2442.0], [313.0, 5580.666666666667], [314.0, 5613.0], [315.0, 5657.333333333333], [312.0, 6996.0], [318.0, 7232.25], [317.0, 2685.0], [316.0, 7244.0], [319.0, 4777.0], [322.0, 4682.5], [323.0, 3220.6], [325.0, 7101.0], [324.0, 7169.0], [321.0, 7211.0], [320.0, 7208.0], [1.0, 549.5454545454546]], "isOverall": false, "label": "https://localhost:44313/Listings", "isController": false}, {"data": [[110.30232558139534, 3802.957209302327]], "isOverall": false, "label": "https://localhost:44313/Listings-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 325.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 597.3333333333334, "minX": 1.653324891E12, "maxY": 2667713.3333333335, "series": [{"data": [[1.653324903E12, 1920885.3333333333], [1.653324906E12, 2134170.6666666665], [1.6533249255E12, 2667713.3333333335], [1.6533249195E12, 2186922.0], [1.653324897E12, 1173905.3333333333], [1.6533249225E12, 1974751.3333333333], [1.6533249E12, 1600729.3333333333], [1.6533249135E12, 2400308.6666666665], [1.653324891E12, 429306.6666666667], [1.6533249165E12, 2080152.6666666667], [1.653324894E12, 800339.3333333334], [1.65332493E12, 2612175.3333333335], [1.6533249075E12, 2347709.3333333335], [1.653324933E12, 2559677.3333333335], [1.6533249105E12, 2187428.6666666665], [1.6533249015E12, 1600780.0], [1.653324924E12, 2132904.0], [1.653324927E12, 2508598.0], [1.6533249045E12, 2027654.6666666667], [1.6533248985E12, 1173905.3333333333], [1.653324918E12, 2347557.3333333335], [1.653324921E12, 1865955.3333333333], [1.6533248925E12, 373515.3333333333], [1.6533249345E12, 2612327.3333333335], [1.6533248955E12, 800390.0], [1.653324915E12, 2028060.0], [1.653324909E12, 1867424.6666666667], [1.6533249285E12, 2453516.0], [1.653324912E12, 1813508.0], [1.6533249315E12, 2666244.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.653324903E12, 3072.0], [1.653324906E12, 3413.3333333333335], [1.6533249255E12, 4266.666666666667], [1.6533249195E12, 3498.6666666666665], [1.653324897E12, 1877.3333333333333], [1.6533249225E12, 3157.3333333333335], [1.6533249E12, 2560.0], [1.6533249135E12, 3840.0], [1.653324891E12, 682.6666666666666], [1.6533249165E12, 3328.0], [1.653324894E12, 1280.0], [1.65332493E12, 4181.333333333333], [1.6533249075E12, 3754.6666666666665], [1.653324933E12, 4096.0], [1.6533249105E12, 3498.6666666666665], [1.6533249015E12, 2560.0], [1.653324924E12, 3413.3333333333335], [1.653324927E12, 4010.6666666666665], [1.6533249045E12, 3242.6666666666665], [1.6533248985E12, 1877.3333333333333], [1.653324918E12, 3754.6666666666665], [1.653324921E12, 2986.6666666666665], [1.6533248925E12, 597.3333333333334], [1.6533249345E12, 4181.333333333333], [1.6533248955E12, 1280.0], [1.653324915E12, 3242.6666666666665], [1.653324909E12, 2986.6666666666665], [1.6533249285E12, 3925.3333333333335], [1.653324912E12, 2901.3333333333335], [1.6533249315E12, 4266.666666666667]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1500, "maxX": 1.6533249345E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 106.26666666666665, "minX": 1.653324891E12, "maxY": 10205.020833333332, "series": [{"data": [[1.653324903E12, 142.75], [1.653324906E12, 274.55], [1.6533249255E12, 5152.639999999999], [1.6533249195E12, 3852.121951219512], [1.653324897E12, 119.54545454545456], [1.6533249225E12, 4308.3513513513535], [1.6533249E12, 121.53333333333333], [1.6533249135E12, 1657.6666666666663], [1.653324891E12, 119.5], [1.6533249165E12, 2012.8717948717954], [1.653324894E12, 113.99999999999999], [1.65332493E12, 9612.897959183678], [1.6533249075E12, 326.13636363636374], [1.653324933E12, 10205.020833333332], [1.6533249105E12, 873.7073170731707], [1.6533249015E12, 125.09999999999998], [1.653324924E12, 5160.775], [1.653324927E12, 5905.531914893617], [1.6533249045E12, 151.07894736842107], [1.6533248985E12, 114.59090909090908], [1.653324918E12, 3641.2727272727275], [1.653324921E12, 4320.971428571428], [1.6533248925E12, 106.99999999999999], [1.6533249345E12, 9951.795918367347], [1.6533248955E12, 106.26666666666665], [1.653324915E12, 2000.1578947368416], [1.653324909E12, 534.8285714285716], [1.6533249285E12, 8973.065217391304], [1.653324912E12, 1504.147058823529], [1.6533249315E12, 9358.639999999998]], "isOverall": false, "label": "https://localhost:44313/Listings", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1500, "maxX": 1.6533249345E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 105.66666666666667, "minX": 1.653324891E12, "maxY": 10203.66666666667, "series": [{"data": [[1.653324903E12, 142.13888888888886], [1.653324906E12, 273.7250000000001], [1.6533249255E12, 5150.78], [1.6533249195E12, 3850.268292682928], [1.653324897E12, 119.09090909090911], [1.6533249225E12, 4306.9729729729725], [1.6533249E12, 120.93333333333332], [1.6533249135E12, 1656.8222222222225], [1.653324891E12, 119.125], [1.6533249165E12, 2012.051282051282], [1.653324894E12, 113.60000000000001], [1.65332493E12, 9611.938775510203], [1.6533249075E12, 325.15909090909105], [1.653324933E12, 10203.66666666667], [1.6533249105E12, 872.1463414634147], [1.6533249015E12, 124.66666666666667], [1.653324924E12, 5160.0], [1.653324927E12, 5904.404255319149], [1.6533249045E12, 150.50000000000006], [1.6533248985E12, 114.18181818181819], [1.653324918E12, 3640.40909090909], [1.653324921E12, 4320.114285714286], [1.6533248925E12, 106.57142857142857], [1.6533249345E12, 9949.591836734693], [1.6533248955E12, 105.66666666666667], [1.653324915E12, 1999.2368421052633], [1.653324909E12, 533.7142857142858], [1.6533249285E12, 8971.76086956522], [1.653324912E12, 1503.4411764705883], [1.6533249315E12, 9357.799999999997]], "isOverall": false, "label": "https://localhost:44313/Listings", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1500, "maxX": 1.6533249345E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 9.533333333333333, "minX": 1.653324891E12, "maxY": 81.4, "series": [{"data": [[1.653324903E12, 12.749999999999998], [1.653324906E12, 27.825], [1.6533249255E12, 48.57999999999999], [1.6533249195E12, 62.121951219512205], [1.653324897E12, 10.318181818181818], [1.6533249225E12, 50.21621621621621], [1.6533249E12, 10.7], [1.6533249135E12, 50.355555555555554], [1.653324891E12, 15.0], [1.6533249165E12, 53.12820512820512], [1.653324894E12, 10.133333333333333], [1.65332493E12, 45.9795918367347], [1.6533249075E12, 37.886363636363626], [1.653324933E12, 58.604166666666664], [1.6533249105E12, 57.65853658536586], [1.6533249015E12, 10.466666666666667], [1.653324924E12, 48.224999999999994], [1.653324927E12, 61.93617021276595], [1.6533249045E12, 13.052631578947366], [1.6533248985E12, 10.68181818181818], [1.653324918E12, 65.22727272727273], [1.653324921E12, 81.4], [1.6533248925E12, 10.571428571428573], [1.6533249345E12, 53.18367346938776], [1.6533248955E12, 9.533333333333333], [1.653324915E12, 62.68421052631579], [1.653324909E12, 35.971428571428575], [1.6533249285E12, 62.91304347826086], [1.653324912E12, 67.76470588235294], [1.6533249315E12, 59.42000000000001]], "isOverall": false, "label": "https://localhost:44313/Listings", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1500, "maxX": 1.6533249345E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 103.0, "minX": 1.653324891E12, "maxY": 15746.0, "series": [{"data": [[1.653324903E12, 169.0], [1.653324906E12, 377.0], [1.6533249255E12, 10507.0], [1.6533249195E12, 5331.0], [1.653324897E12, 180.0], [1.6533249225E12, 8739.0], [1.6533249E12, 143.0], [1.6533249135E12, 2538.0], [1.653324891E12, 142.0], [1.6533249165E12, 4557.0], [1.653324894E12, 132.0], [1.65332493E12, 13566.0], [1.6533249075E12, 447.0], [1.653324933E12, 15746.0], [1.6533249105E12, 1598.0], [1.6533249015E12, 173.0], [1.653324924E12, 7009.0], [1.653324927E12, 9131.0], [1.6533249045E12, 182.0], [1.6533248985E12, 150.0], [1.653324918E12, 6147.0], [1.653324921E12, 8053.0], [1.6533248925E12, 113.0], [1.6533249345E12, 11397.0], [1.6533248955E12, 110.0], [1.653324915E12, 3385.0], [1.653324909E12, 955.0], [1.6533249285E12, 11858.0], [1.653324912E12, 2124.0], [1.6533249315E12, 10622.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.653324903E12, 164.3], [1.653324906E12, 334.0], [1.6533249255E12, 7854.7], [1.6533249195E12, 4872.8], [1.653324897E12, 163.59999999999997], [1.6533249225E12, 5946.400000000001], [1.6533249E12, 138.8], [1.6533249135E12, 2428.6], [1.653324891E12, 142.0], [1.6533249165E12, 3577.0], [1.653324894E12, 129.0], [1.65332493E12, 12486.0], [1.6533249075E12, 391.0], [1.653324933E12, 11018.0], [1.6533249105E12, 1365.0], [1.6533249015E12, 166.20000000000007], [1.653324924E12, 6971.2], [1.653324927E12, 8622.4], [1.6533249045E12, 169.8], [1.6533248985E12, 126.6], [1.653324918E12, 4872.0], [1.653324921E12, 5399.6], [1.6533248925E12, 113.0], [1.6533249345E12, 10904.0], [1.6533248955E12, 109.4], [1.653324915E12, 3250.6], [1.653324909E12, 793.4], [1.6533249285E12, 9441.2], [1.653324912E12, 2052.5], [1.6533249315E12, 10175.9]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.653324903E12, 169.0], [1.653324906E12, 377.0], [1.6533249255E12, 10507.0], [1.6533249195E12, 5331.0], [1.653324897E12, 180.0], [1.6533249225E12, 8739.0], [1.6533249E12, 143.0], [1.6533249135E12, 2538.0], [1.653324891E12, 142.0], [1.6533249165E12, 4557.0], [1.653324894E12, 132.0], [1.65332493E12, 13566.0], [1.6533249075E12, 447.0], [1.653324933E12, 15746.0], [1.6533249105E12, 1598.0], [1.6533249015E12, 173.0], [1.653324924E12, 7009.0], [1.653324927E12, 9131.0], [1.6533249045E12, 182.0], [1.6533248985E12, 150.0], [1.653324918E12, 6147.0], [1.653324921E12, 8053.0], [1.6533248925E12, 113.0], [1.6533249345E12, 11397.0], [1.6533248955E12, 110.0], [1.653324915E12, 3385.0], [1.653324909E12, 955.0], [1.6533249285E12, 11858.0], [1.653324912E12, 2124.0], [1.6533249315E12, 10622.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.653324903E12, 167.3], [1.653324906E12, 364.24999999999994], [1.6533249255E12, 8269.299999999997], [1.6533249195E12, 5167.2], [1.653324897E12, 178.79999999999998], [1.6533249225E12, 6318.900000000004], [1.6533249E12, 141.35], [1.6533249135E12, 2483.3], [1.653324891E12, 142.0], [1.6533249165E12, 3845.0], [1.653324894E12, 132.0], [1.65332493E12, 12904.0], [1.6533249075E12, 410.0], [1.653324933E12, 13539.999999999987], [1.6533249105E12, 1521.6], [1.6533249015E12, 171.9], [1.653324924E12, 7005.5], [1.653324927E12, 8798.4], [1.6533249045E12, 178.2], [1.6533248985E12, 146.84999999999997], [1.653324918E12, 5475.5], [1.653324921E12, 5996.199999999989], [1.6533248925E12, 113.0], [1.6533249345E12, 11302.0], [1.6533248955E12, 110.0], [1.653324915E12, 3311.85], [1.653324909E12, 884.5999999999997], [1.6533249285E12, 11021.949999999997], [1.653324912E12, 2123.25], [1.6533249315E12, 10223.25]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.653324903E12, 115.0], [1.653324906E12, 143.0], [1.6533249255E12, 1899.0], [1.6533249195E12, 1379.0], [1.653324897E12, 105.0], [1.6533249225E12, 1896.0], [1.6533249E12, 109.0], [1.6533249135E12, 566.0], [1.653324891E12, 104.0], [1.6533249165E12, 1111.0], [1.653324894E12, 104.0], [1.65332493E12, 8727.0], [1.6533249075E12, 251.0], [1.653324933E12, 8742.0], [1.6533249105E12, 496.0], [1.6533249015E12, 111.0], [1.653324924E12, 1986.0], [1.653324927E12, 1921.0], [1.6533249045E12, 123.0], [1.6533248985E12, 106.0], [1.653324918E12, 1410.0], [1.653324921E12, 1345.0], [1.6533248925E12, 104.0], [1.6533249345E12, 9074.0], [1.6533248955E12, 103.0], [1.653324915E12, 1024.0], [1.653324909E12, 265.0], [1.6533249285E12, 7920.0], [1.653324912E12, 837.0], [1.6533249315E12, 7551.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.653324903E12, 140.5], [1.653324906E12, 270.0], [1.6533249255E12, 6926.0], [1.6533249195E12, 4510.0], [1.653324897E12, 113.0], [1.6533249225E12, 5242.0], [1.6533249E12, 117.0], [1.6533249135E12, 1791.0], [1.653324891E12, 118.5], [1.6533249165E12, 1560.0], [1.653324894E12, 111.0], [1.65332493E12, 9235.0], [1.6533249075E12, 321.5], [1.653324933E12, 10036.5], [1.6533249105E12, 777.0], [1.6533249015E12, 119.5], [1.653324924E12, 6315.5], [1.653324927E12, 7975.0], [1.6533249045E12, 151.0], [1.6533248985E12, 113.0], [1.653324918E12, 4183.5], [1.653324921E12, 4904.0], [1.6533248925E12, 106.0], [1.6533249345E12, 9854.0], [1.6533248955E12, 106.0], [1.653324915E12, 1383.0], [1.653324909E12, 570.0], [1.6533249285E12, 8861.0], [1.653324912E12, 1436.0], [1.6533249315E12, 9601.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1500, "maxX": 1.6533249345E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 108.0, "minX": 5.0, "maxY": 10092.0, "series": [{"data": [[32.0, 340.0], [33.0, 7469.0], [35.0, 9492.0], [37.0, 1929.0], [36.0, 8730.5], [39.0, 10092.0], [10.0, 108.0], [40.0, 8601.0], [14.0, 114.0], [15.0, 115.0], [19.0, 4695.0], [5.0, 110.0], [20.0, 118.5], [22.0, 4527.5], [23.0, 966.0], [24.0, 1136.5], [25.0, 5614.0], [26.0, 332.5], [27.0, 1089.0], [28.0, 5046.5], [29.0, 3255.5], [30.0, 4290.5], [31.0, 6707.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 40.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 107.0, "minX": 5.0, "maxY": 10091.0, "series": [{"data": [[32.0, 339.5], [33.0, 7464.5], [35.0, 9491.0], [37.0, 1928.0], [36.0, 8729.5], [39.0, 10091.0], [10.0, 107.0], [40.0, 8596.5], [14.0, 113.5], [15.0, 115.0], [19.0, 4694.0], [5.0, 110.0], [20.0, 118.0], [22.0, 4526.5], [23.0, 962.0], [24.0, 1135.5], [25.0, 5613.5], [26.0, 332.0], [27.0, 1088.5], [28.0, 5045.5], [29.0, 3255.0], [30.0, 4289.5], [31.0, 6706.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 40.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.6666666666666666, "minX": 1.6533248895E12, "maxY": 51.333333333333336, "series": [{"data": [[1.653324903E12, 25.333333333333332], [1.653324906E12, 30.0], [1.6533249255E12, 16.0], [1.6533249195E12, 51.333333333333336], [1.653324897E12, 15.333333333333334], [1.6533249225E12, 49.333333333333336], [1.6533249E12, 20.0], [1.6533249135E12, 40.666666666666664], [1.653324891E12, 4.666666666666667], [1.6533249165E12, 42.666666666666664], [1.653324894E12, 10.0], [1.6533249075E12, 30.0], [1.6533249105E12, 34.666666666666664], [1.6533249015E12, 20.0], [1.653324924E12, 50.0], [1.6533249045E12, 25.333333333333332], [1.6533248985E12, 14.666666666666666], [1.653324918E12, 51.333333333333336], [1.653324921E12, 50.0], [1.6533248925E12, 5.333333333333333], [1.6533248955E12, 10.0], [1.653324915E12, 44.666666666666664], [1.653324909E12, 34.0], [1.6533248895E12, 0.6666666666666666], [1.653324912E12, 40.666666666666664]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1500, "maxX": 1.6533249255E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 4.666666666666667, "minX": 1.653324891E12, "maxY": 33.333333333333336, "series": [{"data": [[1.653324903E12, 24.0], [1.653324906E12, 26.666666666666668], [1.6533249255E12, 33.333333333333336], [1.6533249195E12, 27.333333333333332], [1.653324897E12, 14.666666666666666], [1.6533249225E12, 24.666666666666668], [1.6533249E12, 20.0], [1.6533249135E12, 30.0], [1.653324891E12, 5.333333333333333], [1.6533249165E12, 26.0], [1.653324894E12, 10.0], [1.65332493E12, 32.666666666666664], [1.6533249075E12, 29.333333333333332], [1.653324933E12, 32.0], [1.6533249105E12, 27.333333333333332], [1.6533249015E12, 20.0], [1.653324924E12, 26.666666666666668], [1.653324927E12, 31.333333333333332], [1.6533249045E12, 25.333333333333332], [1.6533248985E12, 14.666666666666666], [1.653324918E12, 29.333333333333332], [1.653324921E12, 23.333333333333332], [1.6533248925E12, 4.666666666666667], [1.6533249345E12, 32.666666666666664], [1.6533248955E12, 10.0], [1.653324915E12, 25.333333333333332], [1.653324909E12, 23.333333333333332], [1.6533249285E12, 30.666666666666668], [1.653324912E12, 22.666666666666668], [1.6533249315E12, 33.333333333333336]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1500, "maxX": 1.6533249345E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 4.666666666666667, "minX": 1.653324891E12, "maxY": 33.333333333333336, "series": [{"data": [[1.653324903E12, 24.0], [1.653324906E12, 26.666666666666668], [1.6533249255E12, 33.333333333333336], [1.6533249195E12, 27.333333333333332], [1.653324897E12, 14.666666666666666], [1.6533249225E12, 24.666666666666668], [1.6533249E12, 20.0], [1.6533249135E12, 30.0], [1.653324891E12, 5.333333333333333], [1.6533249165E12, 26.0], [1.653324894E12, 10.0], [1.65332493E12, 32.666666666666664], [1.6533249075E12, 29.333333333333332], [1.653324933E12, 32.0], [1.6533249105E12, 27.333333333333332], [1.6533249015E12, 20.0], [1.653324924E12, 26.666666666666668], [1.653324927E12, 31.333333333333332], [1.6533249045E12, 25.333333333333332], [1.6533248985E12, 14.666666666666666], [1.653324918E12, 29.333333333333332], [1.653324921E12, 23.333333333333332], [1.6533248925E12, 4.666666666666667], [1.6533249345E12, 32.666666666666664], [1.6533248955E12, 10.0], [1.653324915E12, 25.333333333333332], [1.653324909E12, 23.333333333333332], [1.6533249285E12, 30.666666666666668], [1.653324912E12, 22.666666666666668], [1.6533249315E12, 33.333333333333336]], "isOverall": false, "label": "https://localhost:44313/Listings-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1500, "maxX": 1.6533249345E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 4.666666666666667, "minX": 1.653324891E12, "maxY": 33.333333333333336, "series": [{"data": [[1.653324903E12, 24.0], [1.653324906E12, 26.666666666666668], [1.6533249255E12, 33.333333333333336], [1.6533249195E12, 27.333333333333332], [1.653324897E12, 14.666666666666666], [1.6533249225E12, 24.666666666666668], [1.6533249E12, 20.0], [1.6533249135E12, 30.0], [1.653324891E12, 5.333333333333333], [1.6533249165E12, 26.0], [1.653324894E12, 10.0], [1.65332493E12, 32.666666666666664], [1.6533249075E12, 29.333333333333332], [1.653324933E12, 32.0], [1.6533249105E12, 27.333333333333332], [1.6533249015E12, 20.0], [1.653324924E12, 26.666666666666668], [1.653324927E12, 31.333333333333332], [1.6533249045E12, 25.333333333333332], [1.6533248985E12, 14.666666666666666], [1.653324918E12, 29.333333333333332], [1.653324921E12, 23.333333333333332], [1.6533248925E12, 4.666666666666667], [1.6533249345E12, 32.666666666666664], [1.6533248955E12, 10.0], [1.653324915E12, 25.333333333333332], [1.653324909E12, 23.333333333333332], [1.6533249285E12, 30.666666666666668], [1.653324912E12, 22.666666666666668], [1.6533249315E12, 33.333333333333336]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1500, "maxX": 1.6533249345E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

