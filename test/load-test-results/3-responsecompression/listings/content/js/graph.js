/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 102.0, "minX": 0.0, "maxY": 14006.0, "series": [{"data": [[0.0, 102.0], [0.1, 103.0], [0.2, 105.0], [0.3, 105.0], [0.4, 105.0], [0.5, 105.0], [0.6, 105.0], [0.7, 106.0], [0.8, 106.0], [0.9, 106.0], [1.0, 106.0], [1.1, 106.0], [1.2, 106.0], [1.3, 107.0], [1.4, 107.0], [1.5, 107.0], [1.6, 107.0], [1.7, 107.0], [1.8, 107.0], [1.9, 107.0], [2.0, 107.0], [2.1, 108.0], [2.2, 108.0], [2.3, 108.0], [2.4, 108.0], [2.5, 108.0], [2.6, 108.0], [2.7, 109.0], [2.8, 109.0], [2.9, 109.0], [3.0, 109.0], [3.1, 109.0], [3.2, 109.0], [3.3, 109.0], [3.4, 109.0], [3.5, 109.0], [3.6, 109.0], [3.7, 110.0], [3.8, 110.0], [3.9, 110.0], [4.0, 110.0], [4.1, 110.0], [4.2, 110.0], [4.3, 110.0], [4.4, 110.0], [4.5, 111.0], [4.6, 111.0], [4.7, 111.0], [4.8, 111.0], [4.9, 111.0], [5.0, 111.0], [5.1, 111.0], [5.2, 111.0], [5.3, 111.0], [5.4, 111.0], [5.5, 112.0], [5.6, 112.0], [5.7, 112.0], [5.8, 112.0], [5.9, 112.0], [6.0, 112.0], [6.1, 112.0], [6.2, 112.0], [6.3, 112.0], [6.4, 113.0], [6.5, 113.0], [6.6, 113.0], [6.7, 113.0], [6.8, 113.0], [6.9, 113.0], [7.0, 113.0], [7.1, 114.0], [7.2, 114.0], [7.3, 114.0], [7.4, 114.0], [7.5, 114.0], [7.6, 114.0], [7.7, 114.0], [7.8, 114.0], [7.9, 114.0], [8.0, 114.0], [8.1, 115.0], [8.2, 115.0], [8.3, 115.0], [8.4, 115.0], [8.5, 115.0], [8.6, 115.0], [8.7, 115.0], [8.8, 116.0], [8.9, 116.0], [9.0, 116.0], [9.1, 117.0], [9.2, 117.0], [9.3, 117.0], [9.4, 117.0], [9.5, 117.0], [9.6, 118.0], [9.7, 119.0], [9.8, 120.0], [9.9, 120.0], [10.0, 121.0], [10.1, 121.0], [10.2, 121.0], [10.3, 122.0], [10.4, 122.0], [10.5, 122.0], [10.6, 123.0], [10.7, 123.0], [10.8, 123.0], [10.9, 125.0], [11.0, 125.0], [11.1, 126.0], [11.2, 126.0], [11.3, 127.0], [11.4, 127.0], [11.5, 127.0], [11.6, 127.0], [11.7, 128.0], [11.8, 129.0], [11.9, 130.0], [12.0, 130.0], [12.1, 130.0], [12.2, 130.0], [12.3, 130.0], [12.4, 131.0], [12.5, 131.0], [12.6, 131.0], [12.7, 131.0], [12.8, 131.0], [12.9, 131.0], [13.0, 132.0], [13.1, 132.0], [13.2, 132.0], [13.3, 132.0], [13.4, 132.0], [13.5, 132.0], [13.6, 132.0], [13.7, 133.0], [13.8, 133.0], [13.9, 133.0], [14.0, 133.0], [14.1, 133.0], [14.2, 134.0], [14.3, 134.0], [14.4, 134.0], [14.5, 134.0], [14.6, 134.0], [14.7, 135.0], [14.8, 135.0], [14.9, 136.0], [15.0, 136.0], [15.1, 136.0], [15.2, 136.0], [15.3, 136.0], [15.4, 137.0], [15.5, 137.0], [15.6, 137.0], [15.7, 137.0], [15.8, 138.0], [15.9, 138.0], [16.0, 138.0], [16.1, 139.0], [16.2, 139.0], [16.3, 140.0], [16.4, 140.0], [16.5, 140.0], [16.6, 140.0], [16.7, 140.0], [16.8, 141.0], [16.9, 141.0], [17.0, 141.0], [17.1, 142.0], [17.2, 142.0], [17.3, 143.0], [17.4, 144.0], [17.5, 145.0], [17.6, 145.0], [17.7, 146.0], [17.8, 147.0], [17.9, 148.0], [18.0, 149.0], [18.1, 150.0], [18.2, 150.0], [18.3, 151.0], [18.4, 151.0], [18.5, 153.0], [18.6, 153.0], [18.7, 154.0], [18.8, 155.0], [18.9, 155.0], [19.0, 156.0], [19.1, 157.0], [19.2, 158.0], [19.3, 159.0], [19.4, 159.0], [19.5, 160.0], [19.6, 160.0], [19.7, 161.0], [19.8, 161.0], [19.9, 162.0], [20.0, 162.0], [20.1, 163.0], [20.2, 163.0], [20.3, 163.0], [20.4, 164.0], [20.5, 165.0], [20.6, 166.0], [20.7, 167.0], [20.8, 171.0], [20.9, 174.0], [21.0, 180.0], [21.1, 180.0], [21.2, 181.0], [21.3, 181.0], [21.4, 182.0], [21.5, 183.0], [21.6, 183.0], [21.7, 184.0], [21.8, 184.0], [21.9, 185.0], [22.0, 188.0], [22.1, 188.0], [22.2, 188.0], [22.3, 188.0], [22.4, 189.0], [22.5, 191.0], [22.6, 192.0], [22.7, 194.0], [22.8, 195.0], [22.9, 196.0], [23.0, 196.0], [23.1, 196.0], [23.2, 197.0], [23.3, 198.0], [23.4, 200.0], [23.5, 200.0], [23.6, 201.0], [23.7, 204.0], [23.8, 205.0], [23.9, 205.0], [24.0, 206.0], [24.1, 207.0], [24.2, 208.0], [24.3, 208.0], [24.4, 209.0], [24.5, 210.0], [24.6, 211.0], [24.7, 212.0], [24.8, 212.0], [24.9, 213.0], [25.0, 213.0], [25.1, 213.0], [25.2, 213.0], [25.3, 214.0], [25.4, 214.0], [25.5, 215.0], [25.6, 215.0], [25.7, 215.0], [25.8, 215.0], [25.9, 217.0], [26.0, 218.0], [26.1, 219.0], [26.2, 219.0], [26.3, 220.0], [26.4, 220.0], [26.5, 220.0], [26.6, 222.0], [26.7, 223.0], [26.8, 225.0], [26.9, 226.0], [27.0, 226.0], [27.1, 227.0], [27.2, 227.0], [27.3, 228.0], [27.4, 228.0], [27.5, 229.0], [27.6, 230.0], [27.7, 231.0], [27.8, 232.0], [27.9, 232.0], [28.0, 233.0], [28.1, 234.0], [28.2, 235.0], [28.3, 235.0], [28.4, 235.0], [28.5, 236.0], [28.6, 236.0], [28.7, 238.0], [28.8, 239.0], [28.9, 239.0], [29.0, 240.0], [29.1, 242.0], [29.2, 244.0], [29.3, 244.0], [29.4, 247.0], [29.5, 252.0], [29.6, 252.0], [29.7, 252.0], [29.8, 253.0], [29.9, 254.0], [30.0, 255.0], [30.1, 259.0], [30.2, 260.0], [30.3, 264.0], [30.4, 266.0], [30.5, 268.0], [30.6, 268.0], [30.7, 269.0], [30.8, 271.0], [30.9, 273.0], [31.0, 276.0], [31.1, 277.0], [31.2, 284.0], [31.3, 289.0], [31.4, 290.0], [31.5, 290.0], [31.6, 291.0], [31.7, 291.0], [31.8, 293.0], [31.9, 293.0], [32.0, 295.0], [32.1, 304.0], [32.2, 306.0], [32.3, 313.0], [32.4, 315.0], [32.5, 315.0], [32.6, 318.0], [32.7, 319.0], [32.8, 326.0], [32.9, 336.0], [33.0, 337.0], [33.1, 340.0], [33.2, 345.0], [33.3, 346.0], [33.4, 349.0], [33.5, 349.0], [33.6, 352.0], [33.7, 355.0], [33.8, 361.0], [33.9, 364.0], [34.0, 365.0], [34.1, 368.0], [34.2, 376.0], [34.3, 377.0], [34.4, 381.0], [34.5, 382.0], [34.6, 384.0], [34.7, 391.0], [34.8, 396.0], [34.9, 400.0], [35.0, 406.0], [35.1, 409.0], [35.2, 412.0], [35.3, 412.0], [35.4, 418.0], [35.5, 423.0], [35.6, 430.0], [35.7, 433.0], [35.8, 435.0], [35.9, 436.0], [36.0, 444.0], [36.1, 444.0], [36.2, 445.0], [36.3, 445.0], [36.4, 448.0], [36.5, 449.0], [36.6, 450.0], [36.7, 452.0], [36.8, 467.0], [36.9, 470.0], [37.0, 479.0], [37.1, 479.0], [37.2, 486.0], [37.3, 489.0], [37.4, 505.0], [37.5, 508.0], [37.6, 520.0], [37.7, 521.0], [37.8, 538.0], [37.9, 551.0], [38.0, 566.0], [38.1, 574.0], [38.2, 595.0], [38.3, 605.0], [38.4, 607.0], [38.5, 614.0], [38.6, 641.0], [38.7, 648.0], [38.8, 650.0], [38.9, 654.0], [39.0, 665.0], [39.1, 670.0], [39.2, 676.0], [39.3, 679.0], [39.4, 687.0], [39.5, 691.0], [39.6, 700.0], [39.7, 709.0], [39.8, 716.0], [39.9, 718.0], [40.0, 722.0], [40.1, 772.0], [40.2, 772.0], [40.3, 780.0], [40.4, 780.0], [40.5, 783.0], [40.6, 784.0], [40.7, 788.0], [40.8, 789.0], [40.9, 799.0], [41.0, 799.0], [41.1, 802.0], [41.2, 803.0], [41.3, 805.0], [41.4, 811.0], [41.5, 815.0], [41.6, 826.0], [41.7, 832.0], [41.8, 833.0], [41.9, 834.0], [42.0, 835.0], [42.1, 835.0], [42.2, 838.0], [42.3, 852.0], [42.4, 853.0], [42.5, 859.0], [42.6, 864.0], [42.7, 880.0], [42.8, 880.0], [42.9, 889.0], [43.0, 903.0], [43.1, 904.0], [43.2, 924.0], [43.3, 938.0], [43.4, 939.0], [43.5, 945.0], [43.6, 945.0], [43.7, 953.0], [43.8, 969.0], [43.9, 971.0], [44.0, 994.0], [44.1, 1007.0], [44.2, 1008.0], [44.3, 1011.0], [44.4, 1024.0], [44.5, 1026.0], [44.6, 1031.0], [44.7, 1033.0], [44.8, 1037.0], [44.9, 1037.0], [45.0, 1042.0], [45.1, 1048.0], [45.2, 1050.0], [45.3, 1054.0], [45.4, 1059.0], [45.5, 1061.0], [45.6, 1062.0], [45.7, 1066.0], [45.8, 1071.0], [45.9, 1074.0], [46.0, 1075.0], [46.1, 1077.0], [46.2, 1081.0], [46.3, 1082.0], [46.4, 1086.0], [46.5, 1088.0], [46.6, 1092.0], [46.7, 1107.0], [46.8, 1108.0], [46.9, 1110.0], [47.0, 1112.0], [47.1, 1115.0], [47.2, 1120.0], [47.3, 1120.0], [47.4, 1120.0], [47.5, 1129.0], [47.6, 1130.0], [47.7, 1130.0], [47.8, 1142.0], [47.9, 1143.0], [48.0, 1144.0], [48.1, 1154.0], [48.2, 1157.0], [48.3, 1162.0], [48.4, 1166.0], [48.5, 1168.0], [48.6, 1173.0], [48.7, 1175.0], [48.8, 1186.0], [48.9, 1187.0], [49.0, 1191.0], [49.1, 1204.0], [49.2, 1204.0], [49.3, 1205.0], [49.4, 1210.0], [49.5, 1224.0], [49.6, 1225.0], [49.7, 1233.0], [49.8, 1234.0], [49.9, 1238.0], [50.0, 1240.0], [50.1, 1244.0], [50.2, 1245.0], [50.3, 1245.0], [50.4, 1247.0], [50.5, 1252.0], [50.6, 1255.0], [50.7, 1264.0], [50.8, 1267.0], [50.9, 1283.0], [51.0, 1288.0], [51.1, 1292.0], [51.2, 1298.0], [51.3, 1300.0], [51.4, 1301.0], [51.5, 1301.0], [51.6, 1301.0], [51.7, 1312.0], [51.8, 1313.0], [51.9, 1318.0], [52.0, 1320.0], [52.1, 1326.0], [52.2, 1337.0], [52.3, 1342.0], [52.4, 1360.0], [52.5, 1369.0], [52.6, 1380.0], [52.7, 1382.0], [52.8, 1383.0], [52.9, 1385.0], [53.0, 1391.0], [53.1, 1391.0], [53.2, 1394.0], [53.3, 1394.0], [53.4, 1398.0], [53.5, 1402.0], [53.6, 1403.0], [53.7, 1404.0], [53.8, 1405.0], [53.9, 1406.0], [54.0, 1407.0], [54.1, 1411.0], [54.2, 1416.0], [54.3, 1419.0], [54.4, 1419.0], [54.5, 1423.0], [54.6, 1431.0], [54.7, 1441.0], [54.8, 1444.0], [54.9, 1445.0], [55.0, 1449.0], [55.1, 1458.0], [55.2, 1464.0], [55.3, 1468.0], [55.4, 1478.0], [55.5, 1497.0], [55.6, 1513.0], [55.7, 1513.0], [55.8, 1515.0], [55.9, 1523.0], [56.0, 1527.0], [56.1, 1530.0], [56.2, 1537.0], [56.3, 1545.0], [56.4, 1548.0], [56.5, 1552.0], [56.6, 1558.0], [56.7, 1560.0], [56.8, 1575.0], [56.9, 1576.0], [57.0, 1577.0], [57.1, 1581.0], [57.2, 1584.0], [57.3, 1585.0], [57.4, 1597.0], [57.5, 1601.0], [57.6, 1605.0], [57.7, 1620.0], [57.8, 1626.0], [57.9, 1636.0], [58.0, 1636.0], [58.1, 1637.0], [58.2, 1655.0], [58.3, 1666.0], [58.4, 1668.0], [58.5, 1672.0], [58.6, 1672.0], [58.7, 1678.0], [58.8, 1685.0], [58.9, 1698.0], [59.0, 1705.0], [59.1, 1706.0], [59.2, 1706.0], [59.3, 1706.0], [59.4, 1716.0], [59.5, 1717.0], [59.6, 1721.0], [59.7, 1722.0], [59.8, 1727.0], [59.9, 1727.0], [60.0, 1739.0], [60.1, 1747.0], [60.2, 1752.0], [60.3, 1758.0], [60.4, 1760.0], [60.5, 1767.0], [60.6, 1770.0], [60.7, 1770.0], [60.8, 1778.0], [60.9, 1783.0], [61.0, 1784.0], [61.1, 1810.0], [61.2, 1818.0], [61.3, 1822.0], [61.4, 1827.0], [61.5, 1837.0], [61.6, 1843.0], [61.7, 1872.0], [61.8, 1876.0], [61.9, 1878.0], [62.0, 1881.0], [62.1, 1881.0], [62.2, 1882.0], [62.3, 1883.0], [62.4, 1885.0], [62.5, 1888.0], [62.6, 1899.0], [62.7, 1923.0], [62.8, 1924.0], [62.9, 1926.0], [63.0, 1933.0], [63.1, 1938.0], [63.2, 1941.0], [63.3, 1954.0], [63.4, 1957.0], [63.5, 1958.0], [63.6, 1959.0], [63.7, 1960.0], [63.8, 1963.0], [63.9, 1970.0], [64.0, 1975.0], [64.1, 1990.0], [64.2, 1997.0], [64.3, 1999.0], [64.4, 2005.0], [64.5, 2006.0], [64.6, 2014.0], [64.7, 2017.0], [64.8, 2018.0], [64.9, 2021.0], [65.0, 2028.0], [65.1, 2029.0], [65.2, 2052.0], [65.3, 2052.0], [65.4, 2062.0], [65.5, 2069.0], [65.6, 2073.0], [65.7, 2078.0], [65.8, 2081.0], [65.9, 2081.0], [66.0, 2099.0], [66.1, 2112.0], [66.2, 2113.0], [66.3, 2119.0], [66.4, 2126.0], [66.5, 2128.0], [66.6, 2132.0], [66.7, 2156.0], [66.8, 2160.0], [66.9, 2174.0], [67.0, 2182.0], [67.1, 2189.0], [67.2, 2217.0], [67.3, 2220.0], [67.4, 2226.0], [67.5, 2231.0], [67.6, 2248.0], [67.7, 2265.0], [67.8, 2267.0], [67.9, 2268.0], [68.0, 2283.0], [68.1, 2296.0], [68.2, 2303.0], [68.3, 2336.0], [68.4, 2362.0], [68.5, 2368.0], [68.6, 2414.0], [68.7, 2424.0], [68.8, 2428.0], [68.9, 2438.0], [69.0, 2467.0], [69.1, 2510.0], [69.2, 2513.0], [69.3, 2731.0], [69.4, 2819.0], [69.5, 2856.0], [69.6, 2864.0], [69.7, 2913.0], [69.8, 3108.0], [69.9, 3117.0], [70.0, 3190.0], [70.1, 3201.0], [70.2, 3265.0], [70.3, 3314.0], [70.4, 3326.0], [70.5, 3382.0], [70.6, 3448.0], [70.7, 4480.0], [70.8, 4546.0], [70.9, 4558.0], [71.0, 4576.0], [71.1, 4808.0], [71.2, 4836.0], [71.3, 4859.0], [71.4, 4898.0], [71.5, 4915.0], [71.6, 4930.0], [71.7, 4938.0], [71.8, 4946.0], [71.9, 5114.0], [72.0, 5574.0], [72.1, 5729.0], [72.2, 5781.0], [72.3, 5792.0], [72.4, 5915.0], [72.5, 5933.0], [72.6, 5940.0], [72.7, 5963.0], [72.8, 5965.0], [72.9, 5975.0], [73.0, 5980.0], [73.1, 5994.0], [73.2, 6000.0], [73.3, 6001.0], [73.4, 6022.0], [73.5, 6035.0], [73.6, 6053.0], [73.7, 6108.0], [73.8, 6114.0], [73.9, 6118.0], [74.0, 6135.0], [74.1, 6138.0], [74.2, 6153.0], [74.3, 6154.0], [74.4, 6172.0], [74.5, 6173.0], [74.6, 6180.0], [74.7, 6191.0], [74.8, 6228.0], [74.9, 6270.0], [75.0, 6297.0], [75.1, 6302.0], [75.2, 6306.0], [75.3, 6345.0], [75.4, 6385.0], [75.5, 6495.0], [75.6, 6510.0], [75.7, 6510.0], [75.8, 6521.0], [75.9, 6585.0], [76.0, 6613.0], [76.1, 6637.0], [76.2, 6760.0], [76.3, 6805.0], [76.4, 6917.0], [76.5, 6933.0], [76.6, 6985.0], [76.7, 7074.0], [76.8, 7085.0], [76.9, 7100.0], [77.0, 7113.0], [77.1, 7140.0], [77.2, 7156.0], [77.3, 7158.0], [77.4, 7184.0], [77.5, 7193.0], [77.6, 7197.0], [77.7, 7201.0], [77.8, 7247.0], [77.9, 7248.0], [78.0, 7253.0], [78.1, 7262.0], [78.2, 7265.0], [78.3, 7267.0], [78.4, 7278.0], [78.5, 7300.0], [78.6, 7306.0], [78.7, 7356.0], [78.8, 7357.0], [78.9, 7358.0], [79.0, 7365.0], [79.1, 7407.0], [79.2, 7411.0], [79.3, 7412.0], [79.4, 7422.0], [79.5, 7430.0], [79.6, 7468.0], [79.7, 7474.0], [79.8, 7483.0], [79.9, 7489.0], [80.0, 7508.0], [80.1, 7510.0], [80.2, 7517.0], [80.3, 7518.0], [80.4, 7520.0], [80.5, 7523.0], [80.6, 7534.0], [80.7, 7538.0], [80.8, 7539.0], [80.9, 7540.0], [81.0, 7542.0], [81.1, 7548.0], [81.2, 7551.0], [81.3, 7552.0], [81.4, 7558.0], [81.5, 7559.0], [81.6, 7560.0], [81.7, 7564.0], [81.8, 7576.0], [81.9, 7578.0], [82.0, 7579.0], [82.1, 7579.0], [82.2, 7590.0], [82.3, 7598.0], [82.4, 7602.0], [82.5, 7603.0], [82.6, 7608.0], [82.7, 7615.0], [82.8, 7616.0], [82.9, 7631.0], [83.0, 7638.0], [83.1, 7642.0], [83.2, 7643.0], [83.3, 7666.0], [83.4, 7668.0], [83.5, 7672.0], [83.6, 7676.0], [83.7, 7686.0], [83.8, 7692.0], [83.9, 7693.0], [84.0, 7695.0], [84.1, 7707.0], [84.2, 7708.0], [84.3, 7710.0], [84.4, 7712.0], [84.5, 7715.0], [84.6, 7716.0], [84.7, 7725.0], [84.8, 7727.0], [84.9, 7736.0], [85.0, 7741.0], [85.1, 7745.0], [85.2, 7748.0], [85.3, 7752.0], [85.4, 7766.0], [85.5, 7768.0], [85.6, 7771.0], [85.7, 7775.0], [85.8, 7777.0], [85.9, 7783.0], [86.0, 7783.0], [86.1, 7787.0], [86.2, 7791.0], [86.3, 7792.0], [86.4, 7797.0], [86.5, 7800.0], [86.6, 7801.0], [86.7, 7806.0], [86.8, 7815.0], [86.9, 7817.0], [87.0, 7826.0], [87.1, 7831.0], [87.2, 7834.0], [87.3, 7835.0], [87.4, 7846.0], [87.5, 7847.0], [87.6, 7852.0], [87.7, 7853.0], [87.8, 7855.0], [87.9, 7858.0], [88.0, 7863.0], [88.1, 7865.0], [88.2, 7871.0], [88.3, 7872.0], [88.4, 7881.0], [88.5, 7888.0], [88.6, 7890.0], [88.7, 7896.0], [88.8, 7899.0], [88.9, 7907.0], [89.0, 7914.0], [89.1, 7931.0], [89.2, 7934.0], [89.3, 7935.0], [89.4, 7938.0], [89.5, 7939.0], [89.6, 7940.0], [89.7, 7941.0], [89.8, 7941.0], [89.9, 7945.0], [90.0, 7955.0], [90.1, 7955.0], [90.2, 7958.0], [90.3, 7958.0], [90.4, 7965.0], [90.5, 7969.0], [90.6, 7971.0], [90.7, 7974.0], [90.8, 7975.0], [90.9, 7977.0], [91.0, 7983.0], [91.1, 7989.0], [91.2, 7995.0], [91.3, 7995.0], [91.4, 8004.0], [91.5, 8007.0], [91.6, 8013.0], [91.7, 8013.0], [91.8, 8022.0], [91.9, 8024.0], [92.0, 8038.0], [92.1, 8041.0], [92.2, 8047.0], [92.3, 8047.0], [92.4, 8063.0], [92.5, 8066.0], [92.6, 8067.0], [92.7, 8068.0], [92.8, 8090.0], [92.9, 8094.0], [93.0, 8095.0], [93.1, 8097.0], [93.2, 8105.0], [93.3, 8107.0], [93.4, 8119.0], [93.5, 8122.0], [93.6, 8126.0], [93.7, 8138.0], [93.8, 8139.0], [93.9, 8148.0], [94.0, 8157.0], [94.1, 8161.0], [94.2, 8178.0], [94.3, 8187.0], [94.4, 8193.0], [94.5, 8196.0], [94.6, 8210.0], [94.7, 8223.0], [94.8, 8224.0], [94.9, 8228.0], [95.0, 8228.0], [95.1, 8238.0], [95.2, 8247.0], [95.3, 8254.0], [95.4, 8258.0], [95.5, 8260.0], [95.6, 8260.0], [95.7, 8307.0], [95.8, 8326.0], [95.9, 8327.0], [96.0, 8346.0], [96.1, 8402.0], [96.2, 8420.0], [96.3, 8421.0], [96.4, 8434.0], [96.5, 8442.0], [96.6, 8471.0], [96.7, 8473.0], [96.8, 8488.0], [96.9, 8526.0], [97.0, 8538.0], [97.1, 8539.0], [97.2, 8544.0], [97.3, 8592.0], [97.4, 8609.0], [97.5, 8667.0], [97.6, 8696.0], [97.7, 8701.0], [97.8, 8716.0], [97.9, 8723.0], [98.0, 8745.0], [98.1, 8746.0], [98.2, 8777.0], [98.3, 8790.0], [98.4, 8876.0], [98.5, 8899.0], [98.6, 8915.0], [98.7, 8969.0], [98.8, 9030.0], [98.9, 9037.0], [99.0, 9087.0], [99.1, 9241.0], [99.2, 9743.0], [99.3, 11433.0], [99.4, 11691.0], [99.5, 12766.0], [99.6, 12811.0], [99.7, 12888.0], [99.8, 13436.0], [99.9, 13636.0]], "isOverall": false, "label": "https://localhost:44313/Listings", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 251.0, "series": [{"data": [[600.0, 14.0], [700.0, 16.0], [800.0, 21.0], [900.0, 12.0], [1000.0, 27.0], [1100.0, 26.0], [1200.0, 24.0], [1300.0, 24.0], [1400.0, 22.0], [1500.0, 21.0], [1600.0, 16.0], [1700.0, 22.0], [1800.0, 17.0], [1900.0, 19.0], [2000.0, 18.0], [2100.0, 12.0], [2200.0, 11.0], [2300.0, 4.0], [2400.0, 5.0], [2500.0, 2.0], [2700.0, 2.0], [2800.0, 3.0], [2900.0, 1.0], [3100.0, 3.0], [3200.0, 2.0], [3300.0, 3.0], [3400.0, 1.0], [4100.0, 1.0], [4500.0, 3.0], [4400.0, 1.0], [4800.0, 4.0], [4900.0, 4.0], [5100.0, 1.0], [5200.0, 1.0], [5500.0, 1.0], [5700.0, 3.0], [5900.0, 8.0], [6000.0, 6.0], [6100.0, 12.0], [6300.0, 4.0], [6200.0, 3.0], [6500.0, 4.0], [6600.0, 3.0], [6400.0, 1.0], [6900.0, 3.0], [6800.0, 1.0], [6700.0, 1.0], [7100.0, 9.0], [7000.0, 2.0], [7400.0, 9.0], [7200.0, 8.0], [7300.0, 7.0], [7600.0, 19.0], [7500.0, 26.0], [7700.0, 25.0], [7900.0, 27.0], [7800.0, 26.0], [8000.0, 19.0], [8100.0, 15.0], [8200.0, 12.0], [8300.0, 5.0], [8400.0, 8.0], [8500.0, 5.0], [8600.0, 4.0], [8700.0, 7.0], [8800.0, 2.0], [8900.0, 3.0], [9000.0, 3.0], [9200.0, 1.0], [9700.0, 1.0], [11400.0, 1.0], [11600.0, 1.0], [12700.0, 1.0], [12800.0, 2.0], [13600.0, 1.0], [13400.0, 1.0], [14000.0, 1.0], [100.0, 251.0], [200.0, 94.0], [300.0, 30.0], [400.0, 26.0], [500.0, 10.0]], "isOverall": false, "label": "https://localhost:44313/Listings", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 14000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 196.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1.500ms"], [2, "Requests having \nresponse time > 1.500ms"], [3, "Requests in error"]], "maxY": 478.0, "series": [{"data": [[0.0, 401.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 196.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1.500ms", "isController": false}, {"data": [[2.0, 478.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1.500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.653326964E12, "maxY": 1.0, "series": [{"data": [[1.6533269715E12, 1.0], [1.653326994E12, 1.0], [1.6533269745E12, 1.0], [1.653326997E12, 1.0], [1.6533269655E12, 1.0], [1.653326988E12, 1.0], [1.6533269685E12, 1.0], [1.653326991E12, 1.0], [1.653326982E12, 1.0], [1.6533270045E12, 1.0], [1.653326985E12, 1.0], [1.6533269985E12, 1.0], [1.653326979E12, 1.0], [1.6533270015E12, 1.0], [1.6533269925E12, 1.0], [1.653326973E12, 1.0], [1.6533269955E12, 1.0], [1.653326976E12, 1.0], [1.653326967E12, 1.0], [1.6533269895E12, 1.0], [1.65332697E12, 1.0], [1.653327003E12, 1.0], [1.6533269835E12, 1.0], [1.653327006E12, 1.0], [1.653326964E12, 1.0], [1.6533269865E12, 1.0], [1.6533269775E12, 1.0], [1.653327E12, 1.0], [1.6533269805E12, 1.0]], "isOverall": false, "label": "parallel bzm - Parallel", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1500, "maxX": 1.653327006E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 114.0666666666667, "minX": 1.0, "maxY": 14006.0, "series": [{"data": [[2.0, 114.0666666666667], [3.0, 121.3090909090909], [4.0, 504.26984126984127], [5.0, 454.4230769230769], [6.0, 502.43478260869574], [7.0, 403.75], [8.0, 518.1111111111112], [9.0, 894.4545454545455], [10.0, 1513.6666666666665], [11.0, 909.8461538461538], [12.0, 1017.6363636363637], [13.0, 1095.0], [14.0, 2245.0], [15.0, 2287.75], [16.0, 1270.75], [17.0, 1298.125], [18.0, 1081.6666666666665], [19.0, 1395.5], [20.0, 2422.75], [21.0, 2291.0], [22.0, 626.0], [23.0, 5084.333333333333], [24.0, 4220.5], [25.0, 7179.0], [26.0, 14006.0], [27.0, 2825.0], [28.0, 2098.0], [29.0, 2335.25], [30.0, 2944.3333333333335], [31.0, 3894.0], [32.0, 2124.8], [33.0, 7503.0], [35.0, 7113.0], [34.0, 6933.0], [37.0, 7074.0], [36.0, 11691.0], [39.0, 9241.0], [38.0, 7559.0], [41.0, 7955.0], [40.0, 7552.0], [43.0, 7608.0], [42.0, 7941.0], [45.0, 4523.5], [44.0, 8592.0], [47.0, 3440.3333333333335], [46.0, 3413.3333333333335], [48.0, 1964.857142857143], [49.0, 4472.0], [50.0, 1790.8888888888887], [51.0, 1861.2222222222222], [52.0, 2088.285714285714], [53.0, 1803.875], [55.0, 8247.0], [54.0, 7540.0], [56.0, 3504.75], [57.0, 7489.0], [59.0, 7939.0], [58.0, 6760.0], [60.0, 5190.0], [61.0, 7763.0], [62.0, 4327.5], [63.0, 8178.0], [65.0, 2923.0], [66.0, 2867.0], [64.0, 4800.5], [67.0, 2806.8], [68.0, 2469.2], [69.0, 3601.3333333333335], [71.0, 3406.3333333333335], [70.0, 7899.0], [72.0, 1981.6666666666665], [74.0, 1984.4285714285716], [75.0, 4100.25], [73.0, 3660.0], [77.0, 2095.25], [76.0, 2370.714285714286], [78.0, 1832.625], [79.0, 7855.0], [80.0, 7833.5], [83.0, 2819.0], [82.0, 7972.0], [81.0, 7995.0], [84.0, 4170.0], [87.0, 7745.0], [86.0, 12766.0], [85.0, 8115.0], [90.0, 3411.75], [91.0, 8745.0], [89.0, 13636.0], [88.0, 7958.0], [95.0, 3858.6], [93.0, 6017.25], [92.0, 1061.0], [94.0, 4963.0], [99.0, 3587.25], [98.0, 3656.0], [97.0, 3324.0], [96.0, 5957.5], [103.0, 1941.4444444444443], [102.0, 7579.0], [101.0, 7642.0], [100.0, 8327.0], [104.0, 2463.4], [107.0, 2411.4], [106.0, 2916.6666666666665], [105.0, 2778.4], [108.0, 3439.0], [110.0, 4457.5], [111.0, 7768.0], [109.0, 7510.0], [115.0, 3687.6666666666665], [114.0, 4312.0], [113.0, 7564.0], [112.0, 8148.0], [116.0, 4255.0], [119.0, 7365.0], [118.0, 8041.0], [117.0, 8013.0], [120.0, 4810.5], [123.0, 4067.166666666667], [122.0, 6153.0], [121.0, 7955.0], [124.0, 3583.0], [127.0, 12888.0], [126.0, 7727.0], [125.0, 7931.0], [134.0, 4929.0], [135.0, 7977.0], [133.0, 9030.0], [132.0, 7686.0], [131.0, 7871.0], [130.0, 7777.0], [129.0, 7201.0], [128.0, 7693.0], [139.0, 4831.666666666667], [138.0, 6641.0], [137.0, 1721.0], [136.0, 3935.6666666666665], [140.0, 4980.0], [142.0, 4949.666666666667], [141.0, 7739.5], [143.0, 7725.0], [145.0, 2363.6666666666665], [144.0, 3548.3333333333335], [147.0, 2886.5714285714284], [149.0, 3442.2], [151.0, 3895.25], [148.0, 3835.6666666666665], [146.0, 4009.6666666666665], [150.0, 3854.3333333333335], [152.0, 3968.0], [153.0, 4376.5], [154.0, 3617.3333333333335], [159.0, 5237.0], [158.0, 8526.0], [157.0, 7517.0], [156.0, 7638.0], [155.0, 8097.0], [161.0, 3697.333333333333], [160.0, 5113.0], [165.0, 4733.0], [164.0, 4911.5], [167.0, 8421.0], [166.0, 7787.0], [163.0, 7643.0], [162.0, 7971.0], [175.0, 5807.0], [174.0, 7831.0], [173.0, 8260.0], [172.0, 7430.0], [171.0, 8473.0], [170.0, 7989.5], [168.0, 8346.0], [176.0, 6583.0], [180.0, 4496.142857142857], [181.0, 3315.714285714286], [179.0, 4324.714285714285], [182.0, 3104.285714285714], [178.0, 4797.0], [183.0, 4726.5], [177.0, 7940.0], [187.0, 5052.333333333333], [186.0, 6459.6], [185.0, 6815.333333333333], [190.0, 4769.5], [191.0, 7242.0], [189.0, 8157.0], [188.0, 8434.0], [184.0, 8539.0], [192.0, 5137.333333333333], [193.0, 4760.5], [194.0, 6831.75], [195.0, 7074.5], [199.0, 4912.0], [198.0, 7914.0], [197.0, 7666.0], [196.0, 7792.0], [207.0, 7293.5], [206.0, 7941.0], [205.0, 7748.0], [204.0, 8066.0], [203.0, 7551.0], [202.0, 8205.5], [200.0, 7707.0], [208.0, 4975.0], [209.0, 5059.0], [215.0, 7858.0], [214.0, 7844.0], [212.0, 2731.0], [211.0, 8068.0], [210.0, 7995.0], [219.0, 1863.3333333333333], [218.0, 3371.3333333333335], [217.0, 7570.0], [223.0, 2789.8], [222.0, 4893.5], [221.0, 2368.0], [220.0, 2220.0], [216.0, 8122.0], [229.0, 5050.333333333333], [228.0, 5414.222222222223], [227.0, 3454.3333333333335], [230.0, 4705.0], [226.0, 4859.2], [225.0, 5379.666666666667], [231.0, 1626.3333333333333], [224.0, 7631.0], [234.0, 4858.0], [233.0, 3577.3333333333335], [232.0, 3736.0], [236.0, 1878.3333333333333], [237.0, 1957.5], [239.0, 1798.5], [238.0, 2438.0], [235.0, 2112.0], [243.0, 1842.0], [242.0, 1852.3333333333333], [245.0, 2948.6], [247.0, 7806.0], [246.0, 7863.0], [244.0, 1818.0], [241.0, 2189.0], [240.0, 7579.0], [255.0, 1823.0], [254.0, 1990.0], [253.0, 1672.0], [252.0, 1727.0], [251.0, 1784.0], [250.0, 7695.0], [249.0, 2099.0], [248.0, 1923.0], [270.0, 4717.5], [256.0, 4587.5], [263.0, 7523.0], [262.0, 1975.0], [261.0, 2513.0], [260.0, 1963.0], [258.0, 1973.5], [259.0, 1878.0], [257.0, 5383.0], [266.0, 6142.5], [267.0, 7888.0], [265.0, 4388.5], [264.0, 5570.666666666667], [269.0, 5523.0], [268.0, 1957.0], [271.0, 7890.0], [273.0, 5090.333333333333], [274.0, 2099.0], [278.0, 4871.5], [277.0, 1996.5], [276.0, 5091.5], [279.0, 4954.5], [280.0, 4048.0], [281.0, 2336.0], [275.0, 4692.0], [1.0, 580.8235294117646]], "isOverall": false, "label": "https://localhost:44313/Listings", "isController": false}, {"data": [[88.41395348837209, 2808.5795348837205]], "isOverall": false, "label": "https://localhost:44313/Listings-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 281.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 597.3333333333334, "minX": 1.653326964E12, "maxY": 3252588.6666666665, "series": [{"data": [[1.6533269715E12, 1227264.6666666667], [1.653326994E12, 2614860.6666666665], [1.6533269745E12, 1440702.0], [1.653326997E12, 1761111.3333333333], [1.6533269655E12, 369614.0], [1.653326988E12, 2720414.0], [1.6533269685E12, 800390.0], [1.653326991E12, 2240737.3333333335], [1.653326982E12, 2561146.6666666665], [1.6533270045E12, 2666801.3333333335], [1.653326985E12, 1654240.6666666667], [1.6533269985E12, 2773621.3333333335], [1.653326979E12, 2187530.0], [1.6533270015E12, 2666700.0], [1.6533269925E12, 2614404.6666666665], [1.653326973E12, 1547370.0], [1.6533269955E12, 2240332.0], [1.653326976E12, 2081014.0], [1.653326967E12, 745409.3333333334], [1.6533269895E12, 1975628.6666666667], [1.65332697E12, 1120546.0], [1.653327003E12, 2559069.3333333335], [1.6533269835E12, 2454073.3333333335], [1.653327006E12, 1919112.0], [1.653326964E12, 367131.3333333333], [1.6533269865E12, 2400308.6666666665], [1.6533269775E12, 1974346.0], [1.653327E12, 3252588.6666666665], [1.6533269805E12, 2347810.6666666665]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.6533269715E12, 1962.6666666666667], [1.653326994E12, 4181.333333333333], [1.6533269745E12, 2304.0], [1.653326997E12, 2816.0], [1.6533269655E12, 597.3333333333334], [1.653326988E12, 4352.0], [1.6533269685E12, 1280.0], [1.653326991E12, 3584.0], [1.653326982E12, 4096.0], [1.6533270045E12, 4266.666666666667], [1.653326985E12, 2645.3333333333335], [1.6533269985E12, 4437.333333333333], [1.653326979E12, 3498.6666666666665], [1.6533270015E12, 4266.666666666667], [1.6533269925E12, 4181.333333333333], [1.653326973E12, 2474.6666666666665], [1.6533269955E12, 3584.0], [1.653326976E12, 3328.0], [1.653326967E12, 1194.6666666666667], [1.6533269895E12, 3242.6666666666665], [1.65332697E12, 1792.0], [1.653327003E12, 4096.0], [1.6533269835E12, 3925.3333333333335], [1.653327006E12, 3072.0], [1.653326964E12, 597.3333333333334], [1.6533269865E12, 3840.0], [1.6533269775E12, 3157.3333333333335], [1.653327E12, 5205.333333333333], [1.6533269805E12, 3754.6666666666665]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1500, "maxX": 1.653327006E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 109.8695652173913, "minX": 1.653326964E12, "maxY": 8232.10416666667, "series": [{"data": [[1.6533269715E12, 109.8695652173913], [1.653326994E12, 3672.448979591837], [1.6533269745E12, 121.33333333333331], [1.653326997E12, 3009.242424242424], [1.6533269655E12, 116.71428571428572], [1.653326988E12, 1316.3137254901962], [1.6533269685E12, 119.33333333333334], [1.653326991E12, 1959.9285714285718], [1.653326982E12, 263.1666666666667], [1.6533270045E12, 8071.240000000001], [1.653326985E12, 635.3870967741935], [1.6533269985E12, 4155.846153846152], [1.653326979E12, 189.34146341463412], [1.6533270015E12, 8164.619999999999], [1.6533269925E12, 2063.2040816326526], [1.653326973E12, 118.89655172413792], [1.6533269955E12, 4548.02380952381], [1.653326976E12, 158.25641025641025], [1.653326967E12, 121.14285714285714], [1.6533269895E12, 1748.9999999999998], [1.65332697E12, 111.23809523809523], [1.653327003E12, 8232.10416666667], [1.6533269835E12, 425.9565217391304], [1.653327006E12, 7861.3611111111095], [1.653326964E12, 117.14285714285714], [1.6533269865E12, 1164.6666666666665], [1.6533269775E12, 138.0810810810811], [1.653327E12, 6163.819672131147], [1.6533269805E12, 223.09090909090904]], "isOverall": false, "label": "https://localhost:44313/Listings", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1500, "maxX": 1.653327006E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 109.47826086956523, "minX": 1.653326964E12, "maxY": 8229.083333333334, "series": [{"data": [[1.6533269715E12, 109.47826086956523], [1.653326994E12, 3671.714285714286], [1.6533269745E12, 120.92592592592594], [1.653326997E12, 3008.5151515151524], [1.6533269655E12, 116.00000000000001], [1.653326988E12, 1315.4901960784314], [1.6533269685E12, 118.73333333333333], [1.653326991E12, 1959.285714285714], [1.653326982E12, 262.08333333333337], [1.6533270045E12, 8070.4400000000005], [1.653326985E12, 634.6451612903227], [1.6533269985E12, 4155.057692307692], [1.653326979E12, 188.56097560975607], [1.6533270015E12, 8163.099999999999], [1.6533269925E12, 2061.510204081633], [1.653326973E12, 118.3448275862069], [1.6533269955E12, 4546.904761904762], [1.653326976E12, 157.61538461538467], [1.653326967E12, 120.57142857142857], [1.6533269895E12, 1747.7894736842106], [1.65332697E12, 110.80952380952382], [1.653327003E12, 8229.083333333334], [1.6533269835E12, 425.1739130434782], [1.653327006E12, 7859.861111111112], [1.653326964E12, 116.57142857142857], [1.6533269865E12, 1163.9777777777776], [1.6533269775E12, 137.32432432432435], [1.653327E12, 6162.540983606557], [1.6533269805E12, 222.45454545454544]], "isOverall": false, "label": "https://localhost:44313/Listings", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1500, "maxX": 1.653327006E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 9.19047619047619, "minX": 1.653326964E12, "maxY": 74.36734693877554, "series": [{"data": [[1.6533269715E12, 9.826086956521737], [1.653326994E12, 74.36734693877554], [1.6533269745E12, 10.703703703703704], [1.653326997E12, 65.87878787878788], [1.6533269655E12, 12.285714285714286], [1.653326988E12, 57.70588235294117], [1.6533269685E12, 9.533333333333335], [1.653326991E12, 54.88095238095241], [1.653326982E12, 26.45833333333334], [1.6533270045E12, 55.82000000000001], [1.653326985E12, 60.354838709677416], [1.6533269985E12, 65.42307692307693], [1.653326979E12, 14.95121951219512], [1.6533270015E12, 69.84], [1.6533269925E12, 71.6122448979592], [1.653326973E12, 10.137931034482758], [1.6533269955E12, 61.88095238095238], [1.653326976E12, 12.564102564102564], [1.653326967E12, 10.214285714285715], [1.6533269895E12, 55.86842105263159], [1.65332697E12, 9.19047619047619], [1.653327003E12, 59.33333333333334], [1.6533269835E12, 52.8695652173913], [1.653327006E12, 64.94444444444444], [1.653326964E12, 14.0], [1.6533269865E12, 58.288888888888884], [1.6533269775E12, 11.729729729729728], [1.653327E12, 72.29508196721311], [1.6533269805E12, 22.72727272727272]], "isOverall": false, "label": "https://localhost:44313/Listings", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1500, "maxX": 1.653327006E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 102.0, "minX": 1.653326964E12, "maxY": 14006.0, "series": [{"data": [[1.6533269715E12, 116.0], [1.653326994E12, 7411.0], [1.6533269745E12, 134.0], [1.653326997E12, 7468.0], [1.6533269655E12, 131.0], [1.653326988E12, 2864.0], [1.6533269685E12, 158.0], [1.653326991E12, 4930.0], [1.653326982E12, 377.0], [1.6533270045E12, 13436.0], [1.653326985E12, 953.0], [1.6533269985E12, 11433.0], [1.653326979E12, 319.0], [1.6533270015E12, 9037.0], [1.6533269925E12, 6510.0], [1.653326973E12, 159.0], [1.6533269955E12, 9743.0], [1.653326976E12, 239.0], [1.653326967E12, 165.0], [1.6533269895E12, 3448.0], [1.65332697E12, 137.0], [1.653327003E12, 13636.0], [1.6533269835E12, 838.0], [1.653327006E12, 14006.0], [1.653326964E12, 135.0], [1.6533269865E12, 2160.0], [1.6533269775E12, 160.0], [1.653327E12, 8544.0], [1.6533269805E12, 290.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.6533269715E12, 113.0], [1.653326994E12, 6172.0], [1.6533269745E12, 133.2], [1.653326997E12, 7333.6], [1.6533269655E12, 131.0], [1.653326988E12, 2398.4000000000005], [1.6533269685E12, 143.60000000000002], [1.653326991E12, 4570.6], [1.653326982E12, 352.3], [1.6533270045E12, 8558.8], [1.653326985E12, 875.8000000000001], [1.6533269985E12, 7937.6], [1.653326979E12, 253.8], [1.6533270015E12, 8888.1], [1.6533269925E12, 4938.0], [1.653326973E12, 142.0], [1.6533269955E12, 6833.000000000001], [1.653326976E12, 194.0], [1.653326967E12, 161.0], [1.6533269895E12, 3315.2], [1.65332697E12, 114.8], [1.653327003E12, 8891.4], [1.6533269835E12, 570.1000000000007], [1.653327006E12, 8098.6], [1.653326964E12, 135.0], [1.6533269865E12, 1911.3999999999999], [1.6533269775E12, 153.2], [1.653327E12, 8254.0], [1.6533269805E12, 248.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.6533269715E12, 116.0], [1.653326994E12, 7411.0], [1.6533269745E12, 134.0], [1.653326997E12, 7468.0], [1.6533269655E12, 131.0], [1.653326988E12, 2864.0], [1.6533269685E12, 158.0], [1.653326991E12, 4930.0], [1.653326982E12, 377.0], [1.6533270045E12, 13436.0], [1.653326985E12, 953.0], [1.6533269985E12, 11433.0], [1.653326979E12, 319.0], [1.6533270015E12, 9037.0], [1.6533269925E12, 6510.0], [1.653326973E12, 159.0], [1.6533269955E12, 9743.0], [1.653326976E12, 239.0], [1.653326967E12, 165.0], [1.6533269895E12, 3448.0], [1.65332697E12, 137.0], [1.653327003E12, 13636.0], [1.6533269835E12, 838.0], [1.653327006E12, 14006.0], [1.653326964E12, 135.0], [1.6533269865E12, 2160.0], [1.6533269775E12, 160.0], [1.653327E12, 8544.0], [1.6533269805E12, 290.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.6533269715E12, 115.39999999999999], [1.653326994E12, 6247.5], [1.6533269745E12, 134.0], [1.653326997E12, 7391.0], [1.6533269655E12, 131.0], [1.653326988E12, 2616.3999999999996], [1.6533269685E12, 158.0], [1.653326991E12, 4903.150000000001], [1.653326982E12, 369.24999999999994], [1.6533270045E12, 12786.25], [1.653326985E12, 914.5999999999999], [1.6533269985E12, 7997.349999999999], [1.653326979E12, 266.7], [1.6533270015E12, 8951.95], [1.6533269925E12, 5181.0], [1.653326973E12, 151.0], [1.6533269955E12, 7233.35], [1.653326976E12, 239.0], [1.653326967E12, 165.0], [1.6533269895E12, 3385.2999999999997], [1.65332697E12, 134.79999999999995], [1.653327003E12, 11177.549999999988], [1.6533269835E12, 821.0999999999999], [1.653327006E12, 12038.249999999996], [1.653326964E12, 135.0], [1.6533269865E12, 2087.2999999999993], [1.6533269775E12, 156.4], [1.653327E12, 8430.8], [1.6533269805E12, 267.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.6533269715E12, 105.0], [1.653326994E12, 1077.0], [1.6533269745E12, 108.0], [1.653326997E12, 1394.0], [1.6533269655E12, 109.0], [1.653326988E12, 650.0], [1.6533269685E12, 102.0], [1.653326991E12, 808.0], [1.653326982E12, 200.0], [1.6533270045E12, 6495.0], [1.653326985E12, 364.0], [1.6533269985E12, 1584.0], [1.653326979E12, 125.0], [1.6533270015E12, 7407.0], [1.6533269925E12, 1104.0], [1.653326973E12, 105.0], [1.6533269955E12, 1431.0], [1.653326976E12, 115.0], [1.653326967E12, 106.0], [1.6533269895E12, 780.0], [1.65332697E12, 103.0], [1.653327003E12, 7197.0], [1.6533269835E12, 273.0], [1.653327006E12, 6933.0], [1.653326964E12, 105.0], [1.6533269865E12, 505.0], [1.6533269775E12, 117.0], [1.653327E12, 1515.0], [1.6533269805E12, 195.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.6533269715E12, 111.0], [1.653326994E12, 2018.0], [1.6533269745E12, 121.0], [1.653326997E12, 1739.0], [1.6533269655E12, 114.0], [1.653326988E12, 1055.0], [1.6533269685E12, 117.0], [1.653326991E12, 1372.5], [1.653326982E12, 255.5], [1.6533270045E12, 7844.5], [1.653326985E12, 614.0], [1.6533269985E12, 2186.5], [1.653326979E12, 184.0], [1.6533270015E12, 8121.5], [1.6533269925E12, 1513.0], [1.653326973E12, 115.0], [1.6533269955E12, 6121.5], [1.653326976E12, 155.0], [1.653326967E12, 111.0], [1.6533269895E12, 1141.0], [1.65332697E12, 110.0], [1.653327003E12, 7932.5], [1.6533269835E12, 403.0], [1.653327006E12, 7587.0], [1.653326964E12, 114.0], [1.6533269865E12, 1092.0], [1.6533269775E12, 137.0], [1.653327E12, 7835.0], [1.6533269805E12, 220.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1500, "maxX": 1.653327006E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 108.0, "minX": 4.0, "maxY": 8097.0, "series": [{"data": [[32.0, 975.0], [35.0, 2063.5], [9.0, 109.0], [37.0, 7826.0], [36.0, 7587.0], [39.0, 2319.5], [38.0, 7965.0], [10.0, 121.0], [47.0, 8097.0], [14.0, 108.0], [15.0, 111.0], [4.0, 123.0], [17.0, 127.0], [19.0, 114.0], [5.0, 113.5], [20.0, 332.0], [21.0, 6114.0], [23.0, 7074.0], [25.0, 149.0], [26.0, 301.5], [28.0, 535.0], [29.0, 215.0], [30.0, 1039.5], [31.0, 547.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 47.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 107.5, "minX": 4.0, "maxY": 8096.0, "series": [{"data": [[32.0, 974.0], [35.0, 2062.5], [9.0, 109.0], [37.0, 7825.0], [36.0, 7586.5], [39.0, 2318.5], [38.0, 7964.5], [10.0, 120.5], [47.0, 8096.0], [14.0, 107.5], [15.0, 111.0], [4.0, 123.0], [17.0, 127.0], [19.0, 114.0], [5.0, 112.5], [20.0, 331.5], [21.0, 6114.0], [23.0, 7073.0], [25.0, 148.0], [26.0, 301.0], [28.0, 534.0], [29.0, 215.0], [30.0, 1038.5], [31.0, 546.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 47.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 4.666666666666667, "minX": 1.653326964E12, "maxY": 50.666666666666664, "series": [{"data": [[1.6533269925E12, 48.666666666666664], [1.6533269715E12, 15.333333333333334], [1.653326994E12, 50.0], [1.653326973E12, 19.333333333333332], [1.6533269745E12, 20.0], [1.6533269955E12, 50.666666666666664], [1.653326976E12, 24.666666666666668], [1.653326997E12, 48.666666666666664], [1.6533269655E12, 5.333333333333333], [1.653326988E12, 44.666666666666664], [1.653326967E12, 9.333333333333334], [1.6533269685E12, 10.0], [1.6533269895E12, 45.333333333333336], [1.65332697E12, 14.666666666666666], [1.653326991E12, 50.0], [1.653326982E12, 34.666666666666664], [1.6533269835E12, 34.666666666666664], [1.653326964E12, 4.666666666666667], [1.653326985E12, 39.333333333333336], [1.6533269865E12, 40.0], [1.6533269985E12, 22.0], [1.6533269775E12, 24.666666666666668], [1.653326979E12, 30.0], [1.6533269805E12, 30.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1500, "maxX": 1.6533269985E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 4.666666666666667, "minX": 1.653326964E12, "maxY": 40.666666666666664, "series": [{"data": [[1.6533269715E12, 15.333333333333334], [1.653326994E12, 32.666666666666664], [1.6533269745E12, 18.0], [1.653326997E12, 22.0], [1.6533269655E12, 4.666666666666667], [1.653326988E12, 34.0], [1.6533269685E12, 10.0], [1.653326991E12, 28.0], [1.653326982E12, 32.0], [1.6533270045E12, 33.333333333333336], [1.653326985E12, 20.666666666666668], [1.6533269985E12, 34.666666666666664], [1.653326979E12, 27.333333333333332], [1.6533270015E12, 33.333333333333336], [1.6533269925E12, 32.666666666666664], [1.653326973E12, 19.333333333333332], [1.6533269955E12, 28.0], [1.653326976E12, 26.0], [1.653326967E12, 9.333333333333334], [1.6533269895E12, 25.333333333333332], [1.65332697E12, 14.0], [1.653327003E12, 32.0], [1.6533269835E12, 30.666666666666668], [1.653327006E12, 24.0], [1.653326964E12, 4.666666666666667], [1.6533269865E12, 30.0], [1.6533269775E12, 24.666666666666668], [1.653327E12, 40.666666666666664], [1.6533269805E12, 29.333333333333332]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1500, "maxX": 1.653327006E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 4.666666666666667, "minX": 1.653326964E12, "maxY": 40.666666666666664, "series": [{"data": [[1.6533269715E12, 15.333333333333334], [1.653326994E12, 32.666666666666664], [1.6533269745E12, 18.0], [1.653326997E12, 22.0], [1.6533269655E12, 4.666666666666667], [1.653326988E12, 34.0], [1.6533269685E12, 10.0], [1.653326991E12, 28.0], [1.653326982E12, 32.0], [1.6533270045E12, 33.333333333333336], [1.653326985E12, 20.666666666666668], [1.6533269985E12, 34.666666666666664], [1.653326979E12, 27.333333333333332], [1.6533270015E12, 33.333333333333336], [1.6533269925E12, 32.666666666666664], [1.653326973E12, 19.333333333333332], [1.6533269955E12, 28.0], [1.653326976E12, 26.0], [1.653326967E12, 9.333333333333334], [1.6533269895E12, 25.333333333333332], [1.65332697E12, 14.0], [1.653327003E12, 32.0], [1.6533269835E12, 30.666666666666668], [1.653327006E12, 24.0], [1.653326964E12, 4.666666666666667], [1.6533269865E12, 30.0], [1.6533269775E12, 24.666666666666668], [1.653327E12, 40.666666666666664], [1.6533269805E12, 29.333333333333332]], "isOverall": false, "label": "https://localhost:44313/Listings-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1500, "maxX": 1.653327006E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 4.666666666666667, "minX": 1.653326964E12, "maxY": 40.666666666666664, "series": [{"data": [[1.6533269715E12, 15.333333333333334], [1.653326994E12, 32.666666666666664], [1.6533269745E12, 18.0], [1.653326997E12, 22.0], [1.6533269655E12, 4.666666666666667], [1.653326988E12, 34.0], [1.6533269685E12, 10.0], [1.653326991E12, 28.0], [1.653326982E12, 32.0], [1.6533270045E12, 33.333333333333336], [1.653326985E12, 20.666666666666668], [1.6533269985E12, 34.666666666666664], [1.653326979E12, 27.333333333333332], [1.6533270015E12, 33.333333333333336], [1.6533269925E12, 32.666666666666664], [1.653326973E12, 19.333333333333332], [1.6533269955E12, 28.0], [1.653326976E12, 26.0], [1.653326967E12, 9.333333333333334], [1.6533269895E12, 25.333333333333332], [1.65332697E12, 14.0], [1.653327003E12, 32.0], [1.6533269835E12, 30.666666666666668], [1.653327006E12, 24.0], [1.653326964E12, 4.666666666666667], [1.6533269865E12, 30.0], [1.6533269775E12, 24.666666666666668], [1.653327E12, 40.666666666666664], [1.6533269805E12, 29.333333333333332]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1500, "maxX": 1.653327006E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

