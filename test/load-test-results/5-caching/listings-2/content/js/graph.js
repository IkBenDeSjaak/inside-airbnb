/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 15.0, "minX": 0.0, "maxY": 4885.0, "series": [{"data": [[0.0, 15.0], [0.1, 15.0], [0.2, 16.0], [0.3, 16.0], [0.4, 16.0], [0.5, 16.0], [0.6, 16.0], [0.7, 16.0], [0.8, 16.0], [0.9, 16.0], [1.0, 16.0], [1.1, 16.0], [1.2, 16.0], [1.3, 17.0], [1.4, 17.0], [1.5, 17.0], [1.6, 17.0], [1.7, 17.0], [1.8, 17.0], [1.9, 17.0], [2.0, 17.0], [2.1, 17.0], [2.2, 17.0], [2.3, 17.0], [2.4, 17.0], [2.5, 17.0], [2.6, 17.0], [2.7, 17.0], [2.8, 17.0], [2.9, 17.0], [3.0, 17.0], [3.1, 17.0], [3.2, 17.0], [3.3, 17.0], [3.4, 17.0], [3.5, 17.0], [3.6, 17.0], [3.7, 17.0], [3.8, 17.0], [3.9, 18.0], [4.0, 18.0], [4.1, 18.0], [4.2, 18.0], [4.3, 18.0], [4.4, 18.0], [4.5, 18.0], [4.6, 18.0], [4.7, 18.0], [4.8, 18.0], [4.9, 18.0], [5.0, 18.0], [5.1, 18.0], [5.2, 18.0], [5.3, 18.0], [5.4, 18.0], [5.5, 18.0], [5.6, 18.0], [5.7, 18.0], [5.8, 18.0], [5.9, 18.0], [6.0, 18.0], [6.1, 18.0], [6.2, 18.0], [6.3, 18.0], [6.4, 18.0], [6.5, 18.0], [6.6, 18.0], [6.7, 18.0], [6.8, 18.0], [6.9, 18.0], [7.0, 18.0], [7.1, 18.0], [7.2, 19.0], [7.3, 19.0], [7.4, 19.0], [7.5, 19.0], [7.6, 19.0], [7.7, 19.0], [7.8, 19.0], [7.9, 19.0], [8.0, 19.0], [8.1, 19.0], [8.2, 19.0], [8.3, 19.0], [8.4, 19.0], [8.5, 19.0], [8.6, 19.0], [8.7, 19.0], [8.8, 19.0], [8.9, 19.0], [9.0, 19.0], [9.1, 19.0], [9.2, 19.0], [9.3, 19.0], [9.4, 19.0], [9.5, 19.0], [9.6, 19.0], [9.7, 19.0], [9.8, 19.0], [9.9, 19.0], [10.0, 19.0], [10.1, 19.0], [10.2, 19.0], [10.3, 20.0], [10.4, 20.0], [10.5, 20.0], [10.6, 20.0], [10.7, 20.0], [10.8, 20.0], [10.9, 20.0], [11.0, 20.0], [11.1, 20.0], [11.2, 20.0], [11.3, 20.0], [11.4, 20.0], [11.5, 20.0], [11.6, 20.0], [11.7, 20.0], [11.8, 20.0], [11.9, 20.0], [12.0, 20.0], [12.1, 20.0], [12.2, 20.0], [12.3, 20.0], [12.4, 20.0], [12.5, 20.0], [12.6, 21.0], [12.7, 21.0], [12.8, 21.0], [12.9, 21.0], [13.0, 21.0], [13.1, 21.0], [13.2, 21.0], [13.3, 21.0], [13.4, 21.0], [13.5, 21.0], [13.6, 21.0], [13.7, 21.0], [13.8, 21.0], [13.9, 21.0], [14.0, 21.0], [14.1, 21.0], [14.2, 21.0], [14.3, 21.0], [14.4, 21.0], [14.5, 21.0], [14.6, 21.0], [14.7, 21.0], [14.8, 21.0], [14.9, 22.0], [15.0, 22.0], [15.1, 22.0], [15.2, 22.0], [15.3, 22.0], [15.4, 22.0], [15.5, 22.0], [15.6, 22.0], [15.7, 22.0], [15.8, 22.0], [15.9, 22.0], [16.0, 22.0], [16.1, 22.0], [16.2, 22.0], [16.3, 22.0], [16.4, 22.0], [16.5, 22.0], [16.6, 23.0], [16.7, 23.0], [16.8, 23.0], [16.9, 23.0], [17.0, 23.0], [17.1, 23.0], [17.2, 23.0], [17.3, 23.0], [17.4, 23.0], [17.5, 23.0], [17.6, 23.0], [17.7, 23.0], [17.8, 23.0], [17.9, 23.0], [18.0, 23.0], [18.1, 24.0], [18.2, 24.0], [18.3, 24.0], [18.4, 24.0], [18.5, 24.0], [18.6, 24.0], [18.7, 24.0], [18.8, 24.0], [18.9, 24.0], [19.0, 24.0], [19.1, 24.0], [19.2, 24.0], [19.3, 24.0], [19.4, 24.0], [19.5, 24.0], [19.6, 24.0], [19.7, 24.0], [19.8, 25.0], [19.9, 25.0], [20.0, 25.0], [20.1, 25.0], [20.2, 25.0], [20.3, 25.0], [20.4, 25.0], [20.5, 25.0], [20.6, 25.0], [20.7, 25.0], [20.8, 25.0], [20.9, 25.0], [21.0, 25.0], [21.1, 25.0], [21.2, 25.0], [21.3, 25.0], [21.4, 25.0], [21.5, 25.0], [21.6, 25.0], [21.7, 25.0], [21.8, 26.0], [21.9, 26.0], [22.0, 26.0], [22.1, 26.0], [22.2, 26.0], [22.3, 26.0], [22.4, 26.0], [22.5, 26.0], [22.6, 26.0], [22.7, 26.0], [22.8, 26.0], [22.9, 26.0], [23.0, 26.0], [23.1, 26.0], [23.2, 26.0], [23.3, 26.0], [23.4, 26.0], [23.5, 27.0], [23.6, 27.0], [23.7, 27.0], [23.8, 27.0], [23.9, 27.0], [24.0, 27.0], [24.1, 27.0], [24.2, 27.0], [24.3, 27.0], [24.4, 27.0], [24.5, 27.0], [24.6, 27.0], [24.7, 27.0], [24.8, 27.0], [24.9, 27.0], [25.0, 27.0], [25.1, 27.0], [25.2, 27.0], [25.3, 27.0], [25.4, 28.0], [25.5, 28.0], [25.6, 28.0], [25.7, 28.0], [25.8, 28.0], [25.9, 28.0], [26.0, 28.0], [26.1, 28.0], [26.2, 28.0], [26.3, 28.0], [26.4, 28.0], [26.5, 28.0], [26.6, 28.0], [26.7, 28.0], [26.8, 28.0], [26.9, 29.0], [27.0, 29.0], [27.1, 29.0], [27.2, 29.0], [27.3, 29.0], [27.4, 29.0], [27.5, 29.0], [27.6, 29.0], [27.7, 29.0], [27.8, 29.0], [27.9, 29.0], [28.0, 29.0], [28.1, 29.0], [28.2, 29.0], [28.3, 29.0], [28.4, 29.0], [28.5, 29.0], [28.6, 30.0], [28.7, 30.0], [28.8, 30.0], [28.9, 30.0], [29.0, 30.0], [29.1, 30.0], [29.2, 30.0], [29.3, 30.0], [29.4, 30.0], [29.5, 30.0], [29.6, 30.0], [29.7, 31.0], [29.8, 31.0], [29.9, 31.0], [30.0, 31.0], [30.1, 31.0], [30.2, 31.0], [30.3, 32.0], [30.4, 32.0], [30.5, 32.0], [30.6, 32.0], [30.7, 32.0], [30.8, 32.0], [30.9, 33.0], [31.0, 33.0], [31.1, 33.0], [31.2, 33.0], [31.3, 33.0], [31.4, 33.0], [31.5, 33.0], [31.6, 33.0], [31.7, 34.0], [31.8, 34.0], [31.9, 34.0], [32.0, 34.0], [32.1, 34.0], [32.2, 34.0], [32.3, 34.0], [32.4, 35.0], [32.5, 35.0], [32.6, 35.0], [32.7, 35.0], [32.8, 35.0], [32.9, 35.0], [33.0, 36.0], [33.1, 36.0], [33.2, 36.0], [33.3, 36.0], [33.4, 37.0], [33.5, 37.0], [33.6, 37.0], [33.7, 37.0], [33.8, 37.0], [33.9, 37.0], [34.0, 37.0], [34.1, 38.0], [34.2, 38.0], [34.3, 38.0], [34.4, 38.0], [34.5, 39.0], [34.6, 39.0], [34.7, 39.0], [34.8, 39.0], [34.9, 40.0], [35.0, 40.0], [35.1, 40.0], [35.2, 40.0], [35.3, 40.0], [35.4, 41.0], [35.5, 41.0], [35.6, 41.0], [35.7, 41.0], [35.8, 42.0], [35.9, 42.0], [36.0, 42.0], [36.1, 42.0], [36.2, 43.0], [36.3, 43.0], [36.4, 43.0], [36.5, 43.0], [36.6, 43.0], [36.7, 43.0], [36.8, 44.0], [36.9, 45.0], [37.0, 45.0], [37.1, 45.0], [37.2, 46.0], [37.3, 46.0], [37.4, 46.0], [37.5, 47.0], [37.6, 47.0], [37.7, 47.0], [37.8, 48.0], [37.9, 48.0], [38.0, 50.0], [38.1, 50.0], [38.2, 51.0], [38.3, 51.0], [38.4, 51.0], [38.5, 51.0], [38.6, 52.0], [38.7, 52.0], [38.8, 52.0], [38.9, 53.0], [39.0, 53.0], [39.1, 53.0], [39.2, 54.0], [39.3, 54.0], [39.4, 54.0], [39.5, 55.0], [39.6, 55.0], [39.7, 55.0], [39.8, 55.0], [39.9, 56.0], [40.0, 56.0], [40.1, 56.0], [40.2, 56.0], [40.3, 56.0], [40.4, 57.0], [40.5, 57.0], [40.6, 57.0], [40.7, 58.0], [40.8, 58.0], [40.9, 58.0], [41.0, 58.0], [41.1, 58.0], [41.2, 59.0], [41.3, 59.0], [41.4, 59.0], [41.5, 59.0], [41.6, 60.0], [41.7, 60.0], [41.8, 60.0], [41.9, 61.0], [42.0, 61.0], [42.1, 61.0], [42.2, 62.0], [42.3, 62.0], [42.4, 62.0], [42.5, 63.0], [42.6, 63.0], [42.7, 64.0], [42.8, 65.0], [42.9, 65.0], [43.0, 66.0], [43.1, 66.0], [43.2, 66.0], [43.3, 66.0], [43.4, 67.0], [43.5, 67.0], [43.6, 67.0], [43.7, 68.0], [43.8, 69.0], [43.9, 69.0], [44.0, 69.0], [44.1, 70.0], [44.2, 70.0], [44.3, 70.0], [44.4, 71.0], [44.5, 71.0], [44.6, 71.0], [44.7, 71.0], [44.8, 72.0], [44.9, 72.0], [45.0, 72.0], [45.1, 73.0], [45.2, 73.0], [45.3, 74.0], [45.4, 74.0], [45.5, 74.0], [45.6, 75.0], [45.7, 75.0], [45.8, 75.0], [45.9, 76.0], [46.0, 76.0], [46.1, 77.0], [46.2, 78.0], [46.3, 78.0], [46.4, 78.0], [46.5, 79.0], [46.6, 79.0], [46.7, 80.0], [46.8, 80.0], [46.9, 80.0], [47.0, 81.0], [47.1, 82.0], [47.2, 82.0], [47.3, 83.0], [47.4, 83.0], [47.5, 84.0], [47.6, 84.0], [47.7, 84.0], [47.8, 84.0], [47.9, 85.0], [48.0, 85.0], [48.1, 86.0], [48.2, 86.0], [48.3, 87.0], [48.4, 87.0], [48.5, 87.0], [48.6, 88.0], [48.7, 88.0], [48.8, 89.0], [48.9, 89.0], [49.0, 89.0], [49.1, 89.0], [49.2, 90.0], [49.3, 90.0], [49.4, 90.0], [49.5, 90.0], [49.6, 91.0], [49.7, 91.0], [49.8, 91.0], [49.9, 92.0], [50.0, 93.0], [50.1, 93.0], [50.2, 95.0], [50.3, 95.0], [50.4, 95.0], [50.5, 96.0], [50.6, 96.0], [50.7, 97.0], [50.8, 98.0], [50.9, 98.0], [51.0, 98.0], [51.1, 99.0], [51.2, 100.0], [51.3, 100.0], [51.4, 101.0], [51.5, 101.0], [51.6, 101.0], [51.7, 102.0], [51.8, 102.0], [51.9, 103.0], [52.0, 103.0], [52.1, 104.0], [52.2, 104.0], [52.3, 105.0], [52.4, 105.0], [52.5, 106.0], [52.6, 106.0], [52.7, 106.0], [52.8, 107.0], [52.9, 107.0], [53.0, 108.0], [53.1, 109.0], [53.2, 109.0], [53.3, 110.0], [53.4, 110.0], [53.5, 111.0], [53.6, 112.0], [53.7, 113.0], [53.8, 113.0], [53.9, 113.0], [54.0, 114.0], [54.1, 114.0], [54.2, 115.0], [54.3, 115.0], [54.4, 116.0], [54.5, 116.0], [54.6, 117.0], [54.7, 118.0], [54.8, 118.0], [54.9, 118.0], [55.0, 119.0], [55.1, 120.0], [55.2, 121.0], [55.3, 121.0], [55.4, 122.0], [55.5, 122.0], [55.6, 123.0], [55.7, 124.0], [55.8, 124.0], [55.9, 125.0], [56.0, 125.0], [56.1, 126.0], [56.2, 127.0], [56.3, 127.0], [56.4, 127.0], [56.5, 128.0], [56.6, 129.0], [56.7, 129.0], [56.8, 129.0], [56.9, 130.0], [57.0, 132.0], [57.1, 132.0], [57.2, 133.0], [57.3, 134.0], [57.4, 135.0], [57.5, 136.0], [57.6, 137.0], [57.7, 138.0], [57.8, 138.0], [57.9, 139.0], [58.0, 139.0], [58.1, 140.0], [58.2, 142.0], [58.3, 143.0], [58.4, 143.0], [58.5, 144.0], [58.6, 144.0], [58.7, 146.0], [58.8, 146.0], [58.9, 147.0], [59.0, 149.0], [59.1, 150.0], [59.2, 151.0], [59.3, 152.0], [59.4, 152.0], [59.5, 153.0], [59.6, 153.0], [59.7, 154.0], [59.8, 155.0], [59.9, 155.0], [60.0, 156.0], [60.1, 158.0], [60.2, 158.0], [60.3, 159.0], [60.4, 160.0], [60.5, 160.0], [60.6, 161.0], [60.7, 162.0], [60.8, 163.0], [60.9, 164.0], [61.0, 164.0], [61.1, 165.0], [61.2, 165.0], [61.3, 167.0], [61.4, 168.0], [61.5, 169.0], [61.6, 170.0], [61.7, 171.0], [61.8, 172.0], [61.9, 172.0], [62.0, 173.0], [62.1, 175.0], [62.2, 176.0], [62.3, 178.0], [62.4, 179.0], [62.5, 180.0], [62.6, 181.0], [62.7, 182.0], [62.8, 183.0], [62.9, 184.0], [63.0, 186.0], [63.1, 188.0], [63.2, 190.0], [63.3, 191.0], [63.4, 193.0], [63.5, 195.0], [63.6, 195.0], [63.7, 197.0], [63.8, 198.0], [63.9, 199.0], [64.0, 201.0], [64.1, 202.0], [64.2, 203.0], [64.3, 205.0], [64.4, 207.0], [64.5, 208.0], [64.6, 209.0], [64.7, 212.0], [64.8, 215.0], [64.9, 218.0], [65.0, 219.0], [65.1, 223.0], [65.2, 224.0], [65.3, 224.0], [65.4, 226.0], [65.5, 229.0], [65.6, 233.0], [65.7, 235.0], [65.8, 236.0], [65.9, 239.0], [66.0, 240.0], [66.1, 253.0], [66.2, 256.0], [66.3, 257.0], [66.4, 263.0], [66.5, 267.0], [66.6, 273.0], [66.7, 277.0], [66.8, 284.0], [66.9, 297.0], [67.0, 303.0], [67.1, 306.0], [67.2, 313.0], [67.3, 344.0], [67.4, 353.0], [67.5, 361.0], [67.6, 369.0], [67.7, 382.0], [67.8, 410.0], [67.9, 420.0], [68.0, 432.0], [68.1, 465.0], [68.2, 509.0], [68.3, 526.0], [68.4, 580.0], [68.5, 600.0], [68.6, 649.0], [68.7, 660.0], [68.8, 673.0], [68.9, 698.0], [69.0, 733.0], [69.1, 758.0], [69.2, 831.0], [69.3, 903.0], [69.4, 1025.0], [69.5, 1069.0], [69.6, 1098.0], [69.7, 1166.0], [69.8, 1196.0], [69.9, 1254.0], [70.0, 1311.0], [70.1, 1324.0], [70.2, 1346.0], [70.3, 1377.0], [70.4, 1388.0], [70.5, 1416.0], [70.6, 1437.0], [70.7, 1448.0], [70.8, 1477.0], [70.9, 1493.0], [71.0, 1532.0], [71.1, 1543.0], [71.2, 1565.0], [71.3, 1596.0], [71.4, 1605.0], [71.5, 1624.0], [71.6, 1639.0], [71.7, 1652.0], [71.8, 1692.0], [71.9, 1711.0], [72.0, 1748.0], [72.1, 1760.0], [72.2, 1786.0], [72.3, 1814.0], [72.4, 1840.0], [72.5, 1872.0], [72.6, 1878.0], [72.7, 1894.0], [72.8, 1911.0], [72.9, 1914.0], [73.0, 1926.0], [73.1, 1940.0], [73.2, 1956.0], [73.3, 1959.0], [73.4, 1973.0], [73.5, 1978.0], [73.6, 1986.0], [73.7, 1997.0], [73.8, 2002.0], [73.9, 2012.0], [74.0, 2023.0], [74.1, 2039.0], [74.2, 2056.0], [74.3, 2063.0], [74.4, 2076.0], [74.5, 2078.0], [74.6, 2087.0], [74.7, 2094.0], [74.8, 2097.0], [74.9, 2105.0], [75.0, 2120.0], [75.1, 2128.0], [75.2, 2134.0], [75.3, 2141.0], [75.4, 2148.0], [75.5, 2155.0], [75.6, 2159.0], [75.7, 2169.0], [75.8, 2173.0], [75.9, 2195.0], [76.0, 2198.0], [76.1, 2210.0], [76.2, 2215.0], [76.3, 2231.0], [76.4, 2241.0], [76.5, 2247.0], [76.6, 2264.0], [76.7, 2277.0], [76.8, 2281.0], [76.9, 2290.0], [77.0, 2294.0], [77.1, 2316.0], [77.2, 2325.0], [77.3, 2334.0], [77.4, 2348.0], [77.5, 2366.0], [77.6, 2377.0], [77.7, 2383.0], [77.8, 2390.0], [77.9, 2399.0], [78.0, 2412.0], [78.1, 2418.0], [78.2, 2425.0], [78.3, 2431.0], [78.4, 2438.0], [78.5, 2441.0], [78.6, 2445.0], [78.7, 2454.0], [78.8, 2457.0], [78.9, 2482.0], [79.0, 2498.0], [79.1, 2510.0], [79.2, 2518.0], [79.3, 2520.0], [79.4, 2526.0], [79.5, 2530.0], [79.6, 2537.0], [79.7, 2542.0], [79.8, 2552.0], [79.9, 2562.0], [80.0, 2571.0], [80.1, 2574.0], [80.2, 2579.0], [80.3, 2590.0], [80.4, 2595.0], [80.5, 2610.0], [80.6, 2624.0], [80.7, 2637.0], [80.8, 2645.0], [80.9, 2652.0], [81.0, 2667.0], [81.1, 2684.0], [81.2, 2689.0], [81.3, 2707.0], [81.4, 2723.0], [81.5, 2734.0], [81.6, 2747.0], [81.7, 2766.0], [81.8, 2777.0], [81.9, 2802.0], [82.0, 2818.0], [82.1, 2834.0], [82.2, 2843.0], [82.3, 2855.0], [82.4, 2877.0], [82.5, 2886.0], [82.6, 2901.0], [82.7, 2909.0], [82.8, 2914.0], [82.9, 2918.0], [83.0, 2926.0], [83.1, 2932.0], [83.2, 2939.0], [83.3, 2949.0], [83.4, 2954.0], [83.5, 2959.0], [83.6, 2971.0], [83.7, 2986.0], [83.8, 2994.0], [83.9, 3004.0], [84.0, 3005.0], [84.1, 3012.0], [84.2, 3017.0], [84.3, 3031.0], [84.4, 3041.0], [84.5, 3056.0], [84.6, 3068.0], [84.7, 3081.0], [84.8, 3095.0], [84.9, 3108.0], [85.0, 3114.0], [85.1, 3124.0], [85.2, 3128.0], [85.3, 3134.0], [85.4, 3143.0], [85.5, 3145.0], [85.6, 3152.0], [85.7, 3156.0], [85.8, 3168.0], [85.9, 3180.0], [86.0, 3187.0], [86.1, 3198.0], [86.2, 3208.0], [86.3, 3225.0], [86.4, 3242.0], [86.5, 3258.0], [86.6, 3270.0], [86.7, 3289.0], [86.8, 3297.0], [86.9, 3303.0], [87.0, 3328.0], [87.1, 3339.0], [87.2, 3350.0], [87.3, 3354.0], [87.4, 3362.0], [87.5, 3370.0], [87.6, 3380.0], [87.7, 3386.0], [87.8, 3419.0], [87.9, 3440.0], [88.0, 3456.0], [88.1, 3463.0], [88.2, 3475.0], [88.3, 3497.0], [88.4, 3506.0], [88.5, 3518.0], [88.6, 3531.0], [88.7, 3550.0], [88.8, 3559.0], [88.9, 3573.0], [89.0, 3576.0], [89.1, 3594.0], [89.2, 3610.0], [89.3, 3620.0], [89.4, 3630.0], [89.5, 3634.0], [89.6, 3637.0], [89.7, 3657.0], [89.8, 3669.0], [89.9, 3675.0], [90.0, 3688.0], [90.1, 3701.0], [90.2, 3710.0], [90.3, 3712.0], [90.4, 3718.0], [90.5, 3733.0], [90.6, 3740.0], [90.7, 3760.0], [90.8, 3769.0], [90.9, 3776.0], [91.0, 3783.0], [91.1, 3791.0], [91.2, 3794.0], [91.3, 3799.0], [91.4, 3804.0], [91.5, 3817.0], [91.6, 3828.0], [91.7, 3834.0], [91.8, 3845.0], [91.9, 3850.0], [92.0, 3857.0], [92.1, 3864.0], [92.2, 3873.0], [92.3, 3878.0], [92.4, 3882.0], [92.5, 3884.0], [92.6, 3894.0], [92.7, 3906.0], [92.8, 3916.0], [92.9, 3932.0], [93.0, 3944.0], [93.1, 3951.0], [93.2, 3965.0], [93.3, 3979.0], [93.4, 3990.0], [93.5, 3998.0], [93.6, 4006.0], [93.7, 4017.0], [93.8, 4020.0], [93.9, 4028.0], [94.0, 4033.0], [94.1, 4054.0], [94.2, 4074.0], [94.3, 4085.0], [94.4, 4098.0], [94.5, 4104.0], [94.6, 4114.0], [94.7, 4117.0], [94.8, 4123.0], [94.9, 4136.0], [95.0, 4151.0], [95.1, 4160.0], [95.2, 4180.0], [95.3, 4195.0], [95.4, 4205.0], [95.5, 4209.0], [95.6, 4215.0], [95.7, 4240.0], [95.8, 4264.0], [95.9, 4272.0], [96.0, 4287.0], [96.1, 4301.0], [96.2, 4338.0], [96.3, 4349.0], [96.4, 4370.0], [96.5, 4383.0], [96.6, 4395.0], [96.7, 4408.0], [96.8, 4427.0], [96.9, 4436.0], [97.0, 4445.0], [97.1, 4450.0], [97.2, 4455.0], [97.3, 4459.0], [97.4, 4463.0], [97.5, 4469.0], [97.6, 4481.0], [97.7, 4490.0], [97.8, 4506.0], [97.9, 4521.0], [98.0, 4530.0], [98.1, 4532.0], [98.2, 4545.0], [98.3, 4555.0], [98.4, 4569.0], [98.5, 4585.0], [98.6, 4596.0], [98.7, 4600.0], [98.8, 4611.0], [98.9, 4621.0], [99.0, 4626.0], [99.1, 4633.0], [99.2, 4641.0], [99.3, 4654.0], [99.4, 4664.0], [99.5, 4677.0], [99.6, 4694.0], [99.7, 4708.0], [99.8, 4750.0], [99.9, 4793.0], [100.0, 4885.0]], "isOverall": false, "label": "https://localhost:44313/Listings", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 3.0, "minX": 0.0, "maxY": 2091.0, "series": [{"data": [[0.0, 2091.0], [600.0, 17.0], [700.0, 11.0], [800.0, 5.0], [900.0, 3.0], [1000.0, 10.0], [1100.0, 8.0], [1200.0, 7.0], [1300.0, 20.0], [1400.0, 18.0], [1500.0, 16.0], [1600.0, 21.0], [1700.0, 18.0], [1800.0, 20.0], [1900.0, 39.0], [2000.0, 46.0], [2100.0, 48.0], [2200.0, 43.0], [2300.0, 35.0], [2400.0, 45.0], [2500.0, 58.0], [2600.0, 33.0], [2700.0, 26.0], [2800.0, 29.0], [2900.0, 52.0], [3000.0, 40.0], [3100.0, 53.0], [3300.0, 37.0], [3200.0, 28.0], [3400.0, 26.0], [3500.0, 31.0], [3600.0, 39.0], [3700.0, 50.0], [3800.0, 53.0], [3900.0, 37.0], [4000.0, 37.0], [4100.0, 38.0], [4200.0, 30.0], [4300.0, 22.0], [4400.0, 47.0], [4500.0, 36.0], [4600.0, 41.0], [4800.0, 3.0], [4700.0, 11.0], [100.0, 520.0], [200.0, 122.0], [300.0, 35.0], [400.0, 16.0], [500.0, 13.0]], "isOverall": false, "label": "https://localhost:44313/Listings", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 4800.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 112.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1.500ms"], [2, "Requests having \nresponse time > 1.500ms"], [3, "Requests in error"]], "maxY": 2784.0, "series": [{"data": [[0.0, 2784.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 112.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1.500ms", "isController": false}, {"data": [[2.0, 1188.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1.500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.6537453215E12, "maxY": 1.0, "series": [{"data": [[1.65374535E12, 1.0], [1.6537453305E12, 1.0], [1.653745353E12, 1.0], [1.6537453245E12, 1.0], [1.653745347E12, 1.0], [1.6537453275E12, 1.0], [1.6537453395E12, 1.0], [1.6537453425E12, 1.0], [1.653745356E12, 1.0], [1.6537453335E12, 1.0], [1.6537453365E12, 1.0], [1.653745329E12, 1.0], [1.6537453515E12, 1.0], [1.653745332E12, 1.0], [1.6537453545E12, 1.0], [1.653745323E12, 1.0], [1.6537453455E12, 1.0], [1.653745326E12, 1.0], [1.6537453485E12, 1.0], [1.653745341E12, 1.0], [1.653745344E12, 1.0], [1.6537453215E12, 1.0], [1.653745335E12, 1.0], [1.6537453575E12, 1.0], [1.653745338E12, 1.0]], "isOverall": false, "label": "parallel bzm - Parallel", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1500, "maxX": 1.6537453575E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 19.411764705882362, "minX": 1.0, "maxY": 4885.0, "series": [{"data": [[2.0, 19.82420749279537], [3.0, 23.555075593952466], [4.0, 53.69686411149826], [5.0, 58.60000000000002], [6.0, 36.946564885496194], [7.0, 127.0], [8.0, 96.09615384615387], [9.0, 87.83582089552239], [10.0, 94.04545454545456], [11.0, 101.83928571428572], [12.0, 115.26666666666665], [13.0, 80.67187499999999], [14.0, 183.10638297872336], [15.0, 130.1320754716981], [16.0, 97.06521739130433], [17.0, 198.84444444444443], [18.0, 144.92], [19.0, 144.48076923076925], [20.0, 177.38297872340425], [21.0, 127.85714285714285], [22.0, 130.72916666666666], [23.0, 294.10810810810807], [24.0, 141.27777777777777], [25.0, 226.4], [26.0, 345.9090909090909], [27.0, 153.0], [28.0, 334.8076923076923], [29.0, 140.05555555555557], [30.0, 159.04761904761907], [31.0, 156.73333333333332], [33.0, 151.84000000000006], [32.0, 659.0], [34.0, 591.25], [35.0, 519.4285714285714], [36.0, 151.33333333333331], [37.0, 1146.3333333333335], [39.0, 197.5], [38.0, 405.27272727272725], [40.0, 232.75], [41.0, 1306.5714285714287], [42.0, 754.75], [43.0, 321.6666666666667], [44.0, 224.66666666666666], [45.0, 1007.2222222222222], [47.0, 270.0], [48.0, 1403.3333333333333], [49.0, 171.0], [51.0, 176.4], [50.0, 624.0], [53.0, 1015.0], [52.0, 180.66666666666669], [55.0, 331.6666666666667], [54.0, 499.75], [56.0, 841.3333333333333], [57.0, 247.6], [59.0, 252.71428571428572], [58.0, 1347.25], [60.0, 144.0], [61.0, 1040.125], [63.0, 240.2], [62.0, 598.5], [65.0, 1001.909090909091], [64.0, 292.66666666666663], [67.0, 217.5], [66.0, 347.5], [70.0, 1177.6], [69.0, 254.0], [68.0, 1299.8333333333333], [71.0, 295.0], [72.0, 688.5], [75.0, 1511.3333333333333], [74.0, 313.0], [73.0, 1340.3333333333333], [79.0, 1148.6666666666665], [78.0, 726.8], [77.0, 1188.75], [76.0, 599.0], [83.0, 570.1428571428572], [82.0, 842.25], [81.0, 948.0], [80.0, 574.6], [87.0, 869.3333333333334], [86.0, 964.3333333333334], [85.0, 252.0], [84.0, 1140.5], [90.0, 852.6666666666666], [91.0, 811.25], [89.0, 1074.0], [88.0, 665.0], [92.0, 210.0], [93.0, 1667.3333333333333], [95.0, 2131.5], [98.0, 2445.0], [96.0, 2112.0], [103.0, 3161.0], [102.0, 2124.0], [101.0, 3111.0], [100.0, 2444.0], [107.0, 2877.0], [106.0, 2128.0], [105.0, 2876.0], [104.0, 2232.0], [111.0, 1865.5], [110.0, 1459.0], [109.0, 1779.0], [108.0, 2214.0], [115.0, 1088.25], [114.0, 1661.5], [113.0, 1259.3333333333335], [112.0, 1510.0], [116.0, 615.0], [118.0, 3355.0], [117.0, 2791.5], [122.0, 3400.5], [125.0, 3573.0], [124.0, 3658.5], [133.0, 3404.0], [129.0, 3381.0], [128.0, 3157.6666666666665], [143.0, 1185.0], [142.0, 1166.0], [140.0, 3320.0], [139.0, 3013.0], [137.0, 3174.75], [149.0, 2630.6666666666665], [148.0, 465.0], [147.0, 2367.0], [146.0, 1853.0], [145.0, 805.5], [144.0, 2469.333333333333], [150.0, 2595.0], [159.0, 3410.0], [157.0, 3288.5], [155.0, 3066.0], [154.0, 3327.0], [152.0, 3352.0], [165.0, 3007.0], [162.0, 2805.0], [173.0, 2987.0], [171.0, 3177.0], [169.0, 3266.25], [182.0, 2700.0], [180.0, 2845.0], [178.0, 3626.0], [177.0, 3101.75], [191.0, 2802.0], [190.0, 2099.0], [189.0, 2245.0], [188.0, 2540.0], [187.0, 2264.0], [186.0, 3076.25], [199.0, 2023.0], [198.0, 2136.0], [197.0, 2291.0], [196.0, 2141.0], [195.0, 2160.0], [194.0, 2994.0], [193.0, 2901.0], [192.0, 2390.0], [207.0, 1510.3333333333335], [206.0, 1563.6666666666665], [205.0, 1623.6666666666665], [204.0, 2529.0], [203.0, 2077.0], [202.0, 2136.0], [201.0, 2004.0], [200.0, 2275.0], [211.0, 1909.0], [210.0, 1852.5], [209.0, 1657.0], [208.0, 1626.0], [215.0, 2909.0], [214.0, 2946.0], [213.0, 3162.0], [212.0, 2921.0], [223.0, 2855.0], [222.0, 2926.0], [221.0, 2878.0], [220.0, 2939.0], [219.0, 2939.0], [218.0, 2912.0], [217.0, 2943.0], [216.0, 2906.0], [231.0, 3334.0], [230.0, 2732.0], [229.0, 2778.0], [228.0, 2930.0], [227.0, 2760.0], [226.0, 2826.0], [225.0, 2898.0], [224.0, 3423.0], [239.0, 2684.0], [238.0, 2639.0], [237.0, 2640.0], [236.0, 2855.0], [235.0, 3138.0], [234.0, 2954.0], [233.0, 2664.0], [232.0, 2635.0], [247.0, 2497.0], [246.0, 2552.0], [245.0, 2619.0], [244.0, 2571.0], [243.0, 2686.0], [242.0, 2811.0], [241.0, 2539.0], [240.0, 2619.0], [255.0, 2525.0], [254.0, 2359.0], [253.0, 2500.0], [252.0, 2518.0], [251.0, 2519.0], [250.0, 2555.0], [249.0, 2510.0], [248.0, 2576.0], [270.0, 3737.0], [271.0, 3829.0], [269.0, 3800.0], [268.0, 3771.0], [267.0, 3818.0], [266.0, 3772.0], [265.0, 3878.0], [264.0, 3841.0], [263.0, 3916.0], [257.0, 2412.0], [256.0, 2476.0], [259.0, 2501.0], [258.0, 2457.0], [262.0, 3437.0], [261.0, 2546.0], [260.0, 2408.0], [286.0, 3697.0], [287.0, 3666.0], [285.0, 3637.0], [284.0, 3669.0], [283.0, 3776.0], [282.0, 3765.0], [281.0, 3688.0], [280.0, 3722.0], [279.0, 3815.0], [273.0, 3873.0], [272.0, 3735.0], [275.0, 3791.0], [274.0, 3824.0], [278.0, 3740.0], [277.0, 3712.0], [276.0, 3699.0], [302.0, 2340.3333333333335], [303.0, 2393.6666666666665], [301.0, 2040.1666666666665], [300.0, 2115.5], [299.0, 1886.857142857143], [298.0, 2213.75], [297.0, 2512.5], [296.0, 2503.5], [295.0, 2802.5], [289.0, 3629.0], [288.0, 3672.0], [291.0, 3637.0], [290.0, 3638.0], [294.0, 2492.0], [293.0, 2890.5], [292.0, 2881.0], [318.0, 2148.3333333333335], [319.0, 2126.6666666666665], [317.0, 1871.0], [316.0, 2126.6666666666665], [315.0, 2122.6666666666665], [314.0, 2031.0], [313.0, 2177.0], [312.0, 2507.0], [311.0, 2265.0], [305.0, 2670.5], [304.0, 2753.0], [307.0, 2060.5], [306.0, 2318.3333333333335], [310.0, 2309.0], [309.0, 2166.6666666666665], [308.0, 2586.0], [334.0, 3208.0], [321.0, 2569.5], [320.0, 1836.6666666666665], [327.0, 3366.0], [326.0, 3367.0], [325.0, 3330.0], [324.0, 3451.0], [335.0, 3370.0], [333.0, 3240.0], [332.0, 3440.0], [323.0, 3499.0], [322.0, 3328.0], [331.0, 3198.0], [330.0, 3258.0], [329.0, 3378.0], [328.0, 3290.0], [338.0, 3237.0], [345.0, 3175.0], [344.0, 3192.0], [343.0, 3265.0], [342.0, 3413.0], [341.0, 3272.0], [340.0, 3153.0], [339.0, 3349.0], [337.0, 3155.0], [336.0, 3266.0], [366.0, 2400.285714285714], [367.0, 2567.0], [365.0, 1806.0], [359.0, 1587.0], [358.0, 2913.0], [357.0, 3941.0], [356.0, 4017.0], [364.0, 3873.0], [355.0, 4002.0], [354.0, 4098.0], [353.0, 3395.571428571429], [352.0, 3297.0], [363.0, 4006.0], [362.0, 1452.0], [361.0, 3864.0], [360.0, 1609.0], [376.0, 2376.3333333333335], [380.0, 2737.3333333333335], [381.0, 3777.0], [383.0, 3817.0], [382.0, 3870.0], [371.0, 2139.2], [370.0, 2333.0], [369.0, 2992.5], [368.0, 3029.5], [379.0, 2555.6666666666665], [378.0, 3064.5], [377.0, 2039.3333333333333], [375.0, 2235.0], [374.0, 2035.0], [373.0, 2169.75], [372.0, 1485.0], [398.0, 1351.0], [399.0, 1316.0], [397.0, 3657.0], [396.0, 3706.0], [395.0, 3988.0], [394.0, 3845.0], [393.0, 1350.0], [392.0, 3712.0], [391.0, 3760.0], [385.0, 3828.0], [384.0, 3769.0], [387.0, 1721.0], [386.0, 3852.0], [390.0, 1344.0], [389.0, 3804.0], [388.0, 1814.0], [414.0, 2347.6666666666665], [415.0, 1983.3333333333333], [413.0, 3056.0], [412.0, 2736.0], [411.0, 3578.0], [410.0, 3588.0], [409.0, 3637.0], [408.0, 3706.0], [407.0, 3611.0], [401.0, 3740.0], [400.0, 3718.0], [403.0, 3671.0], [402.0, 3634.0], [406.0, 3620.0], [405.0, 3733.0], [404.0, 3721.0], [418.0, 2960.5], [424.0, 2657.0], [423.0, 2699.0], [425.0, 3005.0], [427.0, 1477.0], [426.0, 1760.0], [422.0, 2449.0], [421.0, 1811.0], [420.0, 2686.6666666666665], [419.0, 1857.3333333333333], [429.0, 3857.0], [428.0, 1490.0], [431.0, 1553.0], [430.0, 1596.0], [417.0, 2928.5], [416.0, 2518.6666666666665], [446.0, 3863.0], [447.0, 1768.0], [445.0, 1664.0], [444.0, 3788.0], [443.0, 3836.0], [442.0, 1428.0], [441.0, 3917.0], [440.0, 3956.0], [439.0, 3906.0], [433.0, 1608.0], [432.0, 1602.0], [435.0, 1756.0], [434.0, 1605.0], [438.0, 3798.0], [437.0, 1711.0], [436.0, 1587.0], [461.0, 3882.0], [463.0, 3940.5], [460.0, 3883.0], [451.0, 1874.0], [450.0, 4114.0], [449.0, 4083.0], [448.0, 2002.0], [459.0, 1748.0], [458.0, 2046.0], [457.0, 1803.0], [456.0, 1734.0], [455.0, 2917.0], [453.0, 4102.0], [452.0, 4117.0], [472.0, 2512.5], [479.0, 3138.0], [475.0, 2915.5], [474.0, 2214.3333333333335], [473.0, 3006.0], [471.0, 2771.3333333333335], [470.0, 2785.3333333333335], [469.0, 2588.0], [468.0, 3794.0], [478.0, 3792.0], [477.0, 4017.0], [476.0, 1493.0], [467.0, 4056.0], [466.0, 3796.0], [465.0, 2935.5], [494.0, 3284.6666666666665], [495.0, 3280.5], [493.0, 3087.0], [492.0, 3337.5], [491.0, 2703.6666666666665], [490.0, 2945.6666666666665], [489.0, 2655.6666666666665], [488.0, 2120.0], [487.0, 2631.0], [481.0, 2718.4], [480.0, 2779.8], [483.0, 2177.0], [482.0, 3124.5], [486.0, 2331.3333333333335], [485.0, 2425.75], [484.0, 2450.666666666667], [510.0, 4016.0], [496.0, 3367.0], [497.0, 3909.0], [499.0, 3813.0], [498.0, 3921.0], [503.0, 1814.0], [502.0, 1755.0], [501.0, 1705.0], [500.0, 1818.0], [511.0, 3984.0], [509.0, 3998.0], [508.0, 3799.0], [507.0, 1674.0], [506.0, 4130.0], [505.0, 3791.0], [504.0, 3824.0], [518.0, 2559.2222222222226], [524.0, 2928.75], [525.0, 2444.5], [526.0, 2272.0], [515.0, 3019.6666666666665], [514.0, 3150.0], [512.0, 4074.0], [527.0, 4134.0], [523.0, 2634.272727272727], [520.0, 2257.3333333333335], [516.0, 2429.5714285714284], [517.0, 2272.142857142857], [519.0, 3613.5], [537.0, 4112.0], [536.0, 4097.0], [539.0, 2210.0], [538.0, 2120.0], [541.0, 4006.0], [540.0, 4090.0], [543.0, 2076.0], [529.0, 4114.0], [528.0, 4180.0], [531.0, 4220.0], [530.0, 2624.0], [533.0, 4152.0], [532.0, 2530.0], [535.0, 4120.0], [534.0, 4243.0], [542.0, 4209.0], [522.0, 2369.8333333333335], [521.0, 2606.75], [572.0, 2732.5], [574.0, 3369.2], [575.0, 2960.5], [561.0, 2329.0], [560.0, 2198.0], [563.0, 4025.0], [562.0, 2285.0], [565.0, 4047.0], [564.0, 4146.0], [573.0, 3307.5], [569.0, 3852.3333333333335], [568.0, 3787.5], [551.0, 2384.0], [550.0, 2452.0], [549.0, 4109.0], [548.0, 2012.0], [547.0, 4005.0], [546.0, 2008.0], [545.0, 2019.0], [544.0, 4028.0], [559.0, 4100.0], [558.0, 4370.0], [557.0, 4343.0], [556.0, 2439.0], [555.0, 4338.0], [554.0, 2520.0], [553.0, 2441.0], [552.0, 2334.0], [567.0, 3514.3333333333335], [566.0, 3427.0], [571.0, 4240.0], [570.0, 4282.0], [604.0, 4212.0], [580.0, 3447.4], [577.0, 2853.2], [583.0, 3371.5], [601.0, 4271.0], [600.0, 4526.0], [603.0, 4507.0], [602.0, 4459.0], [605.0, 4059.0], [607.0, 4472.0], [593.0, 4446.0], [592.0, 4050.0], [595.0, 4212.0], [594.0, 4073.0], [606.0, 2424.0], [597.0, 3241.5], [596.0, 3754.0], [582.0, 2794.5], [581.0, 2867.5], [579.0, 3488.6666666666665], [578.0, 3928.5], [576.0, 3161.833333333333], [591.0, 4160.0], [590.0, 4450.0], [589.0, 4104.0], [588.0, 4195.0], [587.0, 4392.0], [586.0, 4189.0], [585.0, 4506.0], [584.0, 4201.0], [599.0, 3490.0], [598.0, 3898.0], [624.0, 3262.0], [628.0, 4161.5], [630.0, 3952.3333333333335], [631.0, 4181.5], [629.0, 4305.5], [627.0, 2874.5], [626.0, 4107.5], [625.0, 3430.5], [623.0, 2567.0], [622.0, 3000.6666666666665], [609.0, 3532.25], [610.0, 3758.0], [612.0, 3981.75], [611.0, 3747.3846153846152], [608.0, 3590.0], [614.0, 3345.9], [615.0, 4014.5], [639.0, 4569.0], [638.0, 2684.0], [637.0, 4466.0], [636.0, 2732.0], [635.0, 4490.0], [634.0, 4578.0], [633.0, 4530.0], [632.0, 4682.0], [613.0, 3737.75], [621.0, 2972.2], [619.0, 3483.3333333333335], [620.0, 3930.0], [618.0, 3594.0], [617.0, 3713.8], [616.0, 3554.0], [668.0, 4670.0], [671.0, 4617.0], [657.0, 4674.0], [656.0, 4600.0], [659.0, 4701.0], [658.0, 2971.0], [661.0, 4618.0], [660.0, 4684.0], [670.0, 4488.0], [669.0, 4651.0], [667.0, 4699.0], [666.0, 4609.0], [665.0, 2959.0], [664.0, 4641.0], [655.0, 4429.0], [641.0, 4521.0], [640.0, 4445.0], [643.0, 4885.0], [642.0, 4427.0], [645.0, 4410.0], [644.0, 4383.0], [647.0, 4453.0], [646.0, 2681.0], [654.0, 4465.0], [653.0, 2592.0], [652.0, 4405.0], [651.0, 2610.0], [650.0, 4382.0], [649.0, 4444.0], [648.0, 2632.0], [663.0, 4586.0], [662.0, 4633.0], [700.0, 3551.0], [701.0, 3976.75], [703.0, 3818.5714285714284], [689.0, 4365.0], [688.0, 2996.5], [691.0, 3818.5], [690.0, 3791.5], [693.0, 3919.6666666666665], [692.0, 3680.0], [702.0, 3928.0], [699.0, 3614.0], [698.0, 4404.0], [697.0, 3567.0], [696.0, 3860.6666666666665], [687.0, 2946.5], [673.0, 4469.0], [672.0, 4626.0], [675.0, 4481.0], [674.0, 4624.0], [677.0, 4463.0], [676.0, 4545.0], [679.0, 4460.0], [678.0, 4590.0], [686.0, 2803.0], [685.0, 2652.0], [684.0, 2825.0], [683.0, 4654.0], [682.0, 4569.0], [681.0, 2877.0], [680.0, 4557.0], [695.0, 3747.0], [694.0, 4086.75], [732.0, 4016.5], [709.0, 2663.25], [705.0, 3583.0], [704.0, 3831.0000000000005], [715.0, 3351.0], [714.0, 3100.0], [713.0, 3056.0], [712.0, 3088.0], [716.0, 4612.0], [718.0, 4580.0], [717.0, 4596.0], [719.0, 3472.0], [707.0, 3803.0], [710.0, 3143.3333333333335], [711.0, 4616.0], [729.0, 3050.0], [728.0, 4092.75], [731.0, 3990.6666666666665], [730.0, 4084.6666666666665], [733.0, 3795.5], [708.0, 2982.6], [706.0, 3569.3333333333335], [735.0, 4501.0], [720.0, 3478.25], [722.0, 3202.25], [721.0, 3514.6666666666665], [725.0, 3735.3333333333335], [724.0, 3202.0], [723.0, 3837.0], [727.0, 3177.3333333333335], [726.0, 4047.3333333333335], [734.0, 4387.0], [743.0, 3175.0], [763.0, 3745.0], [736.0, 3671.75], [751.0, 3551.3333333333335], [750.0, 3568.3333333333335], [749.0, 4538.0], [748.0, 4497.0], [747.0, 4552.666666666667], [746.0, 3908.0], [745.0, 3891.0], [744.0, 4676.5], [764.0, 2852.5], [765.0, 2835.0], [762.0, 3384.5], [761.0, 3518.9999999999995], [760.0, 4406.5], [742.0, 4718.0], [741.0, 3285.0], [740.0, 4598.0], [739.0, 4694.0], [738.0, 4664.0], [737.0, 4677.0], [759.0, 2833.0], [758.0, 4365.0], [757.0, 3094.5], [756.0, 3364.25], [755.0, 3734.5], [752.0, 3531.6666666666665], [1.0, 19.411764705882362]], "isOverall": false, "label": "https://localhost:44313/Listings", "isController": false}, {"data": [[147.28036238981366, 1001.9076885406454]], "isOverall": false, "label": "https://localhost:44313/Listings-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 765.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 2474.6666666666665, "minX": 1.6537453215E12, "maxY": 2.98618E7, "series": [{"data": [[1.65374535E12, 3709568.0], [1.6537453305E12, 6935962.666666667], [1.653745353E12, 8816784.0], [1.6537453245E12, 3467880.0], [1.653745347E12, 1.5879493333333334E7], [1.6537453275E12, 5232240.0], [1.6537453395E12, 1.2108984E7], [1.6537453425E12, 1.3932056E7], [1.653745356E12, 1.9826442666666668E7], [1.6537453335E12, 8639786.666666666], [1.6537453365E12, 1.0465949333333334E7], [1.653745329E12, 5171400.0], [1.6537453515E12, 7783770.666666667], [1.653745332E12, 6935912.0], [1.6537453545E12, 9546965.333333334], [1.653745323E12, 1764360.0], [1.6537453455E12, 1.630664E7], [1.653745326E12, 3467880.0], [1.6537453485E12, 1.2957552E7], [1.653745341E12, 1.1682192E7], [1.653745344E12, 1.3141693333333334E7], [1.6537453215E12, 1764360.0], [1.653745335E12, 8640040.0], [1.6537453575E12, 2.98618E7], [1.653745338E12, 1.0405008E7]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.65374535E12, 5205.333333333333], [1.6537453305E12, 9728.0], [1.653745353E12, 12373.333333333334], [1.6537453245E12, 4864.0], [1.653745347E12, 22272.0], [1.6537453275E12, 7338.666666666667], [1.6537453395E12, 16981.333333333332], [1.6537453425E12, 19541.333333333332], [1.653745356E12, 27818.666666666668], [1.6537453335E12, 12117.333333333334], [1.6537453365E12, 14677.333333333334], [1.653745329E12, 7253.333333333333], [1.6537453515E12, 10922.666666666666], [1.653745332E12, 9728.0], [1.6537453545E12, 13397.333333333334], [1.653745323E12, 2474.6666666666665], [1.6537453455E12, 22869.333333333332], [1.653745326E12, 4864.0], [1.6537453485E12, 18176.0], [1.653745341E12, 16384.0], [1.653745344E12, 18432.0], [1.6537453215E12, 2474.6666666666665], [1.653745335E12, 12117.333333333334], [1.6537453575E12, 41898.666666666664], [1.653745338E12, 14592.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1500, "maxX": 1.6537453575E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 18.97368421052631, "minX": 1.6537453215E12, "maxY": 3844.4570552147256, "series": [{"data": [[1.65374535E12, 586.2295081967212], [1.6537453305E12, 18.97368421052631], [1.653745353E12, 2608.1379310344837], [1.6537453245E12, 19.315789473684216], [1.653745347E12, 102.27969348659003], [1.6537453275E12, 19.046511627906977], [1.6537453395E12, 37.88944723618092], [1.6537453425E12, 94.10043668122273], [1.653745356E12, 3844.4570552147256], [1.6537453335E12, 24.105633802816893], [1.6537453365E12, 30.627906976744196], [1.653745329E12, 21.15294117647059], [1.6537453515E12, 1785.8671875000002], [1.653745332E12, 19.833333333333332], [1.6537453545E12, 3477.6496815286646], [1.653745323E12, 19.551724137931036], [1.6537453455E12, 148.14925373134335], [1.653745326E12, 22.017543859649116], [1.6537453485E12, 237.9201877934272], [1.653745341E12, 38.255208333333336], [1.653745344E12, 95.12500000000004], [1.6537453215E12, 28.758620689655167], [1.653745335E12, 24.52816901408452], [1.6537453575E12, 2947.8004073319767], [1.653745338E12, 27.824561403508767]], "isOverall": false, "label": "https://localhost:44313/Listings", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1500, "maxX": 1.6537453575E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 18.675438596491222, "minX": 1.6537453215E12, "maxY": 3843.374233128834, "series": [{"data": [[1.65374535E12, 582.7377049180327], [1.6537453305E12, 18.675438596491222], [1.653745353E12, 2606.758620689655], [1.6537453245E12, 18.859649122807017], [1.653745347E12, 101.00000000000006], [1.6537453275E12, 18.697674418604645], [1.6537453395E12, 37.00502512562815], [1.6537453425E12, 93.03493449781664], [1.653745356E12, 3843.374233128834], [1.6537453335E12, 23.556338028169016], [1.6537453365E12, 30.151162790697686], [1.653745329E12, 20.83529411764706], [1.6537453515E12, 1785.0468750000005], [1.653745332E12, 19.38596491228071], [1.6537453545E12, 3476.394904458598], [1.653745323E12, 19.17241379310345], [1.6537453455E12, 147.09328358208953], [1.653745326E12, 21.649122807017537], [1.6537453485E12, 236.94835680751174], [1.653745341E12, 37.56770833333334], [1.653745344E12, 94.27314814814812], [1.6537453215E12, 28.27586206896552], [1.653745335E12, 23.957746478873243], [1.6537453575E12, 2946.8513238289215], [1.653745338E12, 27.2280701754386]], "isOverall": false, "label": "https://localhost:44313/Listings", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1500, "maxX": 1.6537453575E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 9.616279069767439, "minX": 1.6537453215E12, "maxY": 77.97963340122197, "series": [{"data": [[1.65374535E12, 56.54098360655738], [1.6537453305E12, 9.754385964912279], [1.653745353E12, 54.731034482758616], [1.6537453245E12, 9.85964912280702], [1.653745347E12, 29.03065134099616], [1.6537453275E12, 9.616279069767439], [1.6537453395E12, 18.13065326633167], [1.6537453425E12, 29.10917030567687], [1.653745356E12, 62.92638036809812], [1.6537453335E12, 12.183098591549296], [1.6537453365E12, 14.796511627906975], [1.653745329E12, 10.694117647058826], [1.6537453515E12, 46.749999999999986], [1.653745332E12, 9.97368421052632], [1.6537453545E12, 68.28662420382167], [1.653745323E12, 10.03448275862069], [1.6537453455E12, 39.07462686567167], [1.653745326E12, 11.754385964912279], [1.6537453485E12, 49.178403755868544], [1.653745341E12, 17.661458333333343], [1.653745344E12, 27.999999999999996], [1.6537453215E12, 12.344827586206895], [1.653745335E12, 12.119718309859154], [1.6537453575E12, 77.97963340122197], [1.653745338E12, 14.590643274853798]], "isOverall": false, "label": "https://localhost:44313/Listings", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1500, "maxX": 1.6537453575E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 15.0, "minX": 1.6537453215E12, "maxY": 4885.0, "series": [{"data": [[1.65374535E12, 1270.0], [1.6537453305E12, 27.0], [1.653745353E12, 3801.0], [1.6537453245E12, 35.0], [1.653745347E12, 244.0], [1.6537453275E12, 33.0], [1.6537453395E12, 123.0], [1.6537453425E12, 229.0], [1.653745356E12, 4885.0], [1.6537453335E12, 64.0], [1.6537453365E12, 87.0], [1.653745329E12, 63.0], [1.6537453515E12, 2742.0], [1.653745332E12, 36.0], [1.6537453545E12, 4873.0], [1.653745323E12, 37.0], [1.6537453455E12, 344.0], [1.653745326E12, 67.0], [1.6537453485E12, 739.0], [1.653745341E12, 90.0], [1.653745344E12, 358.0], [1.6537453215E12, 142.0], [1.653745335E12, 67.0], [1.6537453575E12, 4203.0], [1.653745338E12, 58.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.65374535E12, 1149.8000000000004], [1.6537453305E12, 22.0], [1.653745353E12, 3531.4], [1.6537453245E12, 22.40000000000002], [1.653745347E12, 167.8], [1.6537453275E12, 22.0], [1.6537453395E12, 58.0], [1.6537453425E12, 143.0], [1.653745356E12, 4639.6], [1.6537453335E12, 30.700000000000017], [1.6537453365E12, 43.0], [1.653745329E12, 30.80000000000004], [1.6537453515E12, 2245.3], [1.653745332E12, 24.0], [1.6537453545E12, 4272.0], [1.653745323E12, 22.0], [1.6537453455E12, 217.1], [1.653745326E12, 33.2], [1.6537453485E12, 463.39999999999986], [1.653745341E12, 55.70000000000002], [1.653745344E12, 164.0], [1.6537453215E12, 39.0], [1.653745335E12, 30.700000000000017], [1.6537453575E12, 3851.2], [1.653745338E12, 35.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.65374535E12, 1270.0], [1.6537453305E12, 27.0], [1.653745353E12, 3770.6399999999994], [1.6537453245E12, 35.0], [1.653745347E12, 231.31999999999994], [1.6537453275E12, 33.0], [1.6537453395E12, 113.0], [1.6537453425E12, 202.69999999999965], [1.653745356E12, 4795.92], [1.6537453335E12, 58.83999999999992], [1.6537453365E12, 86.27000000000001], [1.653745329E12, 63.0], [1.6537453515E12, 2686.6099999999988], [1.653745332E12, 35.69999999999999], [1.6537453545E12, 4627.0799999999945], [1.653745323E12, 37.0], [1.6537453455E12, 269.65000000000003], [1.653745326E12, 67.0], [1.6537453485E12, 672.3], [1.653745341E12, 90.0], [1.653745344E12, 302.65999999999997], [1.6537453215E12, 142.0], [1.653745335E12, 66.57], [1.6537453575E12, 4102.96], [1.653745338E12, 57.28]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.65374535E12, 1194.6], [1.6537453305E12, 24.25], [1.653745353E12, 3663.8999999999996], [1.6537453245E12, 33.099999999999994], [1.653745347E12, 197.39999999999986], [1.6537453275E12, 23.0], [1.6537453395E12, 68.0], [1.6537453425E12, 157.0], [1.653745356E12, 4690.5], [1.6537453335E12, 36.0], [1.6537453365E12, 59.349999999999994], [1.653745329E12, 45.90000000000002], [1.6537453515E12, 2354.0], [1.653745332E12, 28.0], [1.6537453545E12, 4364.9], [1.653745323E12, 34.5], [1.6537453455E12, 230.64999999999995], [1.653745326E12, 51.89999999999995], [1.6537453485E12, 599.3], [1.653745341E12, 66.0], [1.653745344E12, 192.19999999999982], [1.6537453215E12, 110.0], [1.653745335E12, 39.69999999999999], [1.6537453575E12, 3945.0], [1.653745338E12, 38.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.65374535E12, 168.0], [1.6537453305E12, 15.0], [1.653745353E12, 866.0], [1.6537453245E12, 16.0], [1.653745347E12, 41.0], [1.6537453275E12, 16.0], [1.6537453395E12, 24.0], [1.6537453425E12, 38.0], [1.653745356E12, 820.0], [1.6537453335E12, 17.0], [1.6537453365E12, 20.0], [1.653745329E12, 15.0], [1.6537453515E12, 1017.0], [1.653745332E12, 15.0], [1.6537453545E12, 1085.0], [1.653745323E12, 17.0], [1.6537453455E12, 41.0], [1.653745326E12, 16.0], [1.6537453485E12, 42.0], [1.653745341E12, 24.0], [1.653745344E12, 38.0], [1.6537453215E12, 17.0], [1.653745335E12, 17.0], [1.6537453575E12, 1286.0], [1.653745338E12, 20.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.65374535E12, 526.0], [1.6537453305E12, 19.0], [1.653745353E12, 2457.0], [1.6537453245E12, 18.0], [1.653745347E12, 95.0], [1.6537453275E12, 18.0], [1.6537453395E12, 32.0], [1.6537453425E12, 89.0], [1.653745356E12, 4208.0], [1.6537453335E12, 22.0], [1.6537453365E12, 27.0], [1.653745329E12, 18.0], [1.6537453515E12, 1775.5], [1.653745332E12, 19.0], [1.6537453545E12, 3756.0], [1.653745323E12, 18.0], [1.6537453455E12, 145.0], [1.653745326E12, 19.0], [1.6537453485E12, 195.0], [1.653745341E12, 35.0], [1.653745344E12, 82.0], [1.6537453215E12, 20.0], [1.653745335E12, 22.0], [1.6537453575E12, 3111.0], [1.653745338E12, 27.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1500, "maxX": 1.6537453575E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 18.0, "minX": 10.0, "maxY": 4447.0, "series": [{"data": [[37.0, 19.0], [38.0, 18.0], [48.0, 18.0], [57.0, 18.0], [58.0, 18.5], [61.0, 526.0], [62.0, 1626.5], [65.0, 19.0], [66.0, 2076.5], [75.0, 19.0], [77.0, 18.0], [87.0, 21.0], [94.0, 493.0], [96.0, 666.0], [102.0, 25.0], [114.0, 27.0], [112.0, 3471.5], [116.0, 28.0], [123.0, 28.0], [133.0, 35.0], [132.0, 35.0], [135.0, 66.0], [146.0, 70.0], [148.0, 146.5], [149.0, 253.0], [154.0, 90.0], [155.0, 71.0], [10.0, 24.0], [170.0, 114.0], [179.0, 4447.0], [190.0, 137.5], [265.0, 2619.0], [19.0, 18.5], [373.0, 3776.0], [29.0, 19.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 373.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 17.5, "minX": 10.0, "maxY": 4447.0, "series": [{"data": [[37.0, 18.0], [38.0, 17.5], [48.0, 18.0], [57.0, 18.0], [58.0, 18.0], [61.0, 525.0], [62.0, 1625.5], [65.0, 19.0], [66.0, 2075.5], [75.0, 19.0], [77.0, 18.0], [87.0, 20.0], [94.0, 492.5], [96.0, 665.5], [102.0, 24.5], [114.0, 26.0], [112.0, 3471.0], [116.0, 27.0], [123.0, 27.0], [133.0, 34.0], [132.0, 34.0], [135.0, 66.0], [146.0, 69.0], [148.0, 146.0], [149.0, 252.0], [154.0, 89.0], [155.0, 70.0], [10.0, 23.5], [170.0, 113.5], [179.0, 4447.0], [190.0, 136.5], [265.0, 2618.0], [19.0, 18.0], [373.0, 3776.0], [29.0, 18.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 373.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.6666666666666666, "minX": 1.65374532E12, "maxY": 191.33333333333334, "series": [{"data": [[1.65374535E12, 188.0], [1.6537453305E12, 76.0], [1.653745353E12, 191.33333333333334], [1.6537453245E12, 38.0], [1.653745347E12, 170.66666666666666], [1.6537453275E12, 57.333333333333336], [1.6537453395E12, 132.66666666666666], [1.65374532E12, 0.6666666666666666], [1.6537453425E12, 151.33333333333334], [1.653745356E12, 64.66666666666667], [1.6537453335E12, 96.0], [1.6537453365E12, 114.0], [1.653745329E12, 56.666666666666664], [1.6537453515E12, 191.33333333333334], [1.653745332E12, 76.0], [1.6537453545E12, 184.66666666666666], [1.653745323E12, 19.333333333333332], [1.6537453455E12, 171.33333333333334], [1.653745326E12, 38.0], [1.6537453485E12, 189.33333333333334], [1.653745341E12, 133.33333333333334], [1.653745344E12, 152.66666666666666], [1.6537453215E12, 19.333333333333332], [1.653745335E12, 94.66666666666667], [1.653745338E12, 115.33333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1500, "maxX": 1.653745356E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 19.333333333333332, "minX": 1.6537453215E12, "maxY": 327.3333333333333, "series": [{"data": [[1.65374535E12, 40.666666666666664], [1.6537453305E12, 76.0], [1.653745353E12, 96.66666666666667], [1.6537453245E12, 38.0], [1.653745347E12, 174.0], [1.6537453275E12, 57.333333333333336], [1.6537453395E12, 132.66666666666666], [1.6537453425E12, 152.66666666666666], [1.653745356E12, 217.33333333333334], [1.6537453335E12, 94.66666666666667], [1.6537453365E12, 114.66666666666667], [1.653745329E12, 56.666666666666664], [1.6537453515E12, 85.33333333333333], [1.653745332E12, 76.0], [1.6537453545E12, 104.66666666666667], [1.653745323E12, 19.333333333333332], [1.6537453455E12, 178.66666666666666], [1.653745326E12, 38.0], [1.6537453485E12, 142.0], [1.653745341E12, 128.0], [1.653745344E12, 144.0], [1.6537453215E12, 19.333333333333332], [1.653745335E12, 94.66666666666667], [1.6537453575E12, 327.3333333333333], [1.653745338E12, 114.0]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1500, "maxX": 1.6537453575E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 19.333333333333332, "minX": 1.6537453215E12, "maxY": 327.3333333333333, "series": [{"data": [[1.65374535E12, 40.666666666666664], [1.6537453305E12, 76.0], [1.653745353E12, 96.66666666666667], [1.6537453245E12, 38.0], [1.653745347E12, 174.0], [1.6537453275E12, 57.333333333333336], [1.6537453395E12, 132.66666666666666], [1.6537453425E12, 152.66666666666666], [1.653745356E12, 217.33333333333334], [1.6537453335E12, 94.66666666666667], [1.6537453365E12, 114.66666666666667], [1.653745329E12, 56.666666666666664], [1.6537453515E12, 85.33333333333333], [1.653745332E12, 76.0], [1.6537453545E12, 104.66666666666667], [1.653745323E12, 19.333333333333332], [1.6537453455E12, 178.66666666666666], [1.653745326E12, 38.0], [1.6537453485E12, 142.0], [1.653745341E12, 128.0], [1.653745344E12, 144.0], [1.6537453215E12, 19.333333333333332], [1.653745335E12, 94.66666666666667], [1.6537453575E12, 327.3333333333333], [1.653745338E12, 114.0]], "isOverall": false, "label": "https://localhost:44313/Listings-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1500, "maxX": 1.6537453575E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 19.333333333333332, "minX": 1.6537453215E12, "maxY": 327.3333333333333, "series": [{"data": [[1.65374535E12, 40.666666666666664], [1.6537453305E12, 76.0], [1.653745353E12, 96.66666666666667], [1.6537453245E12, 38.0], [1.653745347E12, 174.0], [1.6537453275E12, 57.333333333333336], [1.6537453395E12, 132.66666666666666], [1.6537453425E12, 152.66666666666666], [1.653745356E12, 217.33333333333334], [1.6537453335E12, 94.66666666666667], [1.6537453365E12, 114.66666666666667], [1.653745329E12, 56.666666666666664], [1.6537453515E12, 85.33333333333333], [1.653745332E12, 76.0], [1.6537453545E12, 104.66666666666667], [1.653745323E12, 19.333333333333332], [1.6537453455E12, 178.66666666666666], [1.653745326E12, 38.0], [1.6537453485E12, 142.0], [1.653745341E12, 128.0], [1.653745344E12, 144.0], [1.6537453215E12, 19.333333333333332], [1.653745335E12, 94.66666666666667], [1.6537453575E12, 327.3333333333333], [1.653745338E12, 114.0]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 1500, "maxX": 1.6537453575E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

