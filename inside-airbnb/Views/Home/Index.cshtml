@model ListingsViewModel

@{
    ViewData["Title"] = "Home Page";
}

<link href="https://api.mapbox.com/mapbox-gl-js/v2.8.2/mapbox-gl.css" rel="stylesheet">

<h1>Index</h1>
<p>
    <a asp-controller="Listings" asp-action="Create">Create New</a>
</p>
<p>
   Selected item: @Model.SelectedListing!.Id
</p>

<form asp-controller="Home" asp-action="Index" method="get">
    Neighbourhood: <select asp-for="Neighbourhood" asp-items="Model.Neighbourhoods">
        <option value="">All</option>
    </select>
    Min price: <input type="number" asp-for="MinPrice" />
    Max price: <input type="number" asp-for="MaxPrice" />
    Nr of reviews: <input type="number" asp-for="NumberOfReviews" />
    <input type="submit" value="Filter" />
</form>

<div id="map" style="width: 100%; height: 500px;"></div>

<script src="https://api.mapbox.com/mapbox-gl-js/v2.8.2/mapbox-gl.js"></script>
<script>
    mapboxgl.accessToken = 'pk.eyJ1IjoiaWtiZW5kZXNqYWFrIiwiYSI6ImNsMnVjdnRrZDAwdWcza296Zm1zN2pnbXoifQ.FrZP3oNq-RBL9RMJES4xsQ';
map = new mapboxgl.Map({
    container: 'map',
    style: 'mapbox://styles/mapbox/streets-v11',
    center: [@Json.Serialize(Model.Longitude), @Json.Serialize(Model.Latitude)],
        zoom: @Json.Serialize(Model.Zoom),
    });
    map.on('load', () => {
        map.addSource('listings', {
            type: 'geojson',
            data: @Json.Serialize(Model.Listings),
            cluster: true,
            clusterMaxZoom: 14,
            clusterRadius: 50
        });
        map.addLayer({
            id: 'clusters',
            type: 'circle',
            source: 'listings',
            filter: ['has', 'point_count'],
            paint: {
                'circle-color': [
                    'step',
                    ['get', 'point_count'],
                    '#a0a0a0',
                    100,
                    '#848484',
                    400,
                    '#424242',
                    750,
                    '#222222'
                ],
                'circle-radius': [
                    'step',
                    ['get', 'point_count'],
                    20,
                    100,
                    30,
                    750,
                    40
                ]
            }
        });

        map.addLayer({
            id: 'cluster-count',
            type: 'symbol',
            source: 'listings',
            filter: ['has', 'point_count'],
            layout: {
                'text-field': '{point_count_abbreviated}',
                'text-size': 16,
            },
            paint: {
                "text-color": "#ffffff"
            }
        });

        map.addLayer({
            id: 'points',
            type: 'circle',
            filter: ['!', ['has', 'point_count']],
            source: 'listings',
            paint: {
                'circle-color': '#000',
                'circle-radius': 6,
            }
        });

        map.on('click', 'points', function (e) {    
            //const coordinates = e.features[0].geometry.coordinates.slice();
            //// const description = e.features[0].properties.description;
            //const description = e.features[0].properties.listingId;

            //console.log(e)
            //console.log(map.getZoom())
            //console.log(map.getCenter())
 
            //// Ensure that if the map is zoomed out such that multiple
            //// copies of the feature are visible, the popup appears
            //// over the copy being pointed to.
            //while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {
            //coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;
            //}
 
            //new mapboxgl.Popup()
            //.setLngLat(coordinates)
            //.setHTML(description)
            //.addTo(map);


            const listingId = e.features[0].properties.listingId;
            const zoom = map.getZoom();
            const currentLongitude = map.getCenter().lng;
            const currentLatitude = map.getCenter().lat;
            var newurl = new URL(window.location);
            newurl.searchParams.set('SelectedListingId', listingId);
            newurl.searchParams.set('Zoom', zoom);
            newurl.searchParams.set('CurrentLongitude', currentLongitude);
            newurl.searchParams.set('CurrentLatitude', currentLatitude);
            window.location = newurl;
        });
    })
</script>