@model ListingsViewModel

@{
    ViewData["Title"] = "Home Page";
}

<link href="https://api.mapbox.com/mapbox-gl-js/v2.8.2/mapbox-gl.css" rel="stylesheet">

<div class="row">
    <div class="col-sm-10">
        <form asp-controller="Home" asp-action="Index" method="get">
            <div class="row">
                <div class="col-10">
                    <div class="row row-cols-2">
                        <div class="col d-flex justify-content-between">
                            <label asp-for="Neighbourhood">Neighbourhood:</label><select name="Neighbourhood" asp-for="Neighbourhood" asp-items="Model.Neighbourhoods">
                                <option value="">All</option>
                            </select>
                        </div>
                        <div class="col d-flex justify-content-between">
                            <label asp-for="NumberOfReviews">Minimum nr of reviews:</label><input type="number" asp-for="NumberOfReviews" />
                        </div>
                        <div class="col d-flex justify-content-between">
                            <label asp-for="MinPrice">Min price:</label><input type="number" asp-for="MinPrice" />
                        </div>
                        <div class="col d-flex justify-content-between">
                            <label asp-for="MaxPrice">Max price:</label> <input type="number" asp-for="MaxPrice" />
                        </div>
                    </div>
                </div>
                <div class="col-2 d-flex justify-content-center align-items-center"><input type="submit" value="Filter" /></div>
            </div>
        </form>
        <div id="map" style="height: 600px; width: 100%; margin-top: 1.5rem"></div>
    </div>
    <div class="col-sm-2">
        <h2>Details</h2>
        @if (@Model.SelectedListing == null)
        {
            <p>No listing selected to view details about.</p>
            <p> Select an item from the map.</p>
        }
        else
        {
            <p><span class="fw-bold">Name</span>: @Model.SelectedListing.Name</p>
            <p><span class="fw-bold">Name of host</span>: @Model.SelectedListing.HostName</p>
            <p><span class="fw-bold">Price</span>: $@Model.SelectedListing.Price</p>
            <p><span class="fw-bold">Neighbourhood</span>: @Model.SelectedListing.Neighbourhood</p>
            <p><span class="fw-bold">Property</span>: @Model.SelectedListing.PropertyType</p>
            <p><span class="fw-bold">Type of room</span>: @Model.SelectedListing.RoomType</p>
            <p><span class="fw-bold">Bathrooms</span>: @Model.SelectedListing.Bathrooms</p>
            <p><span class="fw-bold">Bedrooms</span>: @Model.SelectedListing.Bedrooms</p>
            <p><span class="fw-bold">Beds</span>: @Model.SelectedListing.Beds</p>
            <p><span class="fw-bold">Amount of reviews</span>: @Model.SelectedListing.NumberOfReviews</p>
        }
    </div>
</div>


<script src="https://api.mapbox.com/mapbox-gl-js/v2.8.2/mapbox-gl.js"></script>
<script>
    mapboxgl.accessToken = 'pk.eyJ1IjoiaWtiZW5kZXNqYWFrIiwiYSI6ImNsMnVjdnRrZDAwdWcza296Zm1zN2pnbXoifQ.FrZP3oNq-RBL9RMJES4xsQ';
    map = new mapboxgl.Map({
        container: 'map',
        style: 'mapbox://styles/mapbox/streets-v11',
        center: [@Json.Serialize(Model.Longitude), @Json.Serialize(Model.Latitude)],
        zoom: @Json.Serialize(Model.Zoom),
    });
    map.on('load', () => {
        map.addSource('listings', {
            type: 'geojson',
            data: @Json.Serialize(Model.Listings),
            cluster: true,
            clusterMaxZoom: 14,
            clusterRadius: 50
        });
        map.addLayer({
            id: 'clusters',
            type: 'circle',
            source: 'listings',
            filter: ['has', 'point_count'],
            paint: {
                'circle-color': [
                    'step',
                    ['get', 'point_count'],
                    '#a0a0a0',
                    100,
                    '#848484',
                    400,
                    '#424242',
                    750,
                    '#222222'
                ],
                'circle-radius': [
                    'step',
                    ['get', 'point_count'],
                    20,
                    100,
                    30,
                    750,
                    40
                ]
            }
        });

        map.addLayer({
            id: 'cluster-count',
            type: 'symbol',
            source: 'listings',
            filter: ['has', 'point_count'],
            layout: {
                'text-field': '{point_count_abbreviated}',
                'text-size': 16,
            },
            paint: {
                "text-color": "#ffffff"
            }
        });

        map.addLayer({
            id: 'points',
            type: 'circle',
            filter: ['!', ['has', 'point_count']],
            source: 'listings',
            paint: {
                'circle-color': '#000',
                'circle-radius': 6,
            }
        });

        map.on('click', 'points', function(e) {
            const coordinates = e.features[0].geometry.coordinates.slice();
            const listingId = e.features[0].properties.listingId;
            const zoom = map.getZoom();
            const currentLongitude = map.getCenter().lng;
            const currentLatitude = map.getCenter().lat;

            var newurl = new URL(window.location);
            newurl.searchParams.set('SelectedListingId', listingId);
            newurl.searchParams.set('Zoom', zoom);
            newurl.searchParams.set('CurrentLongitude', currentLongitude);
            newurl.searchParams.set('CurrentLatitude', currentLatitude);
            window.location = newurl;
        });
    })
</script>

@if (Model.SelectedListing != null)
{
    <script>
        const marker = new mapboxgl.Marker()
            .setLngLat([@Json.Serialize(Model.SelectedListing.Longitude), @Json.Serialize(Model.SelectedListing.Latitude)])
            .addTo(map);
    </script>
}
